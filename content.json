[{"title":"爬虫逆向学习笔记-3","date":"2021-12-29T13:18:24.000Z","path":"posts/c30002b9.html","text":"","tags":[]},{"title":"爬虫逆向学习笔记-2","date":"2021-12-27T04:59:34.000Z","path":"posts/b407322f.html","text":"爬虫逆向学习笔记-2 有道翻译 js加密+js混淆 --新逆向网课分割线-- 迭代器 58同城字体反爬 政府网站爬取 启名科技js逆向 百度翻译 有道翻译 1234567891011121314151617i: dogfrom: AUTOto: AUTOsmartresult: dictclient: fanyideskwebsalt: 16405813028816sign: d86336b82e5a6e7b61bc03abd7acb1celts: 1640581302881bv: 88fbf5acaea190b1226a67423acb83aedoctype: jsonversion: 2.1keyfrom: fanyi.webaction: FY_BY_REALTlME抓包后的数据。其中bv是不变的，只需要处理salt，sign，i，lts。sign的值是结果md5加密，加密的时候使用到了e，isign: n.md5(\"fanyideskweb\" + e + i + \"Y2FYu%TNSbMCxc3t2u^XT\")e是单词，i是时间戳（python的时间戳*1000=js的时间戳 123456789var t = n.md5(navigator.appVersion) , r = \"\" + (new Date).getTime() , i = r + parseInt(10 * Math.random(), 10); return &#123; ts: r, bv: t, salt: i, sign: n.md5(\"fanyideskweb\" + e + i + \"Y2FYu%TNSbMCxc3t2u^XT\") &#125; 调试后的代码： 12345function getSign(e, i) &#123;var e = \"cat\";var i = \"16405818608679\";return md5(\"fanyideskweb\" + e + i + \"Y2FYu%TNSbMCxc3t2u^XT\");&#125; 1234567891011121314151617181920212223242526272829303132333435363738import requestsimport execjsimport timeimport randomurl = 'https://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule'headers = &#123; 'User-Agent': '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1\"', 'Referer': 'https://fanyi.youdao.com/', 'cookie': 'OUTFOX_SEARCH_USER_ID=-1489223683@10.169.0.102; OUTFOX_SEARCH_USER_ID_NCOO=1259249738.4781208; JSESSIONID=aaaMKiL6yzK9naOVeq63x; ___rl__test__cookies=1640581302873'&#125;node = execjs.get()# 编译lts = int(time.time()*1000)ctx = execjs.compile(open('youdao.js', encoding='utf-8').read())e = input('输入需要翻译的单词:')salt = str(lts) + str(int(random.random() * 10))# 执行jsfuncName = 'getSign(\"&#123;0&#125;\",\"&#123;1&#125;\")'.format(e, salt)sign = ctx.eval(funcName)data = &#123; 'i': e, 'from': 'AUTO', 'to': 'AUTO', 'smartresult': 'dict', 'client': 'fanyideskweb', 'salt': salt, 'sign': sign, 'lts': lts, 'bv': '88fbf5acaea190b1226a67423acb83ae', 'doctype': 'json', 'version': '2.1', 'keyfrom': 'fanyi.web', 'action': 'FY_BY_REALTlME',&#125;text = requests.post(url=url, headers=headers, data=data).json()print(text['translateResult'][0][0]['tgt']) js加密+js混淆 1爬取的网站：https:&#x2F;&#x2F;www.aqistudy.cn&#x2F;?mobile&#x3D;false 由于网站已经被玩坏了。不做记录了。 ————新逆向网课分割线———— 迭代器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 不使用for循环遍历li = [1, 3, 5, 7]iterator = li.__iter__()while True: try: res = iterator.__next__() except: break else: print(res)# 不使用for循环遍历字典dict_info = &#123;\"name\": \"lmj\", \"age\": 18, \"gender\": \"man\"&#125;iterator = dict_info.__iter__()while True: try: res = iterator.__next__() except: break else: print(res, dict_info[res])# 列表推导式l = [i for i in range(1, 10)]print(l)# 生成器l_ = (i for i in range(1, 10))print(l_)print(l_.__next__())print(l_.__next__())# 生成器函数def func1(): for i in range(1, 10): # print(i) # return i yield ires = func1() # 生成器对象print(res)for i in res: print(i)# 返回1-100之间能被3整除的数def func2(): for i in range(1, 100): if i % 3 == 0: yield ires = func2()for i in res: print(i)for i in enumerate([1,55,99,\"lmj\",\"man\",5.0]): print(i)for i in zip([1,55,99,\"lmj\",\"man\",5.0],(\"a\",\"b\",\"c\",\"ma\")): print(i) 58同城字体反爬 爬取的网站做了反爬，用selenium登录后获取源码再解析。找到一个woff开头的字符串，且带有base64。 使用base64解码后是一个字体文件，由于每次加载的字体文件都不一样。寻找到一个普遍规律:y-x的值为固定值且对应于同一个字。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import requestsfrom selenium import webdriverimport timeimport reimport base64from fontTools.ttLib import TTFontfrom io import BytesIOurl = 'https://sz.58.com/searchjob/'option = webdriver.ChromeOptions()# option.add_argument('--headless')driver = webdriver.Chrome(options=option)driver.get(url=url)time.sleep(0.5)driver.find_element('xpath', '//*[@id=\"mask_body_item_username\"]').send_keys('xxxxx')driver.find_element('xpath', '//*[@id=\"mask_body_item_newpassword\"]').send_keys('xxxxx')time.sleep(0.5)driver.find_element('xpath', '//*[@id=\"mask_body_item_login\"]').click()time.sleep(0.5)driver.execute_script('scrollTo(0,10000)')time.sleep(0.5)page_sourse = driver.page_source# print(page_sourse)result = re.search(r\"base64,(.*?)\\)\", page_sourse, flags=re.S).group(1)b = base64.b64decode(result)# print(b)with open('ztku01.woff', 'wb') as f: f.write(b)fonts = TTFont('ztku01.woff')fonts.saveXML('ztku01.xml')tf = TTFont(BytesIO(b))data_map = &#123;(0, 1549): 'B', (1588, 0): '男', (868, 0): '王', (0, 1325): '1', (0, 125): '2', (159, -123): '3', (0, -1023): '4', (0, -227): '5', (-121, 62): '6', (-244, -426): '7', (0, 134): '8', (0, 410): '0', (-46, -550): '验', (0, 144): '经', (228, 306): '科', (0, 110): '博', (746, 0): '士', (128, -74): '9', (928, 0): '本', (-52, -52): '本', (582, 0): '届', (1298, 0): '高', (210, 358): \"校\"&#125;for index, i in enumerate(tf.getGlyphNames()[1:-1]): # 第一个元素和最后一个元素去掉。[1:-1] # GlyphCoordinates([(1318, 372), # font[‘glyf’][字体编码].coordinates # 获取字体坐标信息 temp = tf['glyf'][i].coordinates x1, y1 = temp[0] x2, y2 = temp[1] new = (x2-x1, y2-y1) print(new) key = i.replace(\"uni\", \"&amp;#x\").lower() print(key) data_map[key] = data_map[new]print(data_map)for i in data_map: print(i+\";\") # replace源码中的字体即可。 政府网站爬取 12target_url = 'http://zwfw.san-he.gov.cn/icity/icity/guestbook/interact'url = https://www.zhanjiang.gov.cn/hdjlpt/published?via=pc 12345678910111213141516171819202122232425262728293031import requestsimport redef get_ck(): url = 'https://www.zhanjiang.gov.cn/hdjlpt/published?via=pc' headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', &#125; ck = requests.get(url, headers=headers) page = ck.text tk = re.search(\"_CSRF = '(.*?)'\", page).group(1) return ck.cookies['szxx_session'], tkck, tk = get_ck()url = 'https://www.zhanjiang.gov.cn/hdjlpt/letter/pubList'headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', 'Cookie': 'szxx_session=&#123;&#125;'.format(ck), 'X-CSRF-TOKEN': tk,&#125;data = &#123; 'offset': 0, 'limit': 20, 'site_id': 759001,&#125;response = requests.post(url=url, headers=headers, data=data)print(response.text) 启名科技js逆向 抓包后，只有两个包。返回到的是加密后的数据。 1encrypt_data: &quot;bOnqtWHqs4vudLnK0KY4XRDqETjrVu1QsqNXJPhDpIGIX99zjQmJldqFIQZhwQvc73Xpv1aZl9d6UMKO2CROI8txO9XkzSGu8P&#x2F;M99rdIO7YKcTIKWIpNKkNoFmvalwtd2dX4Djt2ACC0mtgnzNrIboNgHgtBERJMuFPNSxYfnetORcADtyU5yegYkm26tYg5Jl1MgCbTp+UgVm4MjAc0LO8JYJ5itJm2ha82Eh8Gbm+t8lGDew81q6kpBSOPXZH7oIUbnkVmIi1LQLHLw2hIaV&#x2F;KPWzGyVR6+hd4CTHEw5n1MFji6XEiL1pS1pLbgFisDTLQWZHytejxEeYWUS7NwqClox2zONIHDqjREqcps76+XwRSflDbwPm00Em9xvD3nSxFSvowOfaEZzrXOTTQDM4SMxgJHahrkgZWiBtYDbratC7cA+QYVSOf0&#x2F;VkKp52kvHkZ95UHp4C5tdgpyC7usz7VY30&#x2F;niXRLYZMeoBi6bIHjADylgDWtRCCm+gGyKISIanmk2&#x2F;eHw&#x2F;8z32t0g7n2fFw&#x2F;TTN17UhnB+UtVBhdaOgU&#x2F;jGbPO6ngVc1tYz15EJ6HOOF9nb3iNAsCrR&#x2F;MtIUkROhXjPffJcPEZdRyIlTGMKsvbEauI8VNBtSV0ypsT69oTuDGSfCiZHMKibGmFOArHcGCmNlCbzgfeWOWcFSIyk0SzZhLqXPW5adAtwz7VHxqfUtmi31ZekCNQEE8pMe32j6T0Z0PQhcrWUn0DvN2Pmc5uEzG8wulZ5gr0wm2FqA4Rc0R3YxFg+kjojL4YfBs87QbOX4xaK5NZqmdRv2yqie0IokZ3gV3GR90ckj8&#x2F;r2ePOlALf+5Q+fpw5gmnZgtZoonG9RNfShXyIazZAJx6mZzpu7bC&#x2F;OXmOu90capHSyhmCIUQzTXGzSnKrm37OINrbLt4mx+f3riT3DCvsxDqnsRoa3xUEpm1fCYzu4q9GWmTT3iHnJQlkbAQoVSobjE76CA8Slp96hws1rkCQ2oHYABLvAfLkZIkwL0XvU1k1wjBAVhWnmgLE8hIPMSBGuU&#x2F;MDv1pxb&#x2F;T+jRuHAmca+DhIK6tvVvKDywVUCskTMmyB4wA8pYA1rUQgpvoBsiiEiGp5pNv3h8P&#x2F;M99rdIO59nxcP00zde4xfBfP0as&#x2F;SYHiMfj05+Pyp4FXNbWM9eba+Hwada6tJejZRtta1qyci4zeccUNRJRGjxxqbNsOXIBVH4w8a2X3&#x2F;JSV4QgHG26CT6w1he9qmohaJsNCT4kSgMX3a2QBItW84H3ljlnBUJrzjx7k&#x2F;1NEikuVYst41P1sfS4Z5SR538&#x2F;ODSd3SE8Vb3UgDpjsZ4J3VHDb2MBdap9rtQaHwBc5WLr0wqJxJp2Vd0&#x2F;2a&#x2F;lDjMuFsOVUAvohQcl+VbfngC+916b9WmZfXelDCjtgkTiPLcTvV5M0hrvD&#x2F;zPfa3SDu2CnEyCliKTSpDaBZr2pcLcR5d8ODVjhhXI&#x2F;Q06b75i82cfFKhMvgEblU1OWUYYBoWCTOC5uKfoFqTAaesUupNoW3jH6NQPUOlq+dKc2NWOx6648e4mGTYy5Hc&#x2F;2GVCfJcx0CNqInGdyupGodbjzTtZseNXGtsowutL9KtjU4O3Z573cz7FgVvyOqNKcrIBBwlBMTicVZTzEa1wKfJ0IRXQCUjcTPcikr5lDX&#x2F;kxfDUJuNx+uLtmnc4NJvxGC5O+RWW0PdxRskLKanqX42guCWv5DBFHsZevzi45ixyiywFBQWg+27EjTdY&#x2F;m1O6degjrOTnP2HG59Gwl8qbeqGuV4&#x2F;d8NmLi116u8gZSpc9qm5MAzsz&#x2F;dJO08zdHRoQtG7lv0gbqkdzZN1ASsCtEjkPOQLwXQx6Anq9i0rMVzwxFkdXk8yB0TZL&#x2F;1M&#x2F;tHtfhL7uHtHk0kInYWmUEtKgEuklWoBinjs&#x2F;X22YG4ZSuVTwqUVmVeQLkQW7htz4Ak7P7j+QsZq4Y+PeIXJag4Lrc4r1rKKobKNfwbpA7CM&#x2F;Xabi2ovti4&#x2F;yNp+cw5hoJU9LHJxATXrwDd8Wy+uOy6ZgCdqo1foH4KUwslCxLlV5XYuZzTGKcFaZJzXdAwB&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYBg8BOMGgEaGkxnOlCvL4vx67d2pZCXlQCCR7Gwwq5b+0li2Fc&#x2F;FJ68sohETVXiAhJ62YAFQI&#x2F;wN7JEyDcvMvD3nKbIbX7iecqdASthB&#x2F;BEHckSRMp5G4KoApWKNWm2czCC1C58X&#x2F;Mm2hoyWiPXxTq5IMYTPqFRuVEyz+RawY9Lgw9GYnYJwRA12QKoao2TQX7sVVZKiP0s7WLj&#x2F;I2n5zDmtnFYRfrXQZKJnxBy6gksjpkck06OFd1B3VlC&#x2F;jmqd80DFVNQOSypj3y&#x2F;&#x2F;coPVsKBINW3t9mgnjn9MzCayhvtqc6++&#x2F;ofW1U6YvlYE8BdvYKkpEiBz7wdtgoGHD9wpXxxk&#x2F;mRqv84J6xqCzmrNqQPahyZUkDwhYHNKbgzYHJ9NNyTkUOsJS4&#x2F;bPlXlJQiV8jz6aJtRQGsP9zg&#x2F;oVtols5X2iciwMa3S+BxXiQ8h1MZpl7+rpUUj4K14xVn6PUxj+a1sCuf35i&#x2F;Pm7qpWkSJKA9wAtlCC1NgKgPrACxbV60x9CIl308aDNDWdZXjqecilnR9cljJoPRGcDHMHOB3uMlCrkaYldPckMIHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHE+Pb7O702L83niUpgyubjGF&#x2F;ixH+p6iC8vQuwIbpRWJ3Bfz4nWxIhMzFunEpHsk4NWjIQqE8GB&#x2F;WyCBQ3C9naQCWXg4OjUqb3673+3u6R2cjlZKLgQgLUTBQV+q8HHvO22QKoao2TQX6Y6D3yg86ZLdX1lxG1oA0yy17n20gEjgt7+rpUUj4K101J+wqX7+WaKX+oa5Sq2KWy6ZgCdqo1fjn&#x2F;5jjG4U+D8oM4CeK45bMI19Udi9F4nh&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYBg8BOMGgEaGkxnOlCvL4vx67d2pZCXlQAgTr78Qg1P1VSXibL&#x2F;S+&#x2F;g4Yoiw5s9l8hLQ7LklKyyVcowSXet5gWX4ITtTZMUfkda2jIhFLLyMp5yvSOuM+Ym0fcnaiOij4uC1C58X&#x2F;Mm2hoyWiPXxTq5IMYTPqFRuVGEg7OKMiEMFA9GYnYJwRA12QKoao2TQX6H4pePMxEAV2Lj&#x2F;I2n5zDmT&#x2F;YkXvTwO5KbDs&#x2F;QyZPUkM+d3fAoWQ3Gj8+TCTCzjNc3R0aELRu5b9IG6pHc2TdQErArRI5DzkC8F0MegJ6vYtKzFc8MRZHVZH8hTEatrHbP7R7X4S+7h7R5NJCJ2FplGddVH0CagQnR0NSD81++oaNdA98KbQiubxQ8BzbBNF5GoJhHVkZv9z2bpxL+Tx5GuZthyQdgeSXwKJXqpPOu9pt1kF&#x2F;1vM1DAC2UILU2AqBjifhpIobQMbZB98nLnX9QND0Ckd+hEzKC1C58X&#x2F;Mm2kuzegsupW9K4SFoKJcBoxJII4bD&#x2F;DxHilYDPia2iUb8AmElAMyTAcPdWUL+Oap3zQMVU1A5LKmPfL&#x2F;9yg9WwoEg1be32aCeOf0zMJrKG+2pzr77+h9bVTpi+VgTwF29gqSkSIHPvB22CgYcP3ClfHGT+ZGq&#x2F;zgnrFuYNskjrDHljnY+L&#x2F;8TS1CJmPnoGH+gSIqbAgnjw1G2ozzMh&#x2F;fxIKDatk9Df0+Z&#x2F;llmfecyGHHji3PLiBuMowsdxUPuXCGHi3v6ulRSPgrXjFWfo9TGP5rWwK5&#x2F;fmL8+buqlaRIkoD3AC2UILU2AqA+sALFtXrTH80UGtXI38Ikm&#x2F;8z01Cz3srahit6t&#x2F;7PW3OBYRXheCDST9CnPeeHlEtGJwYfEobHkf9KcSqw&#x2F;cI9JlD75xlTvT+1QAiN3TL+EJUhU72imNcOOgcTEapwuxc1r0wIuQc1ot&#x2F;BgwPJm98531KgyT8PfgGjtUDokMkt8DStNA7GwvdAQntJbrWejNployRqkB2c7LudcYvxSixMp5U5MkOn00wKiAMrXElOlXhhqUamcAtLb0oV5laDoX52ZgK6t7pc+WnTE8YjvWSVAji9Y3EUiytl3dGDe0ZtO2YbUH4++t4I5qmqqKkc&#x2F;qx1g4O81w8IDXOfafE2AEKgbQ4MD&#x2F;+723ku5wypf3JcWRK8HtclrqYh51XGRSAxDJasc&#x2F;mcWgP68&#x2F;koTw7yCpXVPLLfrfjXatCtIvmnAeSpC8Q&#x2F;PyKsWzGTkVfXQXVff834kpDbcQ6BvnSAYH87e9P7xF8LisalLzIjqjSnKyAQcJQTE4nFWU8xGtcCnydCEV0gdTVDC3IyUdCXEumvKovxDRgA+NCW+PGDSb8RguTvkYwvnomLzuw7mEpOU8afRIdIBi21G0XJ+4wvnomLzuw7rK1H370d9RTPNqQJBXj4fcu5RGMZ80iNRiVpKw8zTLR4JLlNHIMq43hr5iytZChh9&#x2F;3aZVi10oq&#x2F;ycW9h9ANQyB7MJSCAI0zPw5NgqKdQsE2j1GgVmlmL952e8dyZAxdtDsvmQvMr5&#x2F;XHNOD+DAxxEHzUmytZWOF54lKYMrm4xiRA94tBmLb0KhtVGboYUEvgHsaUFow8ukF7TgwvFE5zrqGAwRDBiEa928wFi9IOEbyAmdb18&#x2F;vPx6CGhQTSwBnuMJbWH1ZD9Gm95ojBUnTKPOY9cG90c8p1jMpTvWYCBdII4bD&#x2F;DxHimOYHRmq2inG4uR2EZwwfIi9hi5QwJRYg3jPu6kq6zU4IHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHE+Pb7O702L83niUpgyubjGEg3TSe17LCCipzmHEl6M+D+JlFQMyICNaxTnnq0Bb7WRop+M3DvBGXcgG0i8oFbdz68R2yDlVVM+wBe9rkfq3238xsX+LYJ19qjl9J4xC4&#x2F;2QKoao2TQX6Y6D3yg86ZLWmu2QqRlpeUy17n20gEjgt7+rpUUj4K1&#x2F;xLmKAJNdz+KX+oa5Sq2KWy6ZgCdqo1fjn&#x2F;5jjG4U+D8oM4CeK45bMI19Udi9F4nh&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYBg8BOMGgEaGkxnOlCvL4vx67d2pZCXlQAgTr78Qg1P1VSXibL&#x2F;S+&#x2F;g4Yoiw5s9l8hLQ7LklKyyVcowSXet5gWX4ITtTZMUfkda2jIhFLLyMp5yvSOuM+Ym0fcnaiOij4uC1C58X&#x2F;Mm2hoyWiPXxTq5IMYTPqFRuVGEg7OKMiEMFA9GYnYJwRA12QKoao2TQX6H4pePMxEAV2Lj&#x2F;I2n5zDmBrev8BnZW1Pmj18p7RbzL6f3Wq6aGx4w6Ps+3bMGrHs3R0aELRu5b9IG6pHc2TdQErArRI5DzkC8F0MegJ6vYtKzFc8MRZHVZH8hTEatrHbP7R7X4S+7h7R5NJCJ2FplnRS66h7EOYLwK5NScLqCXZbHg+NB1HENbHHNyNwUB8Y8Xva8GHla7FgOIleHnxTTUHejY0z0&#x2F;E&#x2F;yVFDSekDD3kcVOUwgotKgAC2UILU2AqBjifhpIobQMbZB98nLnX9QND0Ckd+hEzKC1C58X&#x2F;Mm2kuzegsupW9K4SFoKJcBoxJII4bD&#x2F;DxHim7ERMpuQuY4rjyGeXKAcqfdWUL+Oap3zQMVU1A5LKmPfL&#x2F;9yg9WwoEg1be32aCeOf0zMJrKG+2pzr77+h9bVTpi+VgTwF29gqSkSIHPvB22CgYcP3ClfHGT+ZGq&#x2F;zgnrCASpqcpPdL1++UZd&#x2F;KKSGcWNDKDBnmNwo3xA+dhmF&#x2F;uJMubW0fRmVc96d8RyB9IVG3gVnn4NshpI9jP96s5oKkZgXvd8csDjnv6ulRSPgrXjFWfo9TGP5rWwK5&#x2F;fmL8+buqlaRIkoD3AC2UILU2AqA+sALFtXrTH0IiXfTxoM0NZ1leOp5yKWdXGzCUydlzDWLhmblmtt8ngGT9A9EfuMUgezCUggCNMz8OTYKinULBNo9RoFZpZi&#x2F;ednvHcmQMXbQ7L5kLzK+f1xzTg&#x2F;gwMcRB81JsrWVjheeJSmDK5uMYEdWD75BC0mpl4&#x2F;Q48OV1t8MoaQRXIpi2baAqMRk2QC32kGbBj3AzCAORgF1TeVLTemc3IdnpR5AnKL0F98uHfHlBwvBtfZg6D0ZidgnBEDXZAqhqjZNBfpjoPfKDzpktgtQufF&#x2F;zJtpLs3oLLqVvSrlS5oZLjvxoSCOGw&#x2F;w8R4ow&#x2F;llQMFPSGKuk0g4zG0p7b9wkKE8bcgeakVGnGqcY8Xy&#x2F;&#x2F;coPVsKBINW3t9mgnjn9MzCayhvtqc6++&#x2F;ofW1U6YvlYE8BdvYKkpEiBz7wdtgoGHD9wpXxxk&#x2F;mRqv84J6xQ6cHh&#x2F;dxJbzkK7SbAqjfW9NqrsKDglXpAFkFbCtlZKihBaxBjSiRkDUigKl4yrK5NTeKl9p+wQa2&#x2F;WH39My76WCodo+3X9XN7+rpUUj4K14xVn6PUxj+a1sCuf35i&#x2F;Pm7qpWkSJKA9wAtlCC1NgKgPrACxbV60x9CIl308aDNDWdZXjqecilnaYE9j71UtZQnJMAdSAb64dYmkVTQgblkIHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHE+Pb7O702L83niUpgyubjGBvEhyXVLd21UgltHj1e9StOCQ+BuFYApAUxRLv6vhfnC+bHEQJGGbxiWCMGwda1eNougdNasL33Q3GOy5U7DooJPyjtCcduWKjS6J5XGYVI2QKoao2TQX6Y6D3yg86ZLdX1lxG1oA0yy17n20gEjgt7+rpUUj4K101J+wqX7+WaKX+oa5Sq2KWy6ZgCdqo1ftBNhIyzwCjrNw36VJq5r6MxV8hvGQacPR9zKf8TTJL0H8V&#x2F;vN7SkwDDK244U7k1oEFbtKfGivv1hFsxGiGkzqxWDY1POP3FgGDwE4waARoaTGc6UK8vi&#x2F;Hrt3alkJeVAF3JZpscoBzi+xNn&#x2F;yvTXrFpmeq+LrsnH&#x2F;1JIKqSVCNw6GG3NBkIO4a0wk0aLEayvoPe0Jn5EZaDSbhI07L6+gQz+w+Lu4HYlYLULnxf8ybaGjJaI9fFOrkgxhM+oVG5UYSDs4oyIQwUD0ZidgnBEDXZAqhqjZNBfr8Qn6W5KDRLZqYzMFFmTNhYEdLf5UcmVivxAzeMc2upyzR5k4taXRICsgbN+ee6tLEI0DGbidTwoVl8iftJCtLvdem&#x2F;VpmX13pQwo7YJE4jy3E71eTNIa7w&#x2F;8z32t0g7tgpxMgpYik0qQ2gWa9qXC2PNqJkXozD6V29PvOlm+ezDmE1NOUrGgYy4U81LFh+d605FwAO3JTnLdLLYF9GkwvouAg135mAGydF4CsHjCNps7wlgnmK0mbAIbKeXz1iZs&#x2F;6NEIOrSj4EFRFxmaphihEtQ4x9RAusi1s9N&#x2F;5GlSF8fYrIQJEKysoMiGFSXnaCikBXS1wRrvt1e&#x2F;9dt+EiK7GOBGNy2wjHLJyshTBSjlq0mH2XF+zsVTYGe42OiZSaat4Hh6ksLhNFQ1zB28HdDKH8hnHan&#x2F;1LAT2ogWWJGx++vl8EUn5Q2&#x2F;YZYO6SGV&#x2F;rLXYsokqTaYOuDwcsDdb6ZKNJO22JHPSNtqHnPndCb7rXQyj03gjyY1Fg+kjojL4YfBs87QbOX4xaK5NZqmdRv2yqie0IokZ3gV3GR90ckj8&#x2F;r2ePOlALf+rhJ5kBBZgsJgtZoonG9RNNgRKwj8rmZBUclwkGM9SMIRdnQtfpETPwJjjjs4ehfw+WTbU2oF4bYV1OBydwOF0DdmmBTHJAIMtaZncYq8k46esdSDXItBD58lgcbcMmOkt80VfC4wW&#x2F;h9JW7Lv+YDYLRAwFP8eBMgkbzcH5i8P+6ZghFpyNPY+Ksy47m5l01mNtQRmsPXGPGv80g8Zr+KRNL80sUp0FAzw9snXBBGMmHDUi6wMIRd+cKf2YK&#x2F;ju8ldFPM8wqaMrPsi8SqysVgPEXB5OwJsLfePVvFPrTC7dsgWQf5IdaUp8I3v62WkpKJo4LF39JEXCddjkCGvFy6nQEKTEzzJakAa+5Yv1AOa+iVMrcBK1Q6TCpmmWTWq1RdGSJMC9F71NVBDNpeVTErJ7Kx3EmKceYyhfYMBwvU+x7HNklyA4WXvP1KQMoThXQvvqEth6ZsVzVR8an1LZot9JasVVOsHdsPtyNS&#x2F;GU+jo4W3VTqvg4Bca&#x2F;zSDxmv4pE0vzSxSnQUDPD2ydcEEYyYcNSLrAwhF35wp&#x2F;Zgr+O7ydQzEfs3rUvJz+0e1+Evu4e0eTSQidhaZdr+21wY1bvcVlmgAHedAadM7uqxvGF9+6SvrUkL95X2o6WMQuMCS&#x2F;sXM097f6TTpUshKaCje0oBnO6WR1fSfB9mPbZgrxgNvAAtlCC1NgKgY4n4aSKG0DFzA4B&#x2F;+CP4Ljr5SgZXpUrQgtQufF&#x2F;zJtpLs3oLLqVvSucpIZ8K+OgvCowGs3B0Jpl+EGN3RS&#x2F;lJovvmyTVRZ0aU9UmYoJenHbVjR&#x2F;jrXQtbt9xPKJjREDdPGi0Y8NCZMK1gYZ+qi4LPx2DklCmh6rIVtGsBJiER1SPW+0vQvtmRNKCB2KW&#x2F;Zu+DO6wAIW5C6ypDaBZr2pcLRmqcIc0dUYAYWwh9suIeXLTykXLO+Tvz&#x2F;BbvE6C+wogWeDj2s8GIBTHWaW4ZqPZdn1S+&#x2F;9PlBOosMVqoc7Z&#x2F;fhA4RMhF19TiA2mM8aASrX7LYKGIFepbgdW74zjMlEd4z8Abnmq3YxwYHSbWu9TUybbXSE4DLcIfWamqWTpT4W9IaGHKpeMegwhSDU68bpGOxedS9dD2ZD1B4Oi50QILOAmXhcgYyC43a05FwAO3JTnkECCV9NIatsdSq3c0&#x2F;T2&#x2F;jHu0bl6K6CHs7wlgnmK0mbCVjmqtMGsTrqoIU&#x2F;7u9MYlawDb5jZrPjUWHh1g5oLcQamb1ntilQUxQkTQ1031F&#x2F;V7&#x2F;1234SIrsY4EY3LbCMcRiwMmGBmmVoKu8Z2TCppdUlbGvk2hYwTq3geHqSwuE3xFnsdo04hbpqepfjaC4JaefJ6lClbZcw5&#x2F;UzYRsRiIjHxzVlRX5rMRQ5eR+gcTDgSfJE6Ec+dURHQh7nFlHeF93w2YuLXXq7yBlKlz2qbkwDOzP90k7TzN0dGhC0buW&#x2F;SBuqR3Nk3UBKwK0SOQ85AvBdDHoCer2LSsxXPDEWR1eTzIHRNkv&#x2F;Uz+0e1+Evu4e0eTSQidhaZd+2YNWO2th+kw&#x2F;Rq1ZNXDLaJXJNJ0a9MTc7hOGhd6Fex7nc0WulkqmYJHYFQ4ry7TLla&#x2F;&#x2F;5skrBWgE8p0HQwqVNGGdsQOfqhGLj&#x2F;I2n5zDmGglT0scnEBNevAN3xbL647LpmAJ2qjV+uQtzmyeh10LVNFxRY4pYbf6SMyH&#x2F;NFFtH8V&#x2F;vN7SkwDDK244U7k1oEFbtKfGivv1hFsxGiGkzqxWDY1POP3FgGDwE4waARoaTGc6UK8vi&#x2F;Hrt3alkJeVAK3xKqyEXzz2K4xxXtkfkhG1aj1Zd7btwEyKbA9Fox1Ts1PK2HNDs6zkh&#x2F;Ukq&#x2F;qeiHnAnYxbgGXJUCId9pv5zbE&#x2F;KSLZ+qm9C4LULnxf8ybaGjJaI9fFOrkgxhM+oVG5UYk+DXf&#x2F;7ZFtD0ZidgnBEDXZAqhqjZNBfrCYnJT4DRiOYuP8jafnMObBnDFz+3EfOOFyGzOK9x7VSe2Fgb0Yx+9BuUJMzptfdjdHRoQtG7lv0gbqkdzZN1ASsCtEjkPOQLwXQx6Anq9i0rMVzwxFkdVkfyFMRq2sds&#x2F;tHtfhL7uHtHk0kInYWmWFjS7SIFAOhJu0VcusRHzoO4OGcIT2Xu7VxuisDZ&#x2F;a3oqOjXLbN+4OqHzNOq0ZgFeW67Nvl97+NBYyem8&#x2F;rPusYPYhf2KKjFYALZQgtTYCoGOJ+GkihtAxW2PIJFo0tHMFOuLllOFRFYLULnxf8ybaS7N6Cy6lb0rHHK254E&#x2F;u2EgjhsP8PEeKicFnPqB0xdMcDY&#x2F;QqT0l68l7EUtylAmMKVE6pxXECggudUmEbA3+aXrp3nHNGGKUAqcAlcxSEI58v&#x2F;3KD1bCgSDVt7fZoJ45&#x2F;TMwmsob7anOvvv6H1tVOmL5WBPAXb2CpKRIgc+8HbYKBhw&#x2F;cKV8cZP5kar&#x2F;OCes0nQiwcz4IgfHFYzeGz8g3US3uLhMcsPW9DL6nu9KLPoDaE&#x2F;sa67gxQ0TA21rbyk9lSP&#x2F;PTbKGn3eIFmBHwiRWO0T&#x2F;2EdfHCqe&#x2F;q6VFI+CteMVZ+j1MY&#x2F;mvob&#x2F;PuAnb3Fu6qVpEiSgPcALZQgtTYCoICP2gAuVpHXQiJd9PGgzQ1nWV46nnIpZyjnOk1sRELXfKXIr3Jw8KsqH7wzpQcdxQ8bNnffJkRxeunecc0YYpQCpwCVzFIQjny&#x2F;&#x2F;coPVsKBINW3t9mgnjn9MzCayhvtqc6++&#x2F;ofW1U6YvlYE8BdvYKkpEiBz7wdtgoGHD9wpXxxk&#x2F;mRqv84J6w9pETSRfCfD5gVixuGfwgEY66NI6KAzydGPaUHZCQM48sV8KZxTP1WyKa4r5Avhlb4YPKK&#x2F;8NJYQJ6iw9biDlZ073xValCj3J7+rpUUj4K14xVn6PUxj+a+hv8+4CdvcW7qpWkSJKA9wAtlCC1NgKggI&#x2F;aAC5WkddCIl308aDNDWdZXjqecilniyncOv8D3S4LpnFfzie7FOmcZr&#x2F;uKAmDIHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHE+Pb7O702L83niUpgyubjGGGvWYVDI4enZ&#x2F;lh+1ZOWTdaBjjwXQTedp4F2+Ococy0JAH17es+TbUVdahyr7z&#x2F;m5mQjjPzzWmADKBlxz7UMP227M&#x2F;o3gFg6zaS9BuSGMoC2QKoao2TQX6Y6D3yg86ZLR3SFTv+rRJ3y17n20gEjgt7+rpUUj4K1wky1ATJjLClKX+oa5Sq2KWy6ZgCdqo1fpP1yqkM51XXw+4YZgJqqR+cFaZJzXdAwB&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYBg8BOMGgEaGkxnOlCvL4vx67d2pZCXlQAfSAF7WH2jCPjBASDuDbDpnV3mcgFRDUkBsSaDxA+ntPMiQ4QhNlCMvR9AFosiiiipfNMOxkQlNb1ulBwpPDkIwUCbl+MGeAWC1C58X&#x2F;Mm2hoyWiPXxTq5IMYTPqFRuVGJPg13&#x2F;+2RbQ9GYnYJwRA12QKoao2TQX7j7EbhkcdKwGamMzBRZkzYFK4ON4iU0P5lXdP9mv5Q45UzGcpegi5hVyzbIr99pJqU47+PfdNR0IcfpSH9j3GjW0kruYDjz4uf+cfH704D0kUQcrQxPpU0hFsxGiGkzqyniBAv3HPGusI&#x2F;Y1FrZVLeSvULzt0D290CCj4EDN50WkMRzM4NEbsMx5ZAK3DyE7ZYJM4Lm4p+gde6nnxpn+ZgQ3ctmz0Fa3X+mZB5RFTiqHrrjx7iYZNjgihgJehS0Aiy7eh+BWKjXlPNpoeTU7rM+Ii39R3teLVyb9ofsUdqcxrXAp8nQhFdkE03EdAhG1qnBprLTZKlz243H64u2adzg0m&#x2F;EYLk75FMGtj&#x2F;5DejwlhHtdBDztoNmkEuiI9bh42srUffvR31FM82pAkFePh9f1aPIWciHtyxRs1nZqzIxruaspcnjQfElXlx79iE4QjbjjFgEdOw21xhk8f&#x2F;MERro8bc1Blv4Q9Esk2SjxHZg7p&#x2F;gabSQn2JeqK8L8b5HbcBsoG3R7RW7TWbnbn2z8h9Few9saJCjjors+Yw2HOXUhAVM&#x2F;MIyrv&#x2F;DwdJvkPYvHSKlG0dYRszRWZN2FnvdBxBdLYBLYV6fRlKFN8l3FsDTEdO4FTHgUl5nmsXqrexIMB1HNHGQdsupHWK7PFW89g3UYMF4w2N52ugLE8hIPMSBCX65pKV9zMoRvUsbX4ki9I8oiVk89pr&#x2F;UWD6SOiMvhhvFmuUupYNKVGSJMC9F71NVBDNpeVTErJ7Kx3EmKceYyhfYMBwvU+x7HNklyA4WXvP1KQMoThXQva+IE1YfqYhg1IQXyRKzaAZ7B5otjMLtHNR+oXUEiw+6h2i50&#x2F;yK+QIc+Kzwqw3anNUjZ4ff9CMpB1I1K6w+Vo8F&#x2F;2is+VoJ2igIqE&#x2F;peVw4&#x2F;4ctUgCROaGxhzkUfSFRDht+yyRmWi4TrUAXG02+EHwj9jUWtlUt6+59IlSt2Zk7QdUQVSj78fcpkURQ1+OwSH7hM+uzs9V4ZgZU4QqbFdWR+4CG6RzRa1DyySCsLBsgYqPNc7W1QEWVeoC0YOcKCZF0i7nLFIjCMBu1UCZjMbaeJkD200a4OPGQUVcs0PjHsEbeOn&#x2F;rfbJzXDQEGXE123xfxx9bH0uy5Cn4&#x2F;CqgkpUx2O3sCj9SNeCDdnj8rbgcfRES9099738SlPs8Rr2EhYJM4Lm4p+gUjH&#x2F;G5mlfYRLCYOxC23hVtJEetfFfvD03rrjx7iYZNj6pVmqV8MnhpJF5Q6y2AMjaDh5pZvLjCxAvnPFJddsmHGtT5axTGEc0MsrL+7owsmI6o0pysgEHCUExOJxVlPMRrXAp8nQhFdgT0AJDLiYjYnqO5b6Y+&#x2F;0W43H64u2adzg0m&#x2F;EYLk75EIh+JxIJBYKlhHtdBDztoNxbV9nTVXsI6srUffvR31FM82pAkFePh9y7lEYxnzSI1GJWkrDzNMtHgkuU0cgyrjeGvmLK1kKGH3&#x2F;dplWLXSir&#x2F;Jxb2H0A1DIHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHEQfNSbK1lY4XniUpgyubjGGTKu95e5f95nb6n+RTmdOdesWBb128gvjJMykL7l4rbj2C74vQZsGy0bbPo5FsBtzoGewHqiSbVE0pfOz+Eo9JK1iHZElauUdUHh3vRWXKq85j1wb3RzynWMylO9ZgIF0gjhsP8PEeKc5aeEjoXEjDbm493wOcZ9P00KNtLQzORcsOS2VMpVn58v&#x2F;3KD1bCgSDVt7fZoJ45&#x2F;TMwmsob7anOvvv6H1tVOmL5WBPAXb2CpKRIgc+8HbYKBhw&#x2F;cKV8cZP5kar&#x2F;OCesvI4zzYDS&#x2F;&#x2F;I3bJ&#x2F;x5zSmm6BdhbR0cFFTsoQwTlPFDbqbFEJpAQoEjq0lEqa5YNOGpr&#x2F;DJU5Abw50Gn+sxSue0KwDupzFwckhe&#x2F;q6VFI+CteMVZ+j1MY&#x2F;moC6WLLoD3pYu6qVpEiSgPcALZQgtTYCoAWiq5Uoo00izRQa1cjfwiSb&#x2F;zPTULPeylG&#x2F;ZkNv5r7BJevLgL0ob53KwnEJ0cxQ327xzK7ZGOM4&#x2F;jcnEGj7cGHPkXEJb5krrsUIj0kBvCtWCmOSpIEWMofoFW0U5vKmIM6++&#x2F;ofW1U6d58i1QBBbvghvMCAZOfn3wwltbt6ARZxh1hBDkVAyA4vF8iPoBIdsbRlyUiLPL8efhzS7EXQgzqxSiep0OI&#x2F;t9MzfHm&#x2F;TZEUE8TwH+8ytXLImh4rlpQH9tKX5+lvHWDYK2kQUSHdAHvj2XSfjtyKToEnfS9nGpE&#x2F;USBBx+12MsFYMznRBHimG4xCkz4ye8KETUeb5XVYbsO8iprl1JOwxdArqLjmGKp4GC+vDPTTUPFcUleWxE03yE8jMnzJ640xitFy2zDgf95L6ivH0PdfEDF+&#x2F;59ZULrqh&#x2F;IZx2p&#x2F;9Sxq5y5uFuExJDF+&#x2F;59ZULrqKTsDvD1DC514DlwZJMRXB2WdgOSxYF7hrbvjiagOrbfE5lY+P5Xs1zRNkg+9hZPrRUxQzKiyH2czPHcbg8ufgR&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYAlwgRbHsJMkoKTqDnWFXcF67d2pZCXlQAXQ4df1x1hmU+NH&#x2F;Q4DQ&#x2F;ZObByw5p7GaclrDEetlryqviPEWv2mqq03BnJ42o5+PVx4XboDABEMM7KEp6WLS3NacZ95S3Ti5aC1C58X&#x2F;Mm2mTVEZfYfOX+gMMQ654w22lnWV46nnIpZ0mHbW6LD9XRXMCh&#x2F;GsWcbtFg+kjojL4YfBs87QbOX4xaK5NZqmdRv2yqie0IokZ3gV3GR90ckj8&#x2F;r2ePOlALf+5Q+fpw5gmnZgtZoonG9RN9rHNhWOluHxJSOu+YGsez+QiRR3ubXFhW8IWt0ZUejoV1b&#x2F;Pwq&#x2F;FzdJ72gLqBg6YU6W3g&#x2F;0h61Mm43VUmU2iks9mAOpdhPXU8&#x2F;ODSd3SE8VQlkbAQoVSobjE76CA8Slp96hws1rkCQ2oHYABLvAfLkZIkwL0XvU1k1wjBAVhWnmgLE8hIPMSBCX65pKV9zMofvKXaaBYu3Z+k+VUywA64P7p9VBCdFg2myB4wA8pYA1rUQgpvoBsiiEiGp5pNv3h8P&#x2F;M99rdIO59nxcP00zde4xfBfP0as&#x2F;SYHiMfj05+Pyp4FXNbWM9ef2fWqM8H7&#x2F;T3sen9AdOK1GTq2&#x2F;F2W1UdpCTyXFraOop65V5+KvSsPrMYrK5uabqhYD&#x2F;uh4LY0ZG4u+pgOg&#x2F;Nk8F&#x2F;VuR72+DlG84H3ljlnBUJrzjx7k&#x2F;1NGjcnEqwUMqhQ7BHnbFNVUp8&#x2F;ODSd3SE8Vb3UgDpjsZ4NhCaBo+od8LdYrs8Vbz2De1KsrGnhCrxkb+yP99HpkeFqFPnm1K8VHNj64NCDKMFaPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu01m5259s&#x2F;IfRXsPbGiQo46K7PmMNhzl1JVMJaUR8ttKU2jfar5GkzpHTY&#x2F;TxNpWU8uGv1jgt3kOorHofp7X6cOc3tXVpyjTVJO+Z4KZwZJhqlDjZcu3NKeLOafOehPL8CxzZJcgOFl77VMrs9mcl9xvFmuUupYNKVGSJMC9F71Ncge0mJxSu7ooCxPISDzEgRrlPzA79acWyyMcGNEhQE7PtGrG6YP&#x2F;cn+6fVQQnRYNpsgeMAPKWANa1EIKb6AbIohIhqeaTb94fD&#x2F;zPfa3SDufZ8XD9NM3XuMXwXz9GrP0mB4jH49Ofj8qeBVzW1jPXlU4QcFARXszwFQLycNY4aH7mxn06oAs0dV1RvB81QpAzjpdxpxvV+mtq63k&#x2F;Wr9&#x2F;SQ7qQCV8uICalOgJsEz0YMhkxhYlm6sJFvOB95Y5ZwVCa848e5P9TRo3JxKsFDKoUOwR52xTVVKfPzg0nd0hPFW91IA6Y7GeBQFlRN1uDuQqfa7UGh8AXOWj6kJLkQza5N&#x2F;FQ5EkVd80izxN3vRNeruhQhYOccKuBbSSu5gOPPi5&#x2F;5x8fvTgPSRRBytDE+lTSEWzEaIaTOrKeIEC&#x2F;cc8a6wj9jUWtlUt5K9QvO3QPb3RLwNDoO4ath7uZb0qKx7CvHlkArcPITtlgkzgubin6BQqrEiNJmAspupBUlKGO95YxkjZq5GNCUeuuPHuJhk2OdFuB9jWC4wyNbzgjV9AWR6NRnV8Nc6m4vQU61Et1gpBrXAp8nQhFdAJSNxM9yKSvmUNf+TF8NQm43H64u2adzg0m&#x2F;EYLk75EIh+JxIJBYKlhHtdBDztoNxbV9nTVXsI6srUffvR31FM82pAkFePh9IWd4FqaXRMNxrCbWY17iO4PNkvrkzbcq38G9FFDJK+z3&#x2F;dplWLXSigvvranvpG4MIHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHEQfNSbK1lY4XniUpgyubjGD4Ip202Ay&#x2F;NyC3OpjpYaLfgAg&#x2F;D&#x2F;zV2gk+dneOglD49+24Mq0A3f1zE&#x2F;r5fKoTiwJmYc9HT8PalBTx56Z7&#x2F;Ao6LMv9CrKysvnkIbpCuK1sD85j1wb3RzynWMylO9ZgIF0gjhsP8PEeKKUk+vvwPVrhqokxhE2ZZF2SzwNnLBW4jlBV4Vtgy+dB8v&#x2F;3KD1bCgSDVt7fZoJ45&#x2F;TMwmsob7anOvvv6H1tVOmL5WBPAXb2CpKRIgc+8HbYKBhw&#x2F;cKV8cZP5kar&#x2F;OCesCgstjOavj2OTxSCtcKfXGu2LA0lC+c9ZKvIfkL4W79mb4nA5dRj7FgDX9n62R&#x2F;QZANnA7qP&#x2F;8Fzazl&#x2F;&#x2F;iuLGHkY91ibTQnXke&#x2F;q6VFI+CteMVZ+j1MY&#x2F;mpuglo2KoHJFu6qVpEiSgPcALZQgtTYCoIBQrI5jIJWpzRQa1cjfwiSb&#x2F;zPTULPeytwDsXYj0OmNJevLgL0ob52j++FrrjPuxVtJK7mA48+Ln&#x2F;nHx+9OA9JFEHK0MT6VNIRbMRohpM6sp4gQL9xzxrrCP2NRa2VS3pYozpTd5K5Xy4o9dFsdI7fGE8BBGDfjYceWQCtw8hO2WCTOC5uKfoFCqsSI0mYCym6kFSUoY73ljGSNmrkY0JR6648e4mGTYzLTWlMscHl4+hbKNo0rKCQTnw+QHaqg7&#x2F;Gy+EfiYx57h2&#x2F;edHABnbiv4y&#x2F;CblgOBsERJXdIVyV18Jxbc5QhQ5WZeEW98a988PV3V&#x2F;Y7FBTAFjH5kx1keJOLjmLHKLLAULAkFrWZoZx4iOGhsOREynwpOwO8PUMLnRk2jR5oJxqURQ5eR+gcTDgTGf201pl59immNV6pSNtvRUxQzKiyH2dIj9OK4kI3eh&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYAlwgRbHsJMkoKTqDnWFXcF67d2pZCXlQCPjxH1XaCAo+NosoFAdpBtrExG3O5&#x2F;DTnC275AN16CdP7qC+kltt2RjhKfHtUdnk5ddhrdNE+TvUCViOg2VPGJEThW3chuGw2C1C58X&#x2F;Mm2mTVEZfYfOX+gMMQ654w22lnWV46nnIpZ5hV12TRrFxOr5hP1sM8Eu8v7BMCcYpDzWv80g8Zr+KRNL80sUp0FAzw9snXBBGMmHDUi6wMIRd+cKf2YK&#x2F;ju8ldFPM8wqaMrPsi8SqysVgPQO&#x2F;QTKFZwnTKs3we39yZizzxAXHAV1deHZVBdNpNq3TQsO8jkNlRlyFOaZJ8JSa&#x2F;UdQqtAeZL+nkFoEqJ9F6iGS7NoRjKSEhogR8dVLYmBNGSJMC9F71NVBDNpeVTErJ6E5rWbmU5OuhfYMBwvU+x7HNklyA4WXvHAlgVU0v4EnvqEth6ZsVzZg0OByFpjqjIyifYvQ9AHUvsvHTSXGH9qPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu0kKvj2abL9OBXsPbGiQo46K7PmMNhzl1JKn7guRcutW3BKUKWVc0bCLQ9T+xsjvCWLqSymT6ALSaZVS5TF027TSfNeclUDcD3x0uAxMxreIhY7EsU7JoaCTieS7TLV142xzZJcgOFl77VMrs9mcl9xvFmuUupYNKVGSJMC9F71Ncge0mJxSu7ooCxPISDzEgQp1zb+WtCgS6nwdZweE5a4hxGJh1OUMt98v&#x2F;3KD1bCgSDVt7fZoJ45&#x2F;TMwmsob7anOvvv6H1tVOmL5WBPAXb2CpKRIgc+8HbYKBhw&#x2F;cKV8cZP5kar&#x2F;OCesX6lO4acbc7Nz4CmM98p4t3fXyGp&#x2F;zVtdXK0Syt1QTQmXjxYRXI2FIXxq2IsmFPpDhLDpI0wWXaBgVnf&#x2F;xlpoM8wtTFscoBbge&#x2F;q6VFI+CteMVZ+j1MY&#x2F;mp+KNRMHlpL52QKoao2TQX7816mN69mnm2Lj&#x2F;I2n5zDmqqyccaTLKDdFg+kjojL4YfBs87QbOX4xaK5NZqmdRv2yqie0IokZ3gV3GR90ckj8&#x2F;r2ePOlALf+5Q+fpw5gmnZgtZoonG9RNRteJNDCUJxS2zMGloun8aZvWE1lqaeZUuEs3HFIc+808u4EnEENCUjImFCuEaSFZcWNH9jmHlR4scRXg3O5GCEWU8WvhmJwy8&#x2F;ODSd3SE8VQlkbAQoVSoYMELbwnvpZKbzgfeWOWcFQIHz97VOrJDny01Mb2OpreLRAwFP8eBMhEBFZ032W4whFHfV4tu2eh6HPvo1boYZijxtzUGW&#x2F;hD0SyTZKPEdmDun+BptJCfYl6orwvxvkdtwGygbdHtFbtJCr49mmy&#x2F;TgV7D2xokKOOiuz5jDYc5dS4R1Xi8tMnBhsmbdwX1iZjuI3QMTK&#x2F;r4DXTmqsFoiXrXbpy6cackCkJUrHRjSJ24LOKlHfhtjSUAFMRveIou1BKklixslnZktsc2SXIDhZe+1TK7PZnJfcbxZrlLqWDSlRkiTAvRe9TXIHtJicUru6KAsTyEg8xIEV2KvwNW&#x2F;VrQR7iZJiATHs1S4aqbCBWw&#x2F;IHswlIIAjTM&#x2F;Dk2Cop1CwTaPUaBWaWYv3nZ7x3JkDF20Oy+ZC8yvn9cc04P4MDHE+Pb7O702L83niUpgyubjGHkEpqF6Qy7tQR0fJohHp8876j&#x2F;3QBpr43poGd1V9jbJSKtspmmH6JR7wP72z78YJ&#x2F;wmbQRECbG4V4m6Mf0sw7EkQ3dPPZBaudCX2DsvKvaG2QKoao2TQX6Y6D3yg86ZLYLULnxf8ybaS7N6Cy6lb0q5UuaGS478aEgjhsP8PEeKnaSkJnQqoL4JN+SSDfRQT50tlkwLPUJHo8bc1Blv4Q9Esk2SjxHZg7p&#x2F;gabSQn2JeqK8L8b5HbcBsoG3R7RW7SQq+PZpsv04Few9saJCjjors+Yw2HOXUkX4ii7roL52Sjpn0CqfVTrD2n&#x2F;EDhQPIHYmoi4Aob5rw9jzDv0gjEfHyXN0IMTkI0FSeEHWIvIjjTVVQ+htzOj3s74NtXlqP7HNklyA4WXvtUyuz2ZyX3G8Wa5S6lg0pUZIkwL0XvU1LWCObx25k0w2cHXHX6&#x2F;cDx2va9Ke4qfmK&#x2F;EDN4xza6nWVTj4lFC99Z2PLlizElpb&#x2F;3c8xhep8cwNi4OE3AJHErYKzTDj0IRoNOk7P8m5J7QkaaVbfDi7F7KqJ7QiiRneES+AxTiuE0k8aYJGm2cfmDsVZTllpXk36BNdsM4rrkyCDj7YSBo2HYcHVBya73tidnWL28n2fPNYeLBcqVYD9rPc2K5+BmfWKQFdLXBGu+1YEj+LOTmiFEmauDlDADzgHsJJrwEXrNKmu7hbG&#x2F;uevlXgLyPWPA&#x2F;KgeRXgLH2BuUrRZSXfc9JEZyc&#x2F;Tj4CY0KWH&#x2F;twRhElX34vFhRfqRjzawyCoqfnrXQczGgvBL6yrEx+Wxyxnn3z1HcY3&#x2F;ysnzt6R+C4rjv3gSLjmLHKLLAULAkFrWZoZx4FnjwwhUK+bwZaR7S41xCJzn9TNhGxGIiLQJBuz30tNBA2Mpztr4rO4Sd8CEd7hRKmLo3EpKpYOUsFEue7q&#x2F;oK35&#x2F;mPkMqOdTO+Vkmji4NMy6uywc8e2MB2v80g8Zr+KRNL80sUp0FAzw9snXBBGMmHDUi6wMIRd+cKf2YK&#x2F;ju8l6ZCH1ZWldPvsi8SqysVgP01jivC4XLWKsM8c3poEWIXvRD9HeU6hSt5UlNnFKQvnhj4udiYwdAVk9hEfT+IfAIQIcagc7B&#x2F;bTxmQqxadyWqZgVreb3inu6im1cbkW38jeNQqzc8Wt++5U7yMHRD6ldYrs8Vbz2Df0hvaei9LjUl3FW&#x2F;9cI1ZmAqbV8jOL99G1b4QMXp0EjaPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu0kKvj2abL9OBXsPbGiQo46K7PmMNhzl1KM&#x2F;RyaElzsE9HK7d8aSLAe+8V18KN8J7XBnS0btKXKV&#x2F;sASI1kqJf45phYHR31HL5wtySSr5EwNtQ+xymDi9YbkuZPq5oLgbWxzZJcgOFl77VMrs9mcl9xn7hPXHEyL7YMjfDnC3CWiG84H3ljlnBUCB8&#x2F;e1TqyQ5EetNc9EpzGC0QMBT&#x2F;HgTIIMm4T9UEgz9nebQgqwL4wBqhkaVnRaRBSaBgJRWBdvxr&#x2F;NIPGa&#x2F;ikTS&#x2F;NLFKdBQM8PbJ1wQRjJhw1IusDCEXfnCn9mCv47vJXRTzPMKmjKz7IvEqsrFYD+mY3V9x1HVVIxoPIst2PQTBBPTg1qAIjSvIGd5fh&#x2F;yfr9kPwEf0FBtWN3i7DGktSBAl4OaNw&#x2F;E0ti9yHsewj65h4pxSTDM1DQefHNaBJMYsRkiTAvRe9TVQQzaXlUxKySOVP6erpzBvoX2DAcL1PsexzZJcgOFl76xDH6nOfag776hLYembFc1UfGp9S2aLfVl6QI1AQTykx7faPpPRnQ9CFytZSfQO83Y+Zzm4TMbzC6VnmCvTCbYWoDhFzRHdjEWD6SOiMvhh8GzztBs5fjFork1mqZ1G&#x2F;bKqJ7QiiRneBXcZH3RySPz+vZ486UAt&#x2F;7lD5+nDmCadmC1miicb1E19KFfIhrNkAnHqZnOm7tsL85eY673RxqkdLKGYIhRDNNcbNKcqubfs4g2tsu3ibH5&#x2F;euJPcMK+zEOqexGhrfFQSmbV8JjO7ir0ZaZNPeIeclCWRsBChVKhuMTvoIDxKWn0Z4iDVn7YUqgdgAEu8B8uRkiTAvRe9TUgV8ae8iU7T6AsTyEg8xIEzo9Nap6hurgVyo5XmuHWzEVJslMB3pXC&#x2F;&#x2F;+foJVK05ebIHjADylgDWtRCCm+gGyKISIanmk2&#x2F;eHw&#x2F;8z32t0g7n2fFw&#x2F;TTN17jF8F8&#x2F;Rqz9JgeIx+PTn4&#x2F;KngVc1tYz1519T7vvXQcBUUo67xNoz1FU8UUzTLK25MbvBWArN5dzNVTssJsZ+RIrV8awjFk5Hb6q&#x2F;PNNasHvD9C&#x2F;0EX+OYlDowKuY2exJcbzgfeWOWcFQmvOPHuT&#x2F;U0SKS5Viy3jU&#x2F;Wx9LhnlJHnfz84NJ3dITxVvdSAOmOxngndUcNvYwF1qn2u1BofAFzjYlKuMtAI+pTfxUORJFXfNr9NQFtcEAx9H9EKsPdtJBDn5lvr8IDb7ttSGiFz4MSu916b9WmZfXelDCjtgkTiPLcTvV5M0hrvD&#x2F;zPfa3SDu2CnEyCliKTSpDaBZr2pcLRlFZrl7+q5rVwtScE+si6ibyXjz3z0JmjLhTzUsWH53rTkXAA7clOeaqqSOuDgcokPE+JXukziZNGzmSb82EZOzvCWCeYrSZvqC&#x2F;gTRabPf36a&#x2F;3r1ogRIlla7QSSXzAK2744moDq23uk7DcVzptim1o+F8c1sjnX6RMv5SBAnoLNmvrPfJ19Fyfqh1WLy+8NXv&#x2F;XbfhIiuxjgRjctsIxz&#x2F;v6QUAH5LL0nzIekMvZmuSVsa+TaFjBOreB4epLC4TZ2A+441h6VejhYaTKOVV7P1lEhn0&#x2F;FrSft6Li655U77PxLeOzOhh2FqARdign5UwjAKe6ss8o14rbvjiagOrbfE5lY+P5Xs1zRNkg+9hZPrRUxQzKiyH2eydQteXlV+1x&#x2F;Ff7ze0pMAwytuOFO5NaBBW7Snxor79YRbMRohpM6sVg2NTzj9xYAlwgRbHsJMkoKTqDnWFXcF67d2pZCXlQBADEgK+aJtDQYlixD94G5WJoFqePqF9pfDusxVPWIujUPF7X4Hr&#x2F;5BF1hns1MVWKCddxwLVxlzXH0PeOakAttYHSbFKwLKY92C1C58X&#x2F;Mm2mTVEZfYfOX+gMMQ654w22lnWV46nnIpZ6culoyhZkKZ1z5VW05uhOVOtXJ&#x2F;rcsQ5SB7MJSCAI0zPw5NgqKdQsE2j1GgVmlmL952e8dyZAxdtDsvmQvMr5&#x2F;XHNOD+DAxxPj2+zu9Ni&#x2F;N54lKYMrm4xi9hfgQLuIsyl0SBIV9lH0yptIPrPolExcpEmczaFfYJcZV1Y8NIM+DPwbszdiZA3p89zZRVkn4cbp8lFwdeVrRH8tZdZAKJQWNnjijWlntAtkCqGqNk0F+mOg98oPOmS1prtkKkZaXlMte59tIBI4Le&#x2F;q6VFI+Ctf8S5igCTXc&#x2F;il&#x2F;qGuUqtilAecXoSWnUm1ofJU6h9bOMv7p9VBCdFg2myB4wA8pYA1rUQgpvoBsiiEiGp5pNv3h8P&#x2F;M99rdIO59nxcP00zde4xfBfP0as&#x2F;SYHiMfj05+Pyp4FXNbWM9eXjZfz3VaED+bDEuaPRBX12hDA1Q+r8Qff+Fshl20SQmNUGHa7Yrto3lK0SgmOuFNIARePWB+I&#x2F;tSOffMeh2+dGgBcI0N4rP6284H3ljlnBUJrzjx7k&#x2F;1NEikuVYst41P1sfS4Z5SR538&#x2F;ODSd3SE8Vb3UgDpjsZ4AyB5ZYlFDnDdYrs8Vbz2DcMn8e4KjttjRm1J9NrrYBDAqbV8jOL99G1b4QMXp0EjaPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu0kKvj2abL9OBXsPbGiQo46K7PmMNhzl1KKKU0pIzF9RUZEo+9KaC8AR70WkwW2umCGnNPliI4tObkTpscN8Oz4rnUpzfUJv7nt5DUa3rlzALDyJxzJRLpf2R3CVl43uUCxzZJcgOFl77VMrs9mcl9x3ZfJqMEnCKrwcae0MSpMWW84H3ljlnBUCB8&#x2F;e1TqyQ4BlJpk+Xoxjy0QMBT&#x2F;HgTIIbqJW3lbmyVRMGGNdPrNmLPsfWV+F0exzklE7FTledNyE4O6zAyj3spXs6TPZU3qQblCTM6bX3Y3R0aELRu5b9IG6pHc2TdQErArRI5DzkC8F0MegJ6vYtKzFc8MRZHVZH8hTEatrHbP7R7X4S+7h7R5NJCJ2FplN0tlzM3biXR0AyUnY&#x2F;cuCVNPBSjs8zLZ6cRvgy588ATvaGlQgap2u7xWgEkhgXqtkzal8FyU6vzNiE7c6ZabuBaBT3ADOkIMAC2UILU2AqBjifhpIobQMbZB98nLnX9QND0Ckd+hEzKC1C58X&#x2F;Mm2kuzegsupW9K4SFoKJcBoxJII4bD&#x2F;DxHilpUOeegn7Kjj9p5OmdjorP9NCjbS0MzkXLDktlTKVZ+fL&#x2F;9yg9WwoEg1be32aCeOf0zMJrKG+2pzr77+h9bVTpi+VgTwF29gqSkSIHPvB22CgYcP3ClfHGT+ZGq&#x2F;zgnrPgmNT1RuxdaeWij&#x2F;HRd6ndXPUu5sl5A9aDLql9ti8oM9dzx5wdkjA27dJ2ff5wmWGImnHoEHiyGtC+2&#x2F;7XOwGvA8T+ptRjpIHv6ulRSPgrXjFWfo9TGP5rWwK5&#x2F;fmL8+buqlaRIkoD3AC2UILU2AqA+sALFtXrTH0IiXfTxoM0NZ1leOp5yKWe1&#x2F;ejsmDBFOzhTMyefI9AqYJYkfBkD3NggezCUggCNMz8OTYKinULBNo9RoFZpZi&#x2F;ednvHcmQMXbQ7L5kLzK+f1xzTg&#x2F;gwMcT49vs7vTYvzeeJSmDK5uMYJ0O&#x2F;6&#x2F;heWbGhe2KSRbMbxGEidPsoevwQy&#x2F;759TBoowceodK0NKjRD1U02wGZdwAtZdpDmO2ieFuFeaynmz4&#x2F;9+Gh75fTSMGcFjsEuAuSmEbZAqhqjZNBfpjoPfKDzpkt1fWXEbWgDTLLXufbSASOC3v6ulRSPgrXTUn7Cpfv5Zopf6hrlKrYpcT14GHinh&#x2F;iMH3F6J0fmMhq&#x2F;K3RmkekY1f&#x2F;jyu7MWvpyy0lIIf2paCjxtzUGW&#x2F;hD0SyTZKPEdmDun+BptJCfYl6orwvxvkdtwGygbdHtFbtJCr49mmy&#x2F;TgV7D2xokKOOiuz5jDYc5dSwIeZdh0vt0o43RDAfnqv+DfHaTS+nt1nQEjqbwNZ84aJHe0RkriUNzKFM32mMkPf6cUaIsZFRVm5RfYii4GKbw37Gmw0QHufsc2SXIDhZe+1TK7PZnJfcd2XyajBJwiq8HGntDEqTFlvOB95Y5ZwVAgfP3tU6skOf8xVG52h5haftbc4BanagpyWI&#x2F;7AvyHcc4FhFeF4INL0hHCEPauFs0NL2koQiMlYW8Wp5+84pQhIoS3c&#x2F;hx&#x2F;W7VACI3dMv4QEqKLff8Gzy9b8avZKRC8H3qivC&#x2F;G+R237rQ3ghZTmVLCnoofKf4bCvxIBa8glGjA8QR3uGsKB&#x2F;luV0UQUpuzsIt8i+g5P54fTFZSSFdGi+zCZ8abfELVJ5+T7ycxNtjgqM9wr+I8w+yDOAWa0QVhDdmVbp1QzNXI8nWpSFBgg8tVuXPiiW9wlm2YkVgvoE&#x2F;wqVrTbWuubWn9aKlPMgEmm60T1yI&#x2F;i5k&#x2F;I1G4zqTJnkEYqdxk8M&#x2F;otPvl+CwMkAXqhqowUQ&#x2F;iyiCV0Ki6e7W7AC3I6PRzfHb5PxLeOzOhh2G3wVEsvUn1i6GC0uYn4FaeVI5&#x2F;T9WQqnnaS8eRn3lQengLm12CnILu6zPtVjfT+eJdEthkx6gGLpsgeMAPKWANa1EIKb6AbIohIhqeaTb94fD&#x2F;zPfa3SDufZ8XD9NM3XtSGcH5S1UGF1o6BT+MZs87qeBVzW1jPXldRl0SqytOHHGSa0DB2xa1CLli6Jt9JnLu9V8zORf5HFB&#x2F;92upRuMKPOQfaCBvfe94Lp7xMGs0ty+wxXRCSPPx&#x2F;y504uwWhZVvOB95Y5ZwVIjKTRLNmEupc9blp0C3DPtUfGp9S2aLfSAFmTM8YZa1RM3vfbhzmHcWoDhFzRHdjEWD6SOiMvhh8GzztBs5fjFork1mqZ1G&#x2F;bKqJ7QiiRneBXcZH3RySPz+vZ486UAt&#x2F;7lD5+nDmCadmC1miicb1E3k82o3HGZ6p0fVRW6XY&#x2F;UYrEx2mcu0S+tPMjFFaPWz7DVPNc3x4d6GIaOf6BCyLBmdlkptKJt4XVk1jS4oegoRdAwrEUVbdXKftiwCARvO+FCWRsBChVKhuMTvoIDxKWn3qHCzWuQJDagdgAEu8B8uRkiTAvRe9TWw434eselp3zZwdcdfr9wPJeXz9Idnuhkr8QM3jHNrqdZVOPiUUL31w1q5H7nJf2vKcpgRXlJh1kosLYJ&#x2F;PTxR8F&#x2F;2is+VoJ0d2NacXTn88dhcjyzXKgubcNSLrAwhF37SLpoBkRt&#x2F;JdNH4aDsfjyDusS1HTqTS71BaKSqzkifHLDRZe6SrPisO4vubb7w650jTtNrbxkJGNRYeHWDmgtxMGIVqaEzurz49blqOllsVwHcwPKLgW+uadlIvUeS1CBgifHOAFPZX+N85Hv5tCi6AMdjbiF&#x2F;Dy073JNz9vorqnafrOzfvCEKqqUoCO44gARYf+3BGESVffi8WFF+pGPNHHc&#x2F;+qIHg&#x2F;Ncndk4EmhY+TH5bHLGeffP+jckJjxeI+&#x2F;6+XwRSflDbwPm00Em9xvD+jckJjxeI+&#x2F;6+XwRSflDb9hlg7pIZX+sEmznvq3e95M8HZu0oQae3WmmnoX9wzoEmLo3EpKpYOUsFEue7q&#x2F;oK35&#x2F;mPkMqOdTO+Vkmji4NMzfGlUR4xlKEWv80g8Zr+KRNL80sUp0FAzw9snXBBGMmHDUi6wMIRd+cKf2YK&#x2F;ju8l6ZCH1ZWldPvsi8SqysVgPIv7vszSwiYTKtyfyMJXyzXozz0DgM3Y+xQvDEmGNQ3jsqQXk+ckn2ZD5CXcniFKegBR6luO39MCUtfgnppcqcjw4kBR8yCdR8B7tQWakQXPeNQqzc8Wt++5U7yMHRD6ldYrs8Vbz2De3wVEsvUn1i5yymPVGwK1qPPfracsm1qM2XPYGRZrzR6PG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu01m5259s&#x2F;IfRXsPbGiQo46K7PmMNhzl1K3+1cBqIHb7F7yQJ1kQACStZMNz09NjbHr9p6GOMKk3kjVG7Z+CCwlL6qrl&#x2F;vIw0q77MbseOP0wm3WFZ24&#x2F;GT&#x2F;RDMfKTxYxHWxzZJcgOFl77VMrs9mcl9xvFmuUupYNKVGSJMC9F71Ncge0mJxSu7ooCxPISDzEgRrlPzA79acW&#x2F;dL5bBKB0w3CzMNGN8nzl9xTkVvkZYHJJsgeMAPKWAN5fE77j45QhdQlkbAQoVSobjE76CA8Slp9GeIg1Z+2FKoHYABLvAfLkZIkwL0XvU1IFfGnvIlO0+gLE8hIPMSBCX65pKV9zMolaF6it1F63nA+7Ui+RS85LebTGMFvVhyuGy29AR2JUcGbyPw&#x2F;lC8Kt3jsaZqo0Fpsc2SXIDhZe+1TK7PZnJfcd2XyajBJwiq8HGntDEqTFlvOB95Y5ZwVAgfP3tU6skOf8xVG52h5haftbc4BanagtNhj9Kyr&#x2F;ehc4FhFeF4INJOQmKpw&#x2F;+YePGg1MX61adY&#x2F;0pxKrD9wj0mUPvnGVO9P7VACI3dMv4QEqKLff8Gzy9b8avZKRC8H3qivC&#x2F;G+R237rQ3ghZTmVLCnoofKf4bChincxXeMZgZE7GmAIT+l&#x2F;jZfDBHkI90zot8i+g5P54fT4geg3e++ypYz1GtN0lKHMJWOaq0waxOX9EhyqGQLUuYBRxWRLUCyt8MZv4Ixbl8lBMTicVZTzEa1wKfJ0IRXZBNNxHQIRtapwaay02Spc9uNx+uLtmnc4NJvxGC5O+Rrdv6rqtyYV4gYQKHHKMCRo4WGkyjlVez2k577kWcuE&#x2F;iHzLIPTkbQiOP3bCBhcCoKTsDvD1DC52zy1CtnDatqaG&#x2F;ibc85Ti0l+t5wFs3H3ASfJE6Ec+dURHQh7nFlHeF93w2YuLXXq7yBlKlz2qbk0sqTnbuWPrhN0dGhC0buW&#x2F;SBuqR3Nk3UBKwK0SOQ85AvBdDHoCer2LSsxXPDEWR1eTzIHRNkv&#x2F;Uz+0e1+Evu4e0eTSQidhaZVZEmUjxTEZd4GdRCvISAVGrYS57K+r8zGByl0JB&#x2F;UzUCh4P7nxcqAUsr+gQDEKO57MquqEdPaqycLdnR&#x2F;cTn04tGo+hLwekmWLj&#x2F;I2n5zDmGglT0scnEBNevAN3xbL647LpmAJ2qjV+77wahZQYCP0W&#x2F;yr6EQHOzJwVpknNd0DAH8V&#x2F;vN7SkwDDK244U7k1oEFbtKfGivv1hFsxGiGkzqxWDY1POP3FgGDwE4waARoaTGc6UK8vi&#x2F;Hrt3alkJeVAI0hthAIBeWWV&#x2F;i44pP+Bp7je9yxhHUmZjxrip&#x2F;SA6+r+gqnM33&#x2F;CbvhvH3t&#x2F;IaWgs3V73sddcoZLtqA51ugKwOWsdObVY00MoLULnxf8ybaGjJaI9fFOrkgxhM+oVG5UTLP5FrBj0uDD0ZidgnBEDXZAqhqjZNBfuxVVkqI&#x2F;SztYuP8jafnMObW1c5TKt0JtjuPiYf4oNsjDNIU0bEqUqQ4k1WRRQtVg9wutY3iMSXQfL&#x2F;9yg9WwoEg1be32aCeOf0zMJrKG+2pzr77+h9bVTpi+VgTwF29gqSkSIHPvB22CgYcP3ClfHGT+ZGq&#x2F;zgnrCLv3HGfvqKazD7DdU7PfDBoRIl3AO+XZ3SauPcIsN2cnoZLanj4&#x2F;6oG00wrn3OXCAIdjatL4RuYpgIV61TX5D2rw2UyogxAGXv6ulRSPgrXjFWfo9TGP5rWwK5&#x2F;fmL8+buqlaRIkoD3AC2UILU2AqA+sALFtXrTH80UGtXI38Ikm&#x2F;8z01Cz3srChOEs1uSm8SXry4C9KG+dKUk+vvwPVrjDyi0917SJMP43JxBo+3Bhz5FxCW+ZK67FCI9JAbwrVsDixlG+vR3197bPAX8wkZct&#x2F;7dKH3lh1FRWSas0aeZfiJ&#x2F;DeIfQk9w8aYJGm2cfmHZyKxR4uXjjhSBENOCQ1VxuFCfTH1rQLnoydtAJJwl3x7Zq9+0yfwWfAznTbz9Ow9qe2xtzFiFKtyoC1UYFSR3CUL2rJAs30ZAu2cPjsnR3vXnsFKWQsTDk1z4BtuAO5QWPJ2t2atXRcrDMlovA6e98IVAJjH5U0TCmc39GjY8aL5ksj3g4tF92kU7ROb+qyCjEh7yQNCaoqOpnNt4aauY&#x2F;pBVggQI4xTuL7m2+8OudYJJqrUnqikjaiAPmk4l1yStFlJd9z0kRkaaywG84Ysw2QCPy7ACaDPXBpDcilK9bhDBz03BZC54d0hU7&#x2F;q0SdwsTHbLMio41taPhfHNbI51+kTL+UgQJ6CzZr6z3ydfRcn6odVi8vvB+oSwdjhRqvStFlJd9z0kRnJz9OPgJjQpYf+3BGESVffi8WFF+pGPNDXQuoA0t64IKHX437CxZZTH5bHLGeffPsApKK15edaxIBi21G0XJ+z8S3jszoYdhzv70Yo158qzrM+l0dtJ&#x2F;6psgeMAPKWANa1EIKb6AbIohIhqeaTb94fD&#x2F;zPfa3SDufZ8XD9NM3XtSGcH5S1UGF1o6BT+MZs87qeBVzW1jPXkfmmjO8roOgoGy3rhoPoTNwGM4Zr1oUapEkPgeVczSi95UpGuDXDRoGn+Mq0Bxue21KFh7ELjRYGB7f96yEsTbE9TMYvIq7tJvOB95Y5ZwVIjKTRLNmEupFMjzNo3y256b&#x2F;zPTULPeysKE4SzW5KbxJevLgL0ob51L+X1ZmcigQQ9t8PmP2WD8&#x2F;jcnEGj7cGHPkXEJb5krrsUIj0kBvCtWwOLGUb69HfX3ts8BfzCRly3&#x2F;t0ofeWHUVFZJqzRp5l+In8N4h9CT3DxpgkabZx+Yu2q+t0fDNseFIEQ04JDVXOd3il0bkmkLshzoisINFR8f69c8CuK9658DOdNvP07D2p7bG3MWIUq3KgLVRgVJHcJQvaskCzfRkC7Zw+OydHe9eewUpZCxMOTXPgG24A7lBY8na3Zq1dFysMyWi8Dp73whUAmMflTRMKZzf0aNjxqobtLIQJrfX9Bsii9g79Wux1BOfBnov3nxdPMbAVjX7I7EgPCJ9aJSdnWL28n2fPOtu+OJqA6tt9oSNe1EV9CozFMgVjdu7PFYEj+LOTmiFHlB0l0DCWGs135SBNgZbT5ZzNFgc5MxEi03Wi7PkDtpAROCmvqkQfhCbQvZS2DyUrVSq6iZCL2ShO3RgA+WNRr9aKlPMgEmm3CL6aRQpikcbFvSMzSJI&#x2F;UYqdxk8M&#x2F;otNDqfVgPjjWPClPYxUkeZhm7Zn&#x2F;pk1NdUiYM6ARcVku4sCQWtZmhnHjDOi8zoZVGIlsX8L136z2ZXJURV1AgAnzqGbA&#x2F;3qK7mzM4SMxgJHahRvUsbX4ki9I8oiVk89pr&#x2F;ZV5ce&#x2F;YhOEIYFp8OpMx0JZJnWtChHE2NaPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu01m5259s&#x2F;IfRXsPbGiQo46K7PmMNhzl1KiEBmx+q5B&#x2F;Tnm7&#x2F;mN+c7tT0tuN8YKI2wfUJbPP11cNprv30KrAS4TK7uQT5iZ9PCt5hDby6LTjphLICPZVIYY6LJnP8kfCDB1iuzxVvPYN1GDBeMNjedroCxPISDzEgQl+uaSlfczKC+QtTpIZTXiqmn0RDeJioMfAVc5cv0dOGY3NEt8J2Deo8bc1Blv4Q9Esk2SjxHZg7p&#x2F;gabSQn2JeqK8L8b5HbcBsoG3R7RW7SQq+PZpsv04Few9saJCjjors+Yw2HOXUk4IeFPxoEk2mHL&#x2F;AIqK9Vaobs8QJb9euXnBBQCkoEaz74oCTUd7RKW3wwpbdp6Dn2n61Tc+rx3clzeSwy6tnmV0lXFsGmt3fLHNklyA4WXvtUyuz2ZyX3GEwYymp2R+a8y3V7bA6wB+bzgfeWOWcFQIHz97VOrJDget0YnHUK1an7W3OAWp2oKHKMQJbNR1wXOBYRXheCDSBouNFJnhycHrlYspVIeuA1e+GTEcObnF73Xpv1aZl9d6UMKO2CROI0Rs27O8cGfwT2495gyrBXxevkBf5IGnuqaodWRw71swd58i1QBBbvghvMCAZOfn377BI20bPOrjI+RV2WYFpGwg0WxBg4biMYhNtNIp4b36Ni&#x2F;jrXVIgk1MjR2G+nQpsePm&#x2F;FAm5aq72DZEyY1NXN+aCmRYHG27cczPC3Pj35V2D8vlf41bYHNAj8aOpENtUmxpvuKFnFLyiFVbixcH04656Y4gOszbnm&#x2F;DWp67+RAFgDdYY9nxDHMuhNSMSm+wB7EfRedkrNazNa+MMyWNwSvxKU+zxGvYSFgkzgubin6BQqrEiNJmAspupBUlKGO95YxkjZq5GNCUeuuPHuJhk2NTI2P6UitsfKQFDh4yVo+N71emN&#x2F;slzCfr0FwxYo8o149a+AiaUP3702Lx+yLdbbfI5mvU4olVv5pMBjvhhLUODhA&#x2F;HfEuTErFARN&#x2F;XvgHWpZnET9tXB96bw0wzf+KidjMVc7cQCBTY4fyGcdqf&#x2F;UsqfNyUopGxGKLjmLHKLLAUFBaD7bsSNN10suE62LbN2iL64KsK6deS6inLC2Qq&#x2F;FteCS5TRyDKuN4a+YsrWQoYff92mVYtdKKC++tqe+kbgwgezCUggCNMz8OTYKinULBNo9RoFZpZi&#x2F;ednvHcmQMXbQ7L5kLzK+f1xzTg&#x2F;gwMcRB81JsrWVjheeJSmDK5uMYUIhyqiwiEJiYARRVJUiv0EoSBuqzmLtdBtMGo7CTZZLg&#x2F;nul0ujHCDiIgcjRF0ix3U6yZ84jinJYn2DXgma8HxcapXzxRKOAWuc1a&#x2F;FASPnzmPXBvdHPKdYzKU71mAgXSCOGw&#x2F;w8R4r&#x2F;giQba0cyoixkcdM6ZGnbI11fpgrDt6B4z7upKus1OCB7MJSCAI0zPw5NgqKdQsE2j1GgVmlmL952e8dyZAxdtDsvmQvMr5&#x2F;XHNOD+DAxxPj2+zu9Ni&#x2F;N54lKYMrm4xhLGCIXi0Qa&#x2F;2wWQRk3hw4UqmQr+S6fgTj5rXktNK2k1P5kQdLGYVUwlyOAIyPAZGt4AP7aDQ6KuCUTrNC6igavkyPH1Lgxaub1H7M7mrfHcdkCqGqNk0F+mOg98oPOmS0d0hU7&#x2F;q0Sd8te59tIBI4Le&#x2F;q6VFI+CtcJMtQEyYywpSl&#x2F;qGuUqtilsumYAnaqNX7yi7QTVsmgzV6rN9dKjbcinBWmSc13QMAfxX+83tKTAMMrbjhTuTWgQVu0p8aK+&#x2F;WEWzEaIaTOrFYNjU84&#x2F;cWAYPATjBoBGhpMZzpQry+L8eu3dqWQl5UAvUwRglef64PO4wsFMm8wWJlvSPwdyewPTVi5j2RuLMUzZR4xS0UhjJXaaTCOsrUkOWzw+CLgB9YHWzyTAzzn5C6k2b+KucklgtQufF&#x2F;zJtoaMloj18U6uSDGEz6hUblRiT4Nd&#x2F;&#x2F;tkW0PRmJ2CcEQNdkCqGqNk0F+4+xG4ZHHSsBmpjMwUWZM2PCms&#x2F;jZdzs1ZV3T&#x2F;Zr+UOOVMxnKXoIuYSu0yEW3Vd1b0V3&#x2F;8&#x2F;j8FCQswTm&#x2F;7uzbpg0xeKYhDFBivfpkawUOoXTNBv5s9XuQQctpqp+xmT8gzWa2&#x2F;be89Wy8AAkEUDMV9tQl7jmSYt&#x2F;A0i6aAZEbfyVRwXJVZuLy&#x2F;n8lhQ2xIrv6VHXs2SB8KQ9W2YeNPihTG6ErKTpuprlp7QlAzk48LpJllJU5cTF70S8LReyCY0mHsCy6v+fSx9DnoxszHRbJDY3&#x2F;jJXs0x5EZrEzYuIKL5SqFp5X2Seo9AyOcecRlzTMw87WuihLglRnPB3tXNVM2NrwaAC5LTBVpPVikJDIZKOe+P08B9iFU68skejW36DIvGL4D6jG8aE7i+5tvvDrnSNO02tvGQkY1Fh4dYOaC3EwYhWpoTO6vPj1uWo6WWxXq9QdIce&#x2F;TuzQw+eNdgIgJHX6zZMu2Fy8FQMnpOxBygXf1GUt&#x2F;pzzLJMdt37YFHL3KtYsddyM32q8WdxQNI4PCrClYw8G3BhItVKrqJkIvZKE7dGAD5Y1Gv1oqU8yASabuBbjxFMI4c5y5WOEtcWjf9GHarIunxwX1OgpuPZJNWlV1JnAd2PRb5XQqLp7tbsAWQ0dyZ+Dhhg&#x2F;Et47M6GHYVEFLtcgwwNWRiVpKw8zTLR4JLlNHIMq43hr5iytZChh9&#x2F;3aZVi10ooL762p76RuDCB7MJSCAI0zPw5NgqKdQsE2j1GgVmlmL952e8dyZAxdtDsvmQvMr5&#x2F;XHNOD+DAxxEHzUmytZWOF54lKYMrm4xi&#x2F;8LqpmHO0QE0ZnuIqfjgGqAHxYPMaERJHs3dNuHiLovC&#x2F;us3iHu1oQ9plWJyhzNksaoCVISuAQEJtdYi1ccUFXALWG4rQZWgPrpqiYQrGbvOY9cG90c8p1jMpTvWYCBdII4bD&#x2F;DxHihT&#x2F;k3TX3g9TJuN5iSOVGlWmmXu2K4MyejDtJWtUUAq0fL&#x2F;9yg9WwoEg1be32aCeOf0zMJrKG+2pzr77+h9bVTpi+VgTwF29gltXbycHcaGZCgYcP3ClfHGT+ZGq&#x2F;zgnrNN95nd+SftKcBNOmO+N35o7b4de+3hg3nMH0UWT+lNrcsWG5jurbJZl+PUHpY0bumx2uoDBgr+WgLQ3AWlhsfxojidgdxan5Xv6ulRSPgrXjFWfo9TGP5qAuliy6A96WLuqlaRIkoD3AC2UILU2AqAFoquVKKNNIs0UGtXI38Ikm&#x2F;8z01Cz3sqzaeEVk2VkeiXry4C9KG+dvE2azct4&#x2F;Ih+kTL+UgQJ6JftfW0M43usPfYu2gIFXaHFCI9JAbwrVsDixlG+vR3197bPAX8wkZct&#x2F;7dKH3lh1FRWSas0aeZfiJ&#x2F;DeIfQk9w8aYJGm2cfmHZyKxR4uXjjhSBENOCQ1Vwe0h7+yRVstVVskno4XNH9XWGLx8raqVefAznTbz9Ow9qe2xtzFiFKtyoC1UYFSR3CUL2rJAs30ZAu2cPjsnR3vXnsFKWQsTDk1z4BtuAO5QWPJ2t2atXRcrDMlovA6e98IVAJjH5U0TCmc39GjY8a1aGJJoDuFI0N8X8Koxn&#x2F;aQEqSDfBRezvPnVJvUIrQl6xCej05X+IkTuL7m2+8OudYJJqrUnqikjaiAPmk4l1yStFlJd9z0kRkaaywG84Ysw7JEhtljgrZYdsta0xrn+v1Jxk6p+cAO7+xhhLAkRV5fwO4mmsdQ897oIUbnkVmIi1LQLHLw2hIaV&#x2F;KPWzGyVR6+hd4CTHEw5n1MFji6XEiL1pS1pLbgFisDTLQWZHytejxEeYWUS7NwqClox2zONI5rnf23P1bP36+XwRSflDbwPm00Em9xvDOb6s3q+8YUTaEZzrXOTTQDM4SMxgJHahRvUsbX4ki9I8oiVk89pr&#x2F;ZV5ce&#x2F;YhOEI244xYBHTsNtjNc2g9YYpYqPG3NQZb+EPRLJNko8R2YO6f4Gm0kJ9iXqivC&#x2F;G+R23AbKBt0e0Vu01m5259s&#x2F;IfRXsPbGiQo46K7PmMNhzl1JfeNR7UBu3KAWXpx66U7zwkpEnQrMVMmr&#x2F;sGhUFYgAtx&#x2F;JrhfT6pesftfNxMdyNEFOtjWdNQXzz7MZfmfovE3c0HHQtAbm0gJ1iuzxVvPYN1GDBeMNjedroCxPISDzEgTOj01qnqG6uKEM7mSZonyNEu1AeZDGts4mDOgEXFZLuJsgeMAPKWANa1EIKb6AbIohIhqeaTb94fD&#x2F;zPfa3SDufZ8XD9NM3XuMXwXz9GrP0mB4jH49Ofj8qeBVzW1jPXku6jKp5iW4B&#x2F;ju9nf4O+xIoHjK+zyzjo4jSITsY8hCXLVPBTxD2EuXO1x1sN+QMM06kWUyV5dzyJb4ftyJV2t1CZiV5caI2LtvOB95Y5ZwVCa848e5P9TRLAilZrwpSdTL5K1Lu4yhfPPzg0nd0hPFW91IA6Y7GeATHjmhoo38Xqfa7UGh8AXOhjDkV6Wn0h7cpLwflbicF0ccGpEztc9qdzhfc0G&#x2F;olS2sMR2teSVnw&#x3D;&#x3D;&quot; 搜索打断点。调试的js函数: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788function s(t, e, i, n, a, s) &#123;var o, c, r, l, u, d, h, p, f, v, m, g, b, y, _ = new Array(16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756),C = new Array( - 2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344),w = new Array(520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584),x = new Array(8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928),k = new Array(256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080),T = new Array(536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312),A = new Array(2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154),L = new Array(268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696),z = function(t) &#123; for (var e, i, n, a = new Array(0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960, 536936964), s = new Array(0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696, 68157697), o = new Array(0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272), c = new Array(0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416, 134356992, 136454144), r = new Array(0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256), l = new Array(0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488), u = new Array(0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746), d = new Array(0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520, 537004032, 537069568), h = new Array(0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578), p = new Array(0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488), f = new Array(0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800), v = new Array(0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232, 69206528, 85983744), m = new Array(0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400, 134742032, 134746128), g = new Array(0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261), b = t.length &gt; 8 ? 3 : 1, y = new Array(32 * b), _ = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0), C = 0, w = 0, x = 0; x &lt; b; x++) &#123; var k = t.charCodeAt(C++) &lt;&lt; 24 | t.charCodeAt(C++) &lt;&lt; 16 | t.charCodeAt(C++) &lt;&lt; 8 | t.charCodeAt(C++), T = t.charCodeAt(C++) &lt;&lt; 24 | t.charCodeAt(C++) &lt;&lt; 16 | t.charCodeAt(C++) &lt;&lt; 8 | t.charCodeAt(C++); k ^= (n = 252645135 &amp; (k &gt;&gt;&gt; 4 ^ T)) &lt;&lt; 4, k ^= n = 65535 &amp; ((T ^= n) &gt;&gt;&gt; -16 ^ k), k ^= (n = 858993459 &amp; (k &gt;&gt;&gt; 2 ^ (T ^= n &lt;&lt; -16))) &lt;&lt; 2, k ^= n = 65535 &amp; ((T ^= n) &gt;&gt;&gt; -16 ^ k), k ^= (n = 1431655765 &amp; (k &gt;&gt;&gt; 1 ^ (T ^= n &lt;&lt; -16))) &lt;&lt; 1, k ^= n = 16711935 &amp; ((T ^= n) &gt;&gt;&gt; 8 ^ k), n = (k ^= (n = 1431655765 &amp; (k &gt;&gt;&gt; 1 ^ (T ^= n &lt;&lt; 8))) &lt;&lt; 1) &lt;&lt; 8 | (T ^= n) &gt;&gt;&gt; 20 &amp; 240, k = T &lt;&lt; 24 | T &lt;&lt; 8 &amp; 16711680 | T &gt;&gt;&gt; 8 &amp; 65280 | T &gt;&gt;&gt; 24 &amp; 240, T = n; for (var A = 0; A &lt; _.length; A++) _[A] ? (k = k &lt;&lt; 2 | k &gt;&gt;&gt; 26, T = T &lt;&lt; 2 | T &gt;&gt;&gt; 26) : (k = k &lt;&lt; 1 | k &gt;&gt;&gt; 27, T = T &lt;&lt; 1 | T &gt;&gt;&gt; 27), T &amp;= -15, e = a[(k &amp;= -15) &gt;&gt;&gt; 28] | s[k &gt;&gt;&gt; 24 &amp; 15] | o[k &gt;&gt;&gt; 20 &amp; 15] | c[k &gt;&gt;&gt; 16 &amp; 15] | r[k &gt;&gt;&gt; 12 &amp; 15] | l[k &gt;&gt;&gt; 8 &amp; 15] | u[k &gt;&gt;&gt; 4 &amp; 15], i = d[T &gt;&gt;&gt; 28] | h[T &gt;&gt;&gt; 24 &amp; 15] | p[T &gt;&gt;&gt; 20 &amp; 15] | f[T &gt;&gt;&gt; 16 &amp; 15] | v[T &gt;&gt;&gt; 12 &amp; 15] | m[T &gt;&gt;&gt; 8 &amp; 15] | g[T &gt;&gt;&gt; 4 &amp; 15], n = 65535 &amp; (i &gt;&gt;&gt; 16 ^ e), y[w++] = e ^ n, y[w++] = i ^ n &lt;&lt; 16 &#125; return y&#125; (t),S = 0,F = e.length,j = 0,I = 32 == z.length ? 3 : 9;p = 3 == I ? i ? new Array(0, 32, 2) : new Array(30, -2, -2) : i ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2),2 == s ? e += \" \": 1 == s ? i &amp;&amp; (r = 8 - F % 8, e += String.fromCharCode(r, r, r, r, r, r, r, r), 8 === r &amp;&amp; (F += 8)) : s || (e += \"\\0\\0\\0\\0\\0\\0\\0\\0\");var B = \"\",O = \"\";for (1 == n &amp;&amp; (f = a.charCodeAt(S++) &lt;&lt; 24 | a.charCodeAt(S++) &lt;&lt; 16 | a.charCodeAt(S++) &lt;&lt; 8 | a.charCodeAt(S++), m = a.charCodeAt(S++) &lt;&lt; 24 | a.charCodeAt(S++) &lt;&lt; 16 | a.charCodeAt(S++) &lt;&lt; 8 | a.charCodeAt(S++), S = 0); S &lt; F;) &#123; for (d = e.charCodeAt(S++) &lt;&lt; 24 | e.charCodeAt(S++) &lt;&lt; 16 | e.charCodeAt(S++) &lt;&lt; 8 | e.charCodeAt(S++), h = e.charCodeAt(S++) &lt;&lt; 24 | e.charCodeAt(S++) &lt;&lt; 16 | e.charCodeAt(S++) &lt;&lt; 8 | e.charCodeAt(S++), 1 == n &amp;&amp; (i ? (d ^= f, h ^= m) : (v = f, g = m, f = d, m = h)), d ^= (r = 252645135 &amp; (d &gt;&gt;&gt; 4 ^ h)) &lt;&lt; 4, d ^= (r = 65535 &amp; (d &gt;&gt;&gt; 16 ^ (h ^= r))) &lt;&lt; 16, d ^= r = 858993459 &amp; ((h ^= r) &gt;&gt;&gt; 2 ^ d), d ^= r = 16711935 &amp; ((h ^= r &lt;&lt; 2) &gt;&gt;&gt; 8 ^ d), d = (d ^= (r = 1431655765 &amp; (d &gt;&gt;&gt; 1 ^ (h ^= r &lt;&lt; 8))) &lt;&lt; 1) &lt;&lt; 1 | d &gt;&gt;&gt; 31, h = (h ^= r) &lt;&lt; 1 | h &gt;&gt;&gt; 31, c = 0; c &lt; I; c += 3) &#123; for (b = p[c + 1], y = p[c + 2], o = p[c]; o != b; o += y) l = h ^ z[o], u = (h &gt;&gt;&gt; 4 | h &lt;&lt; 28) ^ z[o + 1], r = d, d = h, h = r ^ (C[l &gt;&gt;&gt; 24 &amp; 63] | x[l &gt;&gt;&gt; 16 &amp; 63] | T[l &gt;&gt;&gt; 8 &amp; 63] | L[63 &amp; l] | _[u &gt;&gt;&gt; 24 &amp; 63] | w[u &gt;&gt;&gt; 16 &amp; 63] | k[u &gt;&gt;&gt; 8 &amp; 63] | A[63 &amp; u]); r = d, d = h, h = r &#125; h = h &gt;&gt;&gt; 1 | h &lt;&lt; 31, h ^= r = 1431655765 &amp; ((d = d &gt;&gt;&gt; 1 | d &lt;&lt; 31) &gt;&gt;&gt; 1 ^ h), h ^= (r = 16711935 &amp; (h &gt;&gt;&gt; 8 ^ (d ^= r &lt;&lt; 1))) &lt;&lt; 8, h ^= (r = 858993459 &amp; (h &gt;&gt;&gt; 2 ^ (d ^= r))) &lt;&lt; 2, h ^= r = 65535 &amp; ((d ^= r) &gt;&gt;&gt; 16 ^ h), h ^= r = 252645135 &amp; ((d ^= r &lt;&lt; 16) &gt;&gt;&gt; 4 ^ h), d ^= r &lt;&lt; 4, 1 == n &amp;&amp; (i ? (f = d, m = h) : (d ^= v, h ^= g)), O += String.fromCharCode(d &gt;&gt;&gt; 24, d &gt;&gt;&gt; 16 &amp; 255, d &gt;&gt;&gt; 8 &amp; 255, 255 &amp; d, h &gt;&gt;&gt; 24, h &gt;&gt;&gt; 16 &amp; 255, h &gt;&gt;&gt; 8 &amp; 255, 255 &amp; h), 512 == (j += 8) &amp;&amp; (B += O, O = \"\", j = 0)&#125;if (B = (B += O).replace(/\\0*$/g, \"\"), !i) &#123; if (1 === s) &#123; var $ = 0; (F = B.length) &amp;&amp; ($ = B.charCodeAt(F - 1)), $ &lt;= 8 &amp;&amp; (B = B.substring(0, F - $)) &#125; B = decodeURIComponent(escape(B))&#125;return B&#125;f = /[\\t\\n\\f\\r ]/g,c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"function decode(t) &#123;var e = (t = String(t).replace(f, \"\")).length;e % 4 == 0 &amp;&amp; (e = (t = t.replace(/==?$/, \"\")).length),(e % 4 == 1 || /[^+a-zA-Z0-9/] / .test(t)) &amp;&amp; l(\"Invalid character: the string to be decoded is not correctly encoded.\");for (var n, r, i = 0,o = \"\",a = -1; ++a &lt; e;) r = c.indexOf(t.charAt(a)),n = i % 4 ? 64 * n + r: r,i++%4 &amp;&amp; (o += String.fromCharCode(255 &amp; n &gt;&gt; ( - 2 * i &amp; 6)));return o&#125;function o(t) &#123;return s(\"5e5062e82f15fe4ca9d24bc5\", decode(t), 0, 0, \"012345677890123\", 1)&#125; python: 123456789101112131415import requestsimport execjsimport jsonnode = execjs.get()url = 'https://vipapi.qimingpian.cn/DataList/productListVip'response = requests.post(url).json()encrypted_data = response['encrypt_data']# print(encrypted_data)ctx = execjs.compile(open('qiminmg.js', encoding='utf-8').read())funcName = \"o('&#123;&#125;')\".format(encrypted_data)data_list = str(ctx.eval(funcName))data = data_list.encode('utf-8').decode('unicode_escape')# data = json.dumps(data)data = json.loads(data) # 提取数据即可 百度翻译 js加密逆向。 1234567891011121314151617181920212223242526272829303132333435import jsonimport requestsimport execjsurl = 'https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh'headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', 'cookie': 'BAIDUID=481C727E7E33DE3C8E7BE28D1B9E4DB4:FG=1; __yjs_duid=1_8518152088f2a8ef333627b281e674af1637678535743; PSTM=1637754248; BIDUPSID=D48857334A8EF512F1CFF261FB9CEED2; BAIDUID_BFESS=FD6D335F6B4C53181FDBD8B750A730A2:FG=1; H_WISE_SIDS=107317_110085_127969_132547_164869_176399_179346_181536_181589_182244_183030_184010_184267_184441_185268_185638_186540_186635_187433_187449_187726_188453_188552_188747_188794_189095_189732_189755_189972_190033_190248_190473_190611_190679_190682_191068_191243_191368_191503_191810_192017_192206_192237_192384_192957_193042_193284_193360_193560_193759_194038_194085_194520_194583_194734_194918_195154_195172_195187_195343_195402_195478_195577_195591_195623_195674_195678_195838_195902_196051_196274_196275_196382_196428_196490_196513_196591_196662_196704_196754_196818_196925_196939_197021_197215_197224_197242_197288_197314_197471_197783_198034_198170_198173; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; APPGUIDE_10_0_2=1; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1640782595,1640783153,1640783158,1640783168; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1640783168; __yjs_st=2_YWVlNWM2NTU2ZmJjMzliMjU5OTY3Nzk1YzUxODkwYmYzNDI4NWVkMTZiMTNiZTMyNmM2YzNiNTdmMTc0MTdlMjE5NDc4ZDEzYWU5ODA3YzIwNGQ0YTZhOTJjN2QzM2E0YjI5ZTgxZTQzNzkzNjM3ZTFjZmRkNmUxOGQ0MGQ4OGRjMGM0ZGQ5ZTdiOTFlZDRkMjc0YWM0NDE4ZDZjNzBlNzQ2MWUxNGUwZWJhNzM1N2FmMWQzOTQ4Nzg2Zjg1NDA3M2Y3ZWNmZWJhYTA2NDQwNjU0NTQ0YzI4MTgzNjFiZTlmOTZmYzFkYzlkZGU4MjA2NWUwYTliZGE1MDRjMWU5Nl83XzlmZTc0MWMy; ab_sr=1.0.1_ZTVhZWRkOWU5NDcwM2YyNDA4YjU5M2Q2NTRiNDU3MmRjYjMzZWJlOGFjYWY3MThlNmUwZGYwY2Y0MTQ2ZGRlMTIzNWIxZTY2NDFkNWM0NDRiZTMxNzdiNTFkZjA0YTNkNzNjZGZjZDdiMzQxMWI1OTZmZjQ3YzNiZDk1MjZkOGUzODE1ZDgzNjM3ZmY3MjFiYzdkYTlkMjc1OWI0OTAyZg==', # 'Host': 'fanyi.baidu.com', # 'Origin': 'https://fanyi.baidu.com', # 'Referer': 'https://fanyi.baidu.com/'&#125;word = input('输入一个单词:')node = execjs.get()# 编译ctx = execjs.compile(open('baidufanyi.js', encoding='utf-8').read())funcName = \"e('&#123;&#125;')\".format(word)sign = ctx.eval(funcName)data = &#123; 'from': 'en', 'to': 'zh', 'query': word, 'transtype': 'realtime', 'simple_means_flag': 3, 'sign': sign, 'token': '6f3304f0dda94c947e6e2c29a94f7755', 'domain': 'common',&#125;response = requests.post(url=url, headers=headers, data=data)sourse = response.text.encode('utf-8').decode('unicode_escape')print(sourse) 123456789101112131415161718192021222324252627282930313233343536373839404142434445function n(r, o) &#123; for (var t = 0; t &lt; o.length - 2; t += 3) &#123; var a = o.charAt(t + 2); a = a &gt;= \"a\" ? a.charCodeAt(0) - 87 : Number(a), a = \"+\" === o.charAt(t + 1) ? r &gt;&gt;&gt; a : r &lt;&lt; a, r = \"+\" === o.charAt(t) ? r + a &amp; 4294967295 : r ^ a &#125; return r &#125; function e(r) &#123; var i = '320305.131321201' ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！ 从控制台中提取 var o = r.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g); if (null === o) &#123; var t = r.length; t &gt; 30 &amp;&amp; (r = \"\" + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr(-10, 10)) &#125; else &#123; for (var e = r.split(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/), C = 0, h = e.length, f = []; h &gt; C; C++) \"\" !== e[C] &amp;&amp; f.push.apply(f, a(e[C].split(\"\"))), C !== h - 1 &amp;&amp; f.push(o[C]); var g = f.length; g &gt; 30 &amp;&amp; (r = f.slice(0, 10).join(\"\") + f.slice(Math.floor(g / 2) - 5, Math.floor(g / 2) + 5).join(\"\") + f.slice(-10).join(\"\")) &#125; var u = void 0 , l = \"\" + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107); u = null !== i ? i : (i = window[l] || \"\") || \"\"; for (var d = u.split(\".\"), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [], c = 0, v = 0; v &lt; r.length; v++) &#123; var A = r.charCodeAt(v); 128 &gt; A ? S[c++] = A : (2048 &gt; A ? S[c++] = A &gt;&gt; 6 | 192 : (55296 === (64512 &amp; A) &amp;&amp; v + 1 &lt; r.length &amp;&amp; 56320 === (64512 &amp; r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 &amp; A) &lt;&lt; 10) + (1023 &amp; r.charCodeAt(++v)), S[c++] = A &gt;&gt; 18 | 240, S[c++] = A &gt;&gt; 12 &amp; 63 | 128) : S[c++] = A &gt;&gt; 12 | 224, S[c++] = A &gt;&gt; 6 &amp; 63 | 128), S[c++] = 63 &amp; A | 128) &#125; for (var p = m, F = \"\" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + (\"\" + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = \"\" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + (\"\" + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + (\"\" + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b &lt; S.length; b++) p += S[b], p = n(p, F); return p = n(p, D), p ^= s, 0 &gt; p &amp;&amp; (p = (2147483647 &amp; p) + 2147483648), p %= 1e6, p.toString() + \".\" + (p ^ m) &#125;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"爬虫逆向学习笔记-1","date":"2021-12-24T10:46:51.000Z","path":"posts/2d0e6395.html","text":"爬虫逆向学习笔记-1 常见加密算法 微信公众号平台MD5 steam平台RSA 凡科网MD5闭包 完美世界RSA 试客联盟RSA 空中网js混淆 长房网AES 常见加密算法 MD5,对称加密AES,DES，非对称加密RSA。 BASE64伪加密，用64位字符表示二进制数据。 微信公众号平台MD5 抓包，使用搜索。password/password:/password=。定位到数据后添加断点，进入到内部函数，将其复制黏贴到发条js解析工具。将未定义的数据设成字典，将需要返回数值的函数function设一个名字。调试完成后，复制进入python。最后用execjs调用。 12345678910import execjs# 实例化一个js对象node = execjs.get()# 编译ctx = execjs.compile(open('weixin.js',encoding='utf-8').read())# 执行jsfuncName = 'getPwd(\"&#123;0&#125;\")'.format('123456')pwd = ctx.eval(funcName)print(pwd) steam平台RSA 分析并抓包，找到password的实现，设置断点进入到RSA加密。将代码复制到调试工具，缺啥加啥。其中，抓包中含有一个getRSA的包获取了公钥等。js代码中result对象的赋值直接改为 123var mod = \"b899dcd0dd8e1b068bc4ad2d5fa0cab5ecd5039e4cb9e78d835e0b240e4b1f6223ab145fcba6a362b1c2c8b87b741bad78219d188f05f0d5fd334f84359acf7075c1f6e8ba65ebbe2e757a27559ef8df83b3b5c40600b8b8e927338146aaaf3ad8ecbffb75f74964eb27d7eb74fa697945be135dc10fc8bef69aa29d27f34c68f0a45719b15a7e74f2111ef41c90f5bef7c7f0c6c3787b37fd857d3d2c625a7bf22b63f4c6bbfc924f995d4c31af784fe7961cbc549cfab4e8580c7ff4fbaf4fd1e95a4dd4f189d786562c7ef46e46a538ef8a7af3f37e65d64b57a3910a57c42c0d67dc284a4a21f8d6f7fcdc041241c9c414a206306e9891444648e86ba4e3\";var exp = \"010001\";var pubKey = RSA.getPublicKey(mod, exp); 然后再将其余缺失的补全，发现缺少navigator定义，该定义为js内置对象，所以赋值的时候要赋值为navigator=this; python实现大致同微信公众号平台。 12345678910111213141516171819202122232425262728import requestsimport execjs# 获取秘钥url = 'https://store.steampowered.com/login/getrsakey/'data = &#123; 'donotcache': '1640485831521', 'username': '201734020622'&#125;headers = &#123; 'User-Agent': '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1\"',&#125;response = requests.post(url=url,headers=headers,data=data).json()mod = response['publickey_mod']exp = response['publickey_exp']print(mod, exp)# f80325c8b21def9d392f17dcc51a865ccdbca30c47c2a19d94a3fb0e628dd4126a7565bb8d8a5c9b0453467d26bd9312a1dff2307fe9b2e7117a17af29fda72e6bb4491b16fb1c26eb21d9e34892c68adbc4aa043e7de20396523a5a9a5274af79d39736f88d503e6bc384435a072852d48104d466d3dcc3407e8fc31d849a0eccc4aab4a37c2d1dec1378fe9a3f0b282fc192c0bf141ad9e76343452c2adaa499f3aa15fef364c3a7662d8d038860b874d661acc9a64b773df1304b638e2d2e0d17e3f5ffcee6b29f3ee595ba9649ebf0d3d7cb9a193769bc428f8c5ffb6a3d631d284e8de7912a480c6c44abc117368bf1faf880c1e0ee65299fbcf2735a61# 密码逆向node = execjs.get()# 编译ctx = execjs.compile(open('steam.js', encoding='utf-8').read())# 执行jsfuncName = 'getPwd(\"&#123;0&#125;\",\"&#123;1&#125;\",\"&#123;2&#125;\")'.format('123456', mod, exp)pwd = ctx.eval(funcName)print(pwd) 凡科网MD5闭包 代码中存在闭包，则只需要将闭包上面的代码复制黏贴即可。 12345678910import execjs# 实例化一个js对象node = execjs.get()# 编译ctx = execjs.compile(open('fanke.js', encoding='utf-8').read())# 执行jsfuncName = 'md5(\"&#123;0&#125;\")'.format('123456')pwd = ctx.eval(funcName)print(pwd) 完美世界RSA 12345678910111213password: QWR1pmeu8SfyUHu3gJxJQn1dz6m9KTFj7SqXs9DoGG7dDH3faYjIhk9seNP7wZlHSBQm6Xe6jvq4yHonlAhni+&#x2F;lO5lsgBYkoV&#x2F;mQEhCz6fkikJg37G&#x2F;pgF0s9lp7BxI1IZPmb11tkTQh+tE8xLucVnfpak0MR&#x2F;9uRjEZP2GyVU&#x3D;continue: service: passportlocation: 2f736166652fneedRand: 1isiframe: 1logintype: normalCSSStyle: autoLogin: 1username: 123@qq.comrandimg: fb9811807bc54820b3bcd1959202850a;58ad79506191435dad02f3a06b9d4da8randimg返回的是一个滑动验证后的图片字符串。password是经过了加密后的。 找到加密的源码，其中navigator和window都是自带对象，直接赋值为this。 再自定义一个function函数获取加密后的密码。 将代码复制后，设置公钥函数有一个jQuery的选择器，.val()是将值提取出来。则可以在网页中搜索id为e的标签。 改写的代码部分: 123456789function getPwd(pwd) &#123;key = \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjfeE0MIYsZes/HwV06/kvRw34Hmhn9WPt0feLPp1PVqdqZz1/xFvPPEAJ/lAvfqt5kyn+A06bvYXIhizTjlOzPgLE4897ihuSYXgfwcUshPZvydRLbftU6Exj5SLbv5tw4GInbgQv7RWLWOKyQA81q6lWae2Kcgd1XpDRsQNXVwIDAQAB\"var e = new JSEncrypt();e.setPublicKey(key);var p = e.encrypt(pwd);return p&#125;/-得到的结果-/e6dtxLdKX3t1BPTb4lS/KS7XqmPTjFQOm4HIG2hcMsugkg+w+duNai3+l9Suej3GcyGhUfeXXfX4ubGkw+rITehuhfJrunXdyGAQZiirvcRNzm17O1HK/vlZSqOSFoYMbXDbLe4Ibgbr7JarJ0oOVR141URF4jS5cy9Xe5H0OAU= python代码实现，为了获取到页面中的id为e的标签，对页面进行检查，发现不在主页面内。 对登录的框架进行检查，发现是一个嵌套的框架，会进入到一个新的页面。 12345678910111213141516171819202122import requestsfrom lxml import htmlimport execjs# 发起请求获取公钥url = \"https://passport.wanmei.com/sso/login?service=passport&amp;isiframe=1&amp;location=2f736166652f\"headers = &#123; 'User-Agent': '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1\"',&#125;page_text = requests.get(url=url, headers=headers).texttree = html.etree.HTML(page_text)key = tree.xpath('//input[@id=\"e\"]/@value')[0]print(key)# 密码逆向node = execjs.get()# 编译ctx = execjs.compile(open('wanmeishijie.js', encoding='utf-8').read())# 执行jsfuncName = 'getPwd(\"&#123;0&#125;\",\"&#123;1&#125;\")'.format('123456', key)pwd = ctx.eval(funcName)print(pwd) 试客联盟RSA 1234-url:http://login.shikee.com/-serializeArray():js函数的作用使用来实现序列化。将登录页面的表单数据序列化成一个数组。-key表示为公钥，公钥的生成需要rsa_nget url：http://login.shikee.com/getkey?v=4f8f888fc67c7b05d38955b71969b4ba 全局搜索rsa_n之后，在get请求中找到。 调试后的代码。 12345getPwd&#123;&#125;：rsa_n = \"DC1683EEAA2B709F97743773E18F53E3C9A15D12465CE82227A6E447E6EC590D0B569876BB631B0AB4D67881E7EC874066D6E022E2978B4C6EAA8903EC1774AAE040A3BEAF9C2B48730ADD46BEF5F0C8109DB6FCEFED0F4A84CCD7AFFDB4FB4214DA0D0FF1A8E2831E81FA4D7C2F4346184EEC87CE42230FC320B2B4E392ECDF\";setMaxDigits(131);var key = new RSAKeyPair(\"10001\", '', rsa_n);return encryptedString(key,p); 12345678910111213141516171819202122import requestsimport execjsimport re# rsa_nurl = 'http://login.shikee.com/getkey?v=4f8f888fc67c7b05d38955b71969b4ba'headers = &#123; 'User-Agent': '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1\"',&#125;page_next = requests.get(url=url,headers=headers).textex = 'var rsa_n = \"(.*?)\";'rsa_n = re.findall(ex, page_next)[0]node = execjs.get()# 编译ctx = execjs.compile(open('shike.js', encoding='utf-8').read())# 执行jsfuncName = 'getPwd(\"&#123;0&#125;\",\"&#123;1&#125;\")'.format('123456',rsa_n)pwd = ctx.eval(funcName)print(pwd) 空中网js混淆 抓包搜索password后，搜索不到。 -js混淆 ​ -将js核心相关的代码进行变相的加密，加密后的数据就是js混淆之后的结果。 -js反混淆 -线上反混淆工具（不理想）​ -开发者工具中自带的（推荐）sourse-》settings-》sourses-》search in anonymous and content script 进行关键字的全局搜索-》VMxx()即为反混淆后的代码。 123data[&#39;dc&#39;]未知需要处理。当前代码搜索后无结果。需要全局搜索，直接搜索结果过多。直接在抓包中response预览json格式的返回值。 将代码调试之后。 1234567var dc = \"0914D30A0877440041218E9B38CBAF62\"return encrypt(p, dc);# 此行报错改为return this.encrypt(p, dc);# 此行报错由于该函数嵌套在KZLoginHandler内，如下图将this改为KZLoginHandler即可最后将dc改为参数，python中实现 123456789101112131415161718192021222324import requestsimport execjsimport re# dcurl = 'https://sso.kongzhong.com/ajaxLogin?j=j&amp;&amp;type=1&amp;service=https://passport.kongzhong.com/&amp;username=126@qq.com&amp;password=31ad782c8638019d8cc3&amp;vcode=&amp;toSave=0&amp;_=1640509013973'headers = &#123; 'User-Agent': '\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1\"', 'Referer': 'https://passport.kongzhong.com/'&#125;response = requests.get(url=url,headers=headers).textprint(response)# KZLoginHandler.jsonpCallbackKongZ(&#123;\"dc\":\"4C16B9ADE62BED55BB65B48642E2F032\",\"kzmsg\":[&#123;\"text\":\"Please enter the coddc = re.findall('\"dc\":\"(.*?)\"',response)[0]print(dc)# 4C16B9ADE62BED55BB65B48642E2F032node = execjs.get()# 编译ctx = execjs.compile(open('kongzhongwang.js', encoding='utf-8').read())# 执行jsfuncName = 'getPwd(\"&#123;0&#125;\",\"&#123;1&#125;\")'.format('123456',dc)pwd = ctx.eval(funcName)print(pwd)# 310068cdf8c600ca7076 长房网AES security是写死的，直接调用。 sessionid会被存放在cookie内。 调试后的代码 123456789101112var str = \"BD48E67913685EBEE02A1D0EBBEF06D0\";if (str.length &lt; 32) &#123; str += \"abcdefghijklmnopqrstuvwxyz1234567890\";&#125;str = str.toUpperCase();var key = str.substring(0, 16);var iv = str.substring(16, 32);var security = \"\\u4445\\u5320\\u4d45\";value = CryptoJS.AES.encrypt(p, CryptoJS.enc.Utf8.parse(key), &#123; iv: CryptoJS.enc.Utf8.parse(iv)&#125;).toString();return security + value;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Python爬虫学习笔记-4","date":"2021-12-14T09:09:47.000Z","path":"posts/c27b0f13.html","text":"Python爬虫学习笔记-4 中间件selenium 分布式redis 京东图书爬虫实现 杂项 中间件selenium 主要用于渲染后的源码方便提取数据。 123456789101112131415import timefrom selenium import webdriverfrom scrapy.http import HtmlResponseclass SeleniumMiddleware(object): def process_request(self, request, spider): url = request.url if 'daydata' in url: driver = webdriver.Chrome() driver.get(url) time.sleep(3) data = driver.page_source driver.close() # 创建响应对象 res = HtmlResponse(url=url,body=data,encoding='utf-8') return res 分布式redis 由于后续部分，包括前面一些内容代码分布散乱不好做笔记所以这部分笔记可能会有所减少。 redis启动，控制台中redis目录运行 1redis-server.exe redis.windows.conf 再重新新建一个cmd窗口，以下同数据库操作 123redis-cli.exe -h 127.0.0.1 -p 6379set myKey abcget myKey 用redis desktopmanager，可视化后实现分布式。 主要步骤: 先编写scrapy普通爬虫 1 导入分布式爬虫类 1from scrapy_redis.spiders import RedisSpider 2 继承分布式爬虫类 将原本编写的class的括号中类名修改 1class xxxSpider(RedisSpider)： 3 注销start_url和allowed_domains 12345# 原有:name = 'xxx'# 注释掉后续两个# allowed_url = []# start_url = [] 4 设置redis-key 1redis-key = 'xxx' 5 设置init （copy即可 1234567def __init__(self, *args, **kwargs): domain = kwargs.pop('domain','') # 如果pop失败则为空 self.allowed_domains = list(filter(None, domain.split(','))) # 转为list对象，分割是为了在命令行中 # scrapy runspider xxx.py domain = 'xxx.com,xx.cn' # 此处分割字符串 super(xxxSpider,self).__init__(*args, **kwargs) 6 copy settings，注释原本的settings并修改。 最后启动 京东图书爬虫实现 import selenium的时候，由于环境问题可能需要在当前路径之下pip install 涉及一些杂项知识点，获取兄弟节点xpath 1&#x2F;&#x2F;a[@id &#x3D; &quot;2&quot;]&#x2F;following-sibling::a[1] 普通爬虫实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import scrapyfrom selenium import webdriverfrom JD.items import JdItemimport reclass BookSpider(scrapy.Spider): name = 'book' allowed_domains = ['jd.com'] start_urls = ['https://book.jd.com/booksort.html'] def parse(self, response): # 获取所有图书大分类节点列表 big_node_list = response.xpath('//*[@id=\"booksort\"]/div[2]/dl/dt/a') for big_node in big_node_list[:1]: big_category = big_node.xpath('./text()').extract_first() big_category_link = response.urljoin(big_node.xpath('./@href').extract_first()) # 获取小分类节点列表 small_node_list = big_node.xpath('../following-sibling::dd/em/a') for small_node in small_node_list[:1]: temp = &#123;&#125; temp['big_category'] = big_category temp['big_category_link'] = big_category_link temp['small_category'] = small_node.xpath('./text()').extract_first() temp['small_category_link'] = response.urljoin(small_node.xpath('./@href').extract_first()) # 点击小分类连接 headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; yield scrapy.Request( url=temp['small_category_link'], headers=headers, callback=self.parse_book_list, meta=&#123;'py': temp&#125; ) def parse_book_list(self, response): temp = response.meta['py'] book_list = response.xpath('//*[@id=\"J_goodsList\"]/ul/li/div') for book in book_list: item = JdItem() if book.xpath('./div[4]/span[1]/a/text()').extract_first() is None: continue item['big_category'] = temp['big_category'] item['big_category_link'] = temp['big_category_link'] item['small_category']=temp['small_category'] item['small_category_link']=temp['small_category_link'] item['book_name'] = book.xpath('./div[3]/a/em/text()').extract_first() item['author'] = book.xpath('./div[4]/span[1]/a/text()').extract_first() item['link'] = response.urljoin(book.xpath('./div[3]/a/@href').extract_first()) item['price'] = book.xpath('./div[2]/strong/i/text()').extract_first() item['book_id'] = book.xpath('./../@data-sku').extract_first() yield item # 翻页 next = response.xpath('//*[@id=\"J_bottomPage\"]/span[1]/a[9]/@onclick').extract_first() if next != None: result = re.search(r'[0-9]+', next) next_url = temp['small_category_link'] + '?page=' + result.group() print(next_url) headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; yield scrapy.Request( url=next_url, headers=headers, callback=self.parse_book_list, meta=&#123;'py': temp&#125; ) selenium中间件代码 123456789101112131415161718192021222324252627282930313233343536373839404142# Define here the models for your spider middleware## See documentation in:# https://docs.scrapy.org/en/latest/topics/spider-middleware.htmlfrom selenium import webdriverimport timefrom scrapy.http import HtmlResponsefrom scrapy import signals# useful for handling different item types with a single interfacefrom itemadapter import is_item, ItemAdapterclass SeleniumMiddleware(object): def process_request(self, request, spider): url = request.url if 'booksort' in url: option = webdriver.ChromeOptions() option.add_argument('--headless') option.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=option) driver.get(url) time.sleep(1) data = driver.page_source driver.close() # 创建响应对象 res = HtmlResponse(url=url, body=data, encoding='utf-8') return res if 'list.html' in url: option = webdriver.ChromeOptions() option.add_argument('--headless') option.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=option) driver.get(url) time.sleep(1) driver.execute_script('window.scrollBy(0,10000)') time.sleep(2) data = driver.page_source driver.close() # 创建响应对象 res = HtmlResponse(url=url, body=data, encoding='utf-8') return res 步骤2 修改为分布式爬虫 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import scrapyfrom selenium import webdriverfrom JD.items import JdItemimport re# 1 导入分布式爬虫类from scrapy_redis.spiders import RedisSpider# 2 继承分布式爬虫类class BookSpider(RedisSpider): name = 'book' # 3 注销 # allowed_domains = ['jd.com'] # start_urls = ['https://book.jd.com/booksort.html'] # 4 设置redis-key redis_key = 'pyhtml' # 5 设置__init__ def __init__(self, *args, **kwargs): domain = kwargs.pop('domain', '') self.allowed_domains = list(filter(None, domain.split(','))) super(BookSpider, self).__init__(*args, **kwargs) def parse(self, response): # 获取所有图书大分类节点列表 big_node_list = response.xpath('//*[@id=\"booksort\"]/div[2]/dl/dt/a') for big_node in big_node_list[:1]: big_category = big_node.xpath('./text()').extract_first() big_category_link = response.urljoin(big_node.xpath('./@href').extract_first()) # 获取小分类节点列表 small_node_list = big_node.xpath('../following-sibling::dd[1]/em/a') for small_node in small_node_list: temp = &#123;&#125; temp['big_category'] = big_category temp['big_category_link'] = big_category_link temp['small_category'] = small_node.xpath('./text()').extract_first() temp['small_category_link'] = response.urljoin(small_node.xpath('./@href').extract_first()) # 点击小分类连接 headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; yield scrapy.Request( url=temp['small_category_link'], headers=headers, callback=self.parse_book_list, meta=&#123;'py': temp&#125;, dont_filter=True ) def parse_book_list(self, response): temp = response.meta['py'] book_list = response.xpath('//*[@id=\"J_goodsList\"]/ul/li/div') for book in book_list: item = JdItem() if book.xpath('./div[4]/span[1]/a/text()').extract_first() is None: continue item['big_category'] = temp['big_category'] item['big_category_link'] = temp['big_category_link'] item['small_category'] = temp['small_category'] item['small_category_link'] = temp['small_category_link'] item['book_name'] = book.xpath('./div[3]/a/em/text()').extract_first() item['author'] = book.xpath('./div[4]/span[1]/a/text()').extract_first() item['link'] = response.urljoin(book.xpath('./div[3]/a/@href').extract_first()) item['price'] = book.xpath('./div[2]/strong/i/text()').extract_first() item['book_id'] = book.xpath('./../@data-sku').extract_first() yield item # 翻页 next = response.xpath('//*[@id=\"J_bottomPage\"]/span[1]/a[9]/@onclick').extract_first() if next != None: result = re.search(r'[0-9]+', next) next_url = temp['small_category_link'] + '?page=' + result.group() print(next_url) headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; yield scrapy.Request( url=next_url, headers=headers, callback=self.parse_book_list, meta=&#123;'py': temp&#125;, dont_filter=True ) 123456789101112131415161718192021222324252627282930313233343536373839404142# Define here the models for your spider middleware## See documentation in:# https://docs.scrapy.org/en/latest/topics/spider-middleware.htmlfrom selenium import webdriverimport timefrom scrapy.http import HtmlResponsefrom scrapy import signals# useful for handling different item types with a single interfacefrom itemadapter import is_item, ItemAdapterclass SeleniumMiddleware(object): def process_request(self, request, spider): url = request.url if 'booksort' in url: option = webdriver.ChromeOptions() option.add_argument('--headless') option.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=option) driver.get(url) time.sleep(1) data = driver.page_source driver.close() # 创建响应对象 res = HtmlResponse(url=url, body=data, encoding='utf-8') return res if 'list.html' in url: option = webdriver.ChromeOptions() option.add_argument('--headless') option.add_argument('--disable-gpu') driver = webdriver.Chrome(chrome_options=option) driver.get(url) time.sleep(1) driver.execute_script('window.scrollBy(0,10000)') time.sleep(2) data = driver.page_source driver.close() # 创建响应对象 res = HtmlResponse(url=url, body=data, encoding='utf-8') return res 123456789101112131415161718192021222324252627# Define your item pipelines here## Don't forget to add your pipeline to the ITEM_PIPELINES setting# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html# useful for handling different item types with a single interfaceimport jsonfrom itemadapter import ItemAdapterclass JdPipeline: def open_spider(self, spider): if spider.name == 'book': self.file = open('book_list.json', 'a',encoding='utf-8') def process_item(self, item, spider): if spider.name == 'book': item = dict(item) str_data = json.dumps(item, ensure_ascii=False) self.file.write(str_data + ',\\n') return item def close_spider(self, spider): if spider.name == 'book': self.file.close() 杂项 1 scrapyd 项目管理，日志信息详情 2 appnium安装 node.js安装，jdk安装","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Python爬虫学习笔记-3","date":"2021-11-25T10:34:31.000Z","path":"posts/5c1f9ab0.html","text":"Python爬虫学习笔记-3 反爬 验证码 从js中获取数据 MongoDB scrapy crawlspider爬虫类 中间件 反爬 爬虫占PV较高，三月份爬虫（硕士爬取资源），法律灰色地带。 反爬对象:应届毕业生低级爬虫，创业公司，没人停止的爬虫，搜索引擎等， 反爬的三个方向，基于身份识别，基于爬虫行为，基于数据加密。 身份识别: headers：user-agent referer cookies 请求参数： 1 在静态文件中请求数据(github) 2 通过请求获取数据 3 通过js生成数据(临时数据) 4 通过验证码反爬，机器学习识别验证码等。 基于行为： 1 请求ip单位时间内请求数量，使用ip代理、多个账号等 2 根据同一账号/ip的请求时间间隔 可以设置随机休眠 3 账号每天请求次数限制 根据爬取行为： 1 通过js实现跳转反爬，导致在源码中无法获得url。通过多次抓包分析，分析规律 2 通过蜜罐（陷阱）获取爬虫ip。 3 通过假数据反爬 4 阻塞队列，通过大量垃圾url降低爬虫效率 5 阻塞网络io，通过在队列中混入一个大文件的url，会占用线程。 6 运维平台审计 基于数据加密的反爬： 1 通过字体，使用自己的字体库、 2 通过css使数据排版位移反爬 3 通过js动态生成数据 4 通过图片化处理 5 通过编码格式（非utf-8等 验证码 处理验证码：1 手动 2 图像识别引擎 3 打码平台（常用 使用tesseract 安装tesseract，pillow，pytesseract 使用: 命令行 12tesseract xxx.png resultresult 为结果保存的文件名，为txt 代码 123456789from PIL import Imageimport pytesseract# 打开图片im = Image.open('test.jpg')result = pytesseract.image_to_string(im)print(result) 打码平台 云打码，等，由于要收费就不记录了。 从js中获取数据 通过initator获取js 通过search获取js文件 通过元素绑定的事件监听事件找到js文件 分析js代码，并用python实现。 js2py.py安装和使用 123context = js2py.EvalJs()# 创建环境context.execute(rsa_js) # 加载js rsa_js用requests获取请求到的js文件 去重，url地址去重。md5，布隆过滤器 文本内容去重 simhash，编辑距离算法 mongodb 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103本地测试启动（增删改查）&#x2F;完整方式启动(生产方式)默认端口:27017默认文件位置:etc&#x2F;mongod.conf默认日志位置:var&#x2F;log&#x2F;mongodb&#x2F;mongod.lpg测试方式启动启动 sudo service mongod start 停止 sudo service mongod stop &#x2F; restart(重启)生产环境正式启动sudo mongod [--auth --dpath --logpath --apend --fork] [-f logfile]只以sudo mongod启动默认存放在&#x2F;data&#x2F;db目录下--dpath指定数据库存放路径--logptah指定日志存放路径--append或者logappend设置日记写入为追加形式--fork开启新的进程运行mongodb服务--f配置文件路径--auth以权限认证方式启动查看是否启动ps aux | grep mongod集合命令db.createCollection&#123;name,option&#125;db.createCollection(&quot;stu&quot;)db.createCollection&#123;&quot;sub&quot;,(capped: true,size: 10)&#125; cap容量上限objectID是一个12字节的十六进制数前四个为当前时间戳，接下来3个位及其id，接下来2个是mongodb中的服务进程id，最后3个是简单地增量运算符等于：默认为等于小于：$lt less than 等于e $lse less than equal大于&#x2F;等于 $gte greater than equal不等于 $nedb.stu.find(&#123;(age:($gte:10)&#125;) # 注意括号逻辑运算find(&#123;age:18,gender:false&#125;) 和运算可以直接写在&#123;&#125;内使用逗号隔开find(&#123;$and:[&#123;age:18&#125;,&#123;gender:false&#125;]&#125;)$regex 正则表达式（包含某个字find(&#123;name:($regex:&quot;黄&quot;)&#125;)自定义查询，通过js函数find(&#123; $where:function()&#123; return this.age&gt;30; &#125;&#125;)查询结果操作limit(num)只显示多少条find(...).limit(1)skip() 同理设置显示find(&#123;&#125;.&#123;name:1,age:1,_id:0&#125;)显示前两项不显示idsort() -1为降序，1为升序find().sort(age:1)管道$ group 分组 match过滤数据 project修改输入文档结构 sort排序 limit限制 skip跳过常用表达式 $sum min max push在结果文档中插入值到一个数组db.stu.aggregate( &#123;$group:# 每一个大括号都是一个管道 (#分组信息 _id:&quot;$gender&quot;, # 以哪个字段的值来分组 _id表示的是分组的依据不是之前的_id （自定义的键名)counter:($sum:1) # 当有一条数据就累加1 ) &#125;)db.stu.aggregate(&#123; $group:( _id:&quot;$gender&quot;, number:($sum:1), sum_age:($sum:&quot;$age&quot;), # 求和依据为age的值 name_list:($push:&quot;$name&quot;) # push是将属性值传入构成一个数组，$name表示数据依据为name值 )&#125;)权限相关sudo mangoduse admindb.createUser(&#123;&quot;user&quot;:&quot;python&quot;,&quot;pwd&quot;:&quot;python&quot;,&quot;roles&quot;:[&quot;root&quot;]&#125;)exitpython交互pymongo.py from pymongo import MongoClientclient &#x3D; MongoClient(host,port) # 如果是本地两参数可以省略 scrapy 是使用python编写的，使用了异步网络框架可以加快下载速度。少量代码快速抓取 流程: 1 爬虫中起始的url构成request对象→爬虫中间件→引擎→调度器 2 调度器把request→引擎→下载中间件→下载器 3 下载器发送请求，获取response响应→下载中间件→引擎→爬虫中间件→爬虫 4 爬虫提取url地址，组装成request对象→爬虫中间件→引擎→调度器→重复步骤2 5 爬虫提取数据→引擎→管道处理和保存数据 安装scrapy 使用流程 创建项目，生成爬虫，提取数据，保存数据。 1 创建项目: 在命令行输入 scrapy startproject projectname 创建生成的目录和文件结果 1234567891011myspider __init__.py __pycache__.py items.py 自己预计需要爬取的内容 middlewares.py 自定义中间件 pipelines.py 管道保存数据 settings.py 设置文件，ua，启动管道 spiders 自己定义的文件夹名 __init__.py __pycache__.pyscrapy.cfg项目配置文件 2 创建爬虫:（在项目目录下) scrapy genspider &lt;爬虫名字&gt; &lt;爬取的域名&gt; 3 启动爬虫 scrapy scrawl &lt;爬虫名字&gt; 4 完善爬虫 修改起始url 检查修改允许的域名 在parse方法中实现爬取逻辑 5 提取数据 在parse方法内编写爬虫逻辑，若有需要可以自己添加函数，但是parse方法必须要有。 response对象常用属性 response.url 当前响应地址 response.request.url 当前响应对应的请求url地址 response.headers 响应头 response.requests.headers 当前响应的响应头 response.body 响应头 response.status 响应状态码 6 保存数据 在pipelines.py文件中定义对数据的操作，在parse方法内需要用yield将数据传回引擎。 6.1 定义一个管道类，重写process__item方法 处理完item返回给引擎 6..2 settings.py中配置启用管道 1234ITEM_PIPELINES &#x3D; &#123; &#39;myspider.pipelines.MyspiderPipeline&#39;: 300,&#125;# 目录,文件,类 300:执行顺序 越小越先执行 数据建模 建模，导入，实例化 meta参数，用于parse函数yield scrapy.Request(url,///meta = {字典}) 传入的是字典。 scrapy爬取网易 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import jsonimport scrapyimport timefrom wangyi.items import WangyiItemclass JobSpider(scrapy.Spider): name = 'job' allowed_domains = ['163.com'] # 检查修改 start_urls = ['https://hr.163.com/'] def parse(self, response, **kwargs): # 提取数据 # 获取所有职位节点列表 # count = 1 data = &#123; 'currentPage': str(count), 'pageSize': '10' &#125; yield scrapy.Request( url=\"https://hr.163.com/api/hr163/position/queryPage\", method='POST', headers=&#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', 'Content-Type': 'application/json;charset=UTF-8' &#125;, body=json.dumps(data), callback=self.parse_data, meta=&#123;'count': count&#125; ) def parse_data(self, response): node_list = json.loads(response.body) # print(response.body.decode('utf-8')) next_url = 'https://hr.163.com/job-detail.html?id=' # print(node_list['data']['lastPage']) for job in node_list['data']['list']: item = WangyiItem() item['id'] = job['id'] item['name'] = job['name'] item['link'] = next_url + str(job['id']) item['depart'] = job['firstDepName'] item['category'] = job['postTypeFullName'] if job['workType'] == '0': item['type'] = '全职' elif job['workType'] == '1': item['type'] = '实习' else: item['type'] = '派遣' item['address'] = job['workPlaceNameList'] item['num'] = job['recruitNum'] item['date'] = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(job['updateTime']/1000)) item['descriptions'] = job['description'] item['requirements'] = job['requirement'] yield item if not node_list['data']['lastPage']: data = &#123; 'currentPage': str(response.meta['count']+1), 'pageSize': '10' &#125; yield scrapy.Request( url=\"https://hr.163.com/api/hr163/position/queryPage\", method='POST', headers=&#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', 'Content-Type': 'application/json;charset=UTF-8' &#125;, body=json.dumps(data), callback=self.parse_data, meta=&#123;'count': response.meta['count']+1&#125; ) 步骤 1 创建项目并建模 2 编写爬取逻辑，翻页设置使用callback传入解析函数 3 meta参数传值 4 settings中打开pipelines，并使用init del魔术方法定义 crawlspider爬虫类 继承自spider 创建 scrapy genspider -t crawl name domain 可以使用scrapy shell 网页url 测试能不能获取响应 linkextractor，allow和deny内写入正则表达式过滤url 下载中间件使用 process request 当每个request通过下载中间件时，方法被调用 none ：如果所有的下载器中间件都返回为none，则请求最终被交给下载器处理 request 返回为请求，则将请求交给调度器 response 返回为响应，则将响应对象交给spider解析 process response settings中开启管道 中间件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120# Define here the models for your spider middleware## See documentation in:# https://docs.scrapy.org/en/latest/topics/spider-middleware.htmlfrom scrapy import signals# useful for handling different item types with a single interfacefrom itemadapter import is_item, ItemAdapterimport randomfrom Douban.settings import USER_AGENT_LIST, PROXY_LIST# 定义中间件类# settings中注册使用class RandomUserAgent(object): def process_request(self, request, spider): ua = random.choice(USER_AGENT_LIST) request.headers['User-Agent'] = uaclass RandomProxy(object): def process_request(self, request, spider): proxy = random.choice(PROXY_LIST) print(proxy) request.meta['proxy'] = proxy['ip_port']class DoubanSpiderMiddleware: # Not all methods need to be defined. If a method is not defined, # scrapy acts as if the spider middleware does not modify the # passed objects. @classmethod def from_crawler(cls, crawler): # This method is used by Scrapy to create your spiders. s = cls() crawler.signals.connect(s.spider_opened, signal=signals.spider_opened) return s def process_spider_input(self, response, spider): # Called for each response that goes through the spider # middleware and into the spider. # Should return None or raise an exception. return None def process_spider_output(self, response, result, spider): # Called with the results returned from the Spider, after # it has processed the response. # Must return an iterable of Request, or item objects. for i in result: yield i def process_spider_exception(self, response, exception, spider): # Called when a spider or process_spider_input() method # (from other spider middleware) raises an exception. # Should return either None or an iterable of Request or item objects. pass def process_start_requests(self, start_requests, spider): # Called with the start requests of the spider, and works # similarly to the process_spider_output() method, except # that it doesn’t have a response associated. # Must return only requests (not items). for r in start_requests: yield r def spider_opened(self, spider): spider.logger.info('Spider opened: %s' % spider.name)class DoubanDownloaderMiddleware: # Not all methods need to be defined. If a method is not defined, # scrapy acts as if the downloader middleware does not modify the # passed objects. @classmethod def from_crawler(cls, crawler): # This method is used by Scrapy to create your spiders. s = cls() crawler.signals.connect(s.spider_opened, signal=signals.spider_opened) return s def process_request(self, request, spider): # Called for each request that goes through the downloader # middleware. # Must either: # - return None: continue processing this request # - or return a Response object # - or return a Request object # - or raise IgnoreRequest: process_exception() methods of # installed downloader middleware will be called return None def process_response(self, request, response, spider): # Called with the response returned from the downloader. # Must either; # - return a Response object # - return a Request object # - or raise IgnoreRequest return response def process_exception(self, request, exception, spider): # Called when a download handler or a process_request() # (from other downloader middleware) raises an exception. # Must either: # - return None: continue processing this exception # - return a Response object: stops process_exception() chain # - return a Request object: stops process_exception() chain pass def spider_opened(self, spider): spider.logger.info('Spider opened: %s' % spider.name) 1234567891011121314151617181920212223242526272829import scrapyfrom Douban.items import DoubanItemclass MovieSpider(scrapy.Spider): name = 'movie' allowed_domains = ['douban.com'] start_urls = ['https://movie.douban.com/top250'] def parse(self, response): print(response.request.headers['User-Agent']) el_list = response.xpath('//*[@id=\"content\"]/div/div[1]/ol/li/div/div[2]') for el in el_list: item = DoubanItem() item['name'] = el.xpath('./div[1]/a/span[1]/text()').extract_first() out = el.xpath('./div[@class=\"bd\"]/p[1]/text()').extract_first().strip() item['info'] = \"\".join(out.split()) item['score'] = el.xpath('./div[2]/div/span[2]/text()').extract_first() item['desc'] = el.xpath('./div[2]/p/span//text()').extract_first() yield item url = response.xpath('//span[@class=\"next\"]/a/@href').extract_first() if url is not None: url = response.urljoin(url) yield scrapy.Request( url=url, callback=self.parse )","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Python爬虫学习笔记-2","date":"2021-11-23T12:01:58.000Z","path":"posts/2b18aa26.html","text":"Python爬虫学习笔记-2 xpath语法 lxml模块 爬取百度贴吧 selenium selenium切换窗口 selenium杂项 爬取斗鱼直播 xpath语法 1 通过索引 1234567891011121314151617181920212223 /html/body/div[1]/div/div[2]/div/html/body/div[1]/div/div[last()-1] // last()为最后一个 last-1position()位置 position()&gt;10/html/body/div[1]/div/div[position()&gt;2] //设置区间//div[@id=\"content\"]/div/div[1]/div/@id使用相对路径，通过节点属性值修饰节点 第一个@id=\"...\"为指定，第二个@为取值选择文本为text()=\"...\"节点值修饰//div[span[2]&gt;=8]代表div内部的span2号标签的值大于等于8 效果如图2 达到筛选的目的//span[i&gt;=1500]包含 contains(@属性名,\"属性值\") 只需要包含一部分就可以//div[contains(@id,\"qiushi_tag_数字\")]只要@id属性值中，包含一部分的东西就可以被选取到，达到选取整一页的效果//span[contains(text(),\"下一页\")] 文本内容包含下一页 ---------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------- 123456789通配节点语法* 匹配任何元素节点@* 匹配任何属性节点node() 匹配任何类型节点&#x2F;&#x2F;*[@id&#x3D;&quot;content&quot;]复合语法使用|&#x2F;&#x2F;td&#x2F;a|&#x2F;&#x2F;h2&#x2F;a lxml模块 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253使用方法from lxml import etreehtml = etree.HTML(text)ret_list = html.xpath(“xpath适配字符串)1 返回空列表2 返回字符串构成的列表3 返回由element对象构成的列表(可以继续xpath)from lxml import etreetext = ''' &lt;div&gt; &lt;ul&gt; &lt;li class=\"item-1\"&gt;&lt;a href=\"link1.html\"&gt;1 item&lt;/a&gt;&lt;/li&gt; &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;2 item&lt;/a&gt;&lt;/li&gt; &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;3 item&lt;/a&gt;&lt;/li&gt; &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;4 item&lt;/a&gt;&lt;/li&gt; &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;5 item&lt;/a&gt; &lt;/ul&gt; &lt;/div&gt;'''# 创建element对象html = etree.HTML(text) # response.contentprint(html.xpath('//a[@href=\"link1.html\"]/text()')[0]) # 返回一个列表取下标text_list = html.xpath('//a/text()')link_list = html.xpath('//a/@href')print(text_list)print(link_list)for text in text_list: myindex = text_list.index(text) link = link_list[myindex] print(text,link)\\for text,link in zip(text_list,link_list): print(text,link)# zip以相同索引遍历'''1 item['1 item', '2 item', '3 item', '4 item', '5 item']['link1.html', 'link2.html', 'link3.html', 'link4.html', 'link5.html']1 item link1.html2 item link2.html3 item link3.html4 item link4.html5 item link5.html''' 爬取百度贴吧 实现自动翻页提取标题和链接 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import requestsfrom lxml import etreeclass Tieba(object): def __init__(self, name): self.url = 'https://tieba.baidu.com/f?kw=&#123;&#125;'.format(name) self.headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' # 'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # 部分html代码会被写进注释里面，使用低端浏览器伪造就能获得没有被注释的代码，可以直接使用xpath &#125; self.proxies = &#123; 'http': 'http://106.15.197.250:8001' &#125; def get_data(self, url): response = requests.get(url, headers=self.headers, proxies=self.proxies) return response.content def parse_data(self, data): # 创建element对象 data = data.decode().replace(\"&lt;!--\", \"\").replace(\"--&gt;\", \"\") # decode之后把注释去掉 html = etree.HTML(data) # 网页检查，copy xpath找出xpath逻辑 # //*[@id=\"thread_list\"]/li[@class=\" j_thread_list clearfix thread_item_box\"]/div/div[2]/div[1]/div[1]/a # 其中li后面的是为了去除广告加的限制，并且li前的部分可以优化掉 # //li[@class=\" j_thread_list clearfix thread_item_box\"]/div/div[2]/div[1]/div[1]/a el_list = html.xpath('//li[@class=\" j_thread_list clearfix thread_item_box\"]/div/div[2]/div[1]/div[1]/a') # print(len(el_list)) data_list = [] for el in el_list: temp = &#123;&#125; temp['tittle'] = el.xpath('./text()')[0] # 返回的是列表，需要取索引 temp['link'] = 'http://tieba.baidu.com' + el.xpath('./@href')[0] # 源码中的href是一个后缀 data_list.append(temp) # 获取下一页 # 寻找翻页url尽量不用索引 try: next_url = 'https:' + html.xpath('//a[contains(text(),\"下一页\")]/@href')[0] except: next_url = None return data_list, next_url def save_data(self, data_list): for data in data_list: print(data) def run(self): # url # headers next_url = self.url while True: # 发送请求，获取响应 data = self.get_data(next_url) self.parse_data(data) # 从响应中提取数据，数据/翻页用的url data_list, next_url = self.parse_data(data) # 判断是否翻到最后一页 self.save_data(data_list) print(next_url) if next_url is None: breakif __name__ == '__main__': name = input(\"请输入:\") tieba = Tieba(name) tieba.run() selenium 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# from lxml import etree### text = '''# &lt;div&gt;# &lt;ul&gt;# &lt;li class=\"item-1\"&gt;&lt;a href=\"link1.html\"&gt;1 item&lt;/a&gt;&lt;/li&gt;# &lt;li class=\"item-1\"&gt;&lt;a href=\"link2.html\"&gt;2 item&lt;/a&gt;&lt;/li&gt;# &lt;li class=\"item-inactive\"&gt;&lt;a href=\"link3.html\"&gt;3 item&lt;/a&gt;&lt;/li&gt;# &lt;li class=\"item-1\"&gt;&lt;a href=\"link4.html\"&gt;4 item&lt;/a&gt;&lt;/li&gt;# &lt;li class=\"item-0\"&gt;&lt;a href=\"link5.html\"&gt;5 item&lt;/a&gt;# &lt;/ul&gt;# &lt;/div&gt;# '''# html = etree.HTML(text)# print(etree.tostring(html))# # etree.HTML能够自动补全html缺失的标签。## # selenium以及chromedriver安装 简单使用# # 是一个web自动化测试工具。from selenium import webdriverimport time# 创建浏览器对象# 通过制定chromedriver的路径来实例化driver对象，chromedriver放在当前目录# driver = webdriver.Chrome(executable_path='./chromedriver')# 因为已经设置过环境变量直接使用即可driver = webdriver.Chrome()driver.get('https://www.baidu.com')time.sleep(3)# 在百度搜索框中搜索关键词driver.find_element_by_id('kw').send_keys('你好') # 输入time.sleep(3)driver.find_element_by_id('su').click() # 点击time.sleep(6)# 退出driver.quit()# selenium 属性和方法# driver.page_source 当前浏览器渲染之后的网页源码# driver.current_url 重定向之后的当前url# close() 关闭标签# quit() 关闭浏览器# forward() backward() 前进后退from selenium import webdriverimport time# 创建浏览器对象driver = webdriver.Chrome()url = 'http://www.baidu.com'driver.get(url)# 显示源码print(driver.current_url)# driver.save_screenshot('baidu.png') # 一般用于保存网页快照和验证码。''' 元素定位 find_element_by_xxx'''# driver.find_element_by_xpath('//*[@id=\"kw\"]').send_keys('python3')# driver.find_element_by_id('su').click()# name css(#kw)time.sleep(3)# 通过链接文本进行元素定位# driver.find_element_by_link_text('新闻').click()driver.find_element_by_partial_link_text('新').click()# by tag少用，因为定位回来的比如div，只会返回第一个。# 一般只用于定位唯一标签，或者众多定位中的第一个time.sleep(3)driver.quit() selenium切换窗口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import timefrom selenium import webdriverurl = 'https://sg.58.com/'driver = webdriver.Chrome()driver.get(url)el = driver.find_element_by_xpath('/html/body/div[3]/div[1]/div[1]/div/div[1]/div[1]/span[1]/a')el.click()time.sleep(3)# print(driver.current_url)# print(driver.window_handles)driver.switch_to.window(driver.window_handles[-1])el_list = driver.find_elements_by_xpath('/html/body/div[6]/div[2]/ul/li/div[2]/h2/a')for el in el_list: print(el.text, el.get_attribute('href'))# 标签页切换# 获取窗口句柄 + 切换# current_windows = driver.window_handles# driver.switch_to.window(current_windows[0])# el.click() clear() send_keys()driver.quit()frame 自动登录from selenium import webdriverimport timeurl = 'https://qzone.qq.com/'driver = webdriver.Chrome()driver.get(url)# 切换# 接收id/元素driver.switch_to.frame('login_frame')# el = driver.find_by_xx# driver.switch_to.frame(el)driver.find_element_by_id('switcher_plogin').click()driver.find_element_by_id('u').send_keys('')driver.find_element_by_id('p').send_keys('')driver.find_element_by_id('login_button').click()time.sleep(10)driver.quit() selenium杂项 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import timefrom selenium import webdriver# url = 'http://www.baidu.com'driver = webdriver.Chrome()## driver.get(url)### # 转换字典# cookies = &#123;data['name']: data['value'] for data in driver.get_cookies()&#125;# # 删除cookie# # drive.delete_cookie('name') delete_all_cookies()## print(cookies)# driver.quit()# selenium执行js代码# js = 'xxx'# driver.execute_script(js)url = 'https://jn.lianjia.com/'driver.get(url)js = 'scrollTo(0,1300)'driver.execute_script(js)time.sleep(3)driver.find_element_by_xpath('//*[@id=\"good_house\"]').click()time.sleep(3)driver.quit()# 页面等待:# 强制等待 time.sleep()# 隐式等待 设置最大等待值，如果提前到了则结束等待# driver.implicitly_wait()设置时间(寻找元素的时候的时间等# 设置之后所有元素定位操作都会有最大等待时间。# 显式等待# chrome开启无界面模式option = webdriver.ChromeOptions()option.add_argument('--headless')option.add_argument('--disable-gpu')driver = webdriver.Chrome(chrome_options=option)# 修改代理option.add_argument('--proxy-server=http://xxxxxx')# 修改user-agent '--user-agent=# 也有不下载图片的配置，增加效率 xpath语法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354from selenium import webdriverimport timeclass Douyu(object): def __init__(self): self.url = 'https://www.douyu.com/directory/all' # url self.driver = webdriver.Chrome() # driver # get # parse def parse_data(self): time.sleep(1) room_list = self.driver.find_elements('xpath', '//*[@id=\"listAll\"]/section[2]/div[2]/ul/li/div') # print(len(room_list)) # 遍历 data_list = [] #print(room_list[4].find_element('xpath', './a/div[1]/div[1]/picture/img').get_attribute('src')) for room in room_list: temp = &#123;&#125; temp['title'] = room.find_element('xpath', './a/div[2]/div[1]/h3').text temp['type'] = room.find_element('xpath', './a/div[2]/div[1]/span').text temp['owner'] = room.find_element('xpath', './a/div[2]/div[2]/h2/div').text temp['num'] = room.find_element('xpath', './a/div[2]/div[2]/span').text data_list.append(temp) return data_list # //a/div[2]/div[1]/h3 由于是在当前节点继续使用xpath//要改成./ # save def save_data(self, data_list): # 存数据库 for data in data_list: print(data) # next def run(self): self.driver.get(self.url) while True: data_list = self.parse_data() self.save_data(data_list) try: el_next = self.driver.find_element('xpath', '//*[contains(text(),\"下一页\")]') el_next.click() except: breakif __name__ == '__main__': douyu = Douyu() douyu.run()","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Python爬虫学习笔记-1","date":"2021-11-18T11:45:38.000Z","path":"posts/b211fb9c.html","text":"Python爬虫学习笔记-1 基本概念 requests cookies 代理 moji词典post post数据来源 数据提取 基本概念 http超文本传输协议，默认端口号80。https：http+ssl（安全套接字层），即包含加密。默认端口号是443. 123456789101112131415161718192021222324252627282930313233常见的请求头和响应头Content-Type:(Type)请求内容类别 script jpg png等host:主机和端口号connection:连接类型 keep-alive 长链接 三次握手后就不需要再验证Ugrade-Insecure-Request:升级为https请求 1 0User-Agent:用户代理（浏览器名称）告诉浏览器 该浏览器类型版本号等信息 mozilla&#x2F;5.0 几乎所有浏览器都遵循此协议，用于传输该信息 提供系统信息和浏览器信息，（重要）referer:界面跳转处 即从哪里跳转过来的，防盗链（图片&#x2F;视频）cookie:保持状态Authorization:用于表示http协议中需要认真地认证信息。一般只会在自己测试的时候用上响应头set-cookie:对方浏览器设置cookie到用户浏览器的缓存常见状态码200 成功302 跳转303 post重定向307 get重定向403 资源不可用404 找不到页面500 服务器内部错误503 服务器由于维护或者负载过大未能响应。有可能会携带retry-after响应头，有可能因为爬虫频繁访问导 致服务器过载浏览器请求的过程：浏览器发送所有的请求并进行渲染。爬虫只发送指定请求，不会进行渲染骨骼文件 html静态文件肌肉文件 js&#x2F;ajax皮肤文件 css&#x2F;font&#x2F;图片从头往下找 document→其他类型文件找数据 requests 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import requestsr = requests.get('https://api.github.com/events')print(r)r = requests.post('https://httpbin.org/post', data=&#123;'key': 'value'&#125;)print(r)'''using the params keyword argument. As an example, if you wanted to pass key1=value1 and key2=value2 to httpbin.org/get, you would use the following code:'''payload = &#123;'key1': 'value1', 'key2': 'value2'&#125;r = requests.get('https://httpbin.org/get', params=payload)# can see that the URL has been correctly encoded by printing the URLprint(r.url)payload = &#123;'key1': 'value1', 'key2': ['value2', 'value3']&#125;r = requests.get('https://httpbin.org/get', params=payload)print(r.url)# responser = requests.get('https://api.github.com/events')r.encoding = 'utf-8'print(r.text)# 二进制响应内容print(r.content) # 返回值是b'[&#123;..&#125;]代表返回的是二进制内容# json格式r = requests.get('https://api.github.com/events')print(r.json())# 自带json解析# 返回原始响应内容 stream=True需要设置r = requests.get('https://api.github.com/events', stream=True)print(r.raw)print(r.raw.read(10))r = requests.get('https://httpbin.org/get')print(r.status_code)# 状态响应码 可以通过# r.raise_for_status() #抛出异常print(r.headers)# 访问headers属性r.headers.get('Content-Type')print(r.headers['Content-Type'])# allow_redirect 重定向 history上一次的历史访问 1234567891011121314151617181920212223242526272829303132333435363738394041424344import requestsurl='http://www.baidu.com'response = requests.get(url)# 手动设置编码格式response.encoding = 'utf8'# print(response.text)print(response.encoding)print(response.content.decode()) # 二进制响应源码 可以进行decode# 解决中文乱码问题response.content.decode() # 默认utf8# response.content.decode(\"GBK\")# gb2312 等# 常用属性# print(response.url)# print(response.status_code)# print(response.request.headers) # ！请求头# print(response.headers) # 响应头# print(response.request.__cookies) # 响应对应请求的cookie，返回cookiejar类型# print(response.cookies) # 响应的cookies# print(response.json()) # 自动将json字符串类型转为python数据类型，dict或者list'''上面的get方法由于没有修改user-agent所以会导致接收到的返回信息量小，被识别成了脚本'''# 发送带请求头的请求url = 'https://www.baidu.com/s?'headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36'&#125;# 参数字典data = &#123; 'wd': 'python'&#125;response1 = requests.get(url, headers=headers, params=data)print(len(response1.content)) # 告诉服务器用的是浏览器print(response1.url)with open(r'D:\\Backup\\桌面\\baidu1.html', 'wb') as stream: stream.write(response1.content) cookies 12345678910111213# 从浏览器中赋值user-agent和cookies# 在header中携带cookiesimport requestsurl = 'https://github.com/nari2021'# 构建请求头headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36', 'Cookie': 'ga=GA1.2.340065758.1586943648; _device_id=589968340f36ff816409b124bdc07683; _octo=GH1.1.575298197.1621002887; tz=Asia/Shanghai; has_recent_activity=1; user_session=TEqozV0IdjYptnZ3tDC4My37AEUGWDubLh0IkrM-yS6r5MNy; __Host-user_session_same_site=TEqozV0IdjYptnZ3tDC4My37AEUGWDubLh0IkrM-yS6r5MNy; tz=Asia/Shanghai; color_mode=&#123;\"color_mode\":\"auto\",\"light_theme\":&#123;\"name\":\"light\",\"color_mode\":\"light\"&#125;,\"dark_theme\":&#123;\"name\":\"dark\",\"color_mode\":\"dark\"&#125;&#125;; logged_in=yes; dotcom_user=nari2021; _gh_sess=+kk2YACc2LfG4KGsEFAuvCXTTKnhzUvIEXLx8amDrzYFf5y6L+jdLOH2dyt9osyka8y+LGuRJedkcIbIkuBwMyVOU5dwJDTBG9BbKbWxA9dxXqoWRESOP0ddrt8G2OXitkyB/GK2/D6FHnVxizVuE53uiMaQq1pjygjTYSBWzrPi2U6YtOHmUL6LYZHDkgpMx/JYuAUlcS3i6sXNNJzjPkSMTQ+Bh4t6+/L3fHIaMJZYWFQpp2iW1VRKbXhegb1WGBv9d2Zx//T0rlF4/UKZZMnMG5R5L2tqFOU87KQ5M2SVoCS7aWuHXiwomKYYMPe430R4AkPjsWd8U0OeL+xkx41fbckrh5AxbRBYCMIjbGXMH6oEigVBscikjpYH5YutqMO/SPL6JFOZqDD15BK6LTpeE6n7mL5XI62VcWXH6JorvZ0Jxt6Yfz0tQHA37CWjWtRLBDSOsewjZezovpbRD3mMnl5UXARYzMBDKyRa1Gu/9QaVtI5CmY9V5i29SToMdq04Kz/zR2J/RD9pIsGMF/8D0AFsByZAw+/sOUANMpiyGxFuGxebr+WN3uoMq7s0LhExUkUAa8STT1UuXx+tzIQIluQKOzRKBP5CUsUa7pAqaP+NuIEFSzS9/MIcTrZolEZbWdv2349/kjeLsxjKsx0xsQC2oEgxOroP8PStaNYGaUYipJjaFvLbbwsUAWO3HQCfqx8W8GBZWMKSXRlGB54pZsinERb80mDO99grQFw=--ZL4Jvz7h44UsWX7p--BxNJGa7h1luAjw4WXQkzTA=='&#125;response = requests.get(url, headers=headers)with open(r'D:\\Backup\\桌面\\github_with.html', 'wb') as f: f.write(response.content) 12345678910111213141516171819202122232425import requestsurl = 'https://github.com/nari2021'# 构建请求头headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36',&#125;# 构建字典temp = ' ga=GA1.2.340065758.1586943648; _device_id=589968340f36ff816409b124bdc07683; _octo=GH1.1.575298197.1621002887; tz=Asia/Shanghai; has_recent_activity=1; user_session=TEqozV0IdjYptnZ3tDC4My37AEUGWDubLh0IkrM-yS6r5MNy; __Host-user_session_same_site=TEqozV0IdjYptnZ3tDC4My37AEUGWDubLh0IkrM-yS6r5MNy; tz=Asia/Shanghai; color_mode=&#123;\"color_mode\":\"auto\",\"light_theme\":&#123;\"name\":\"light\",\"color_mode\":\"light\"&#125;,\"dark_theme\":&#123;\"name\":\"dark\",\"color_mode\":\"dark\"&#125;&#125;; logged_in=yes; dotcom_user=nari2021; _gh_sess=+kk2YACc2LfG4KGsEFAuvCXTTKnhzUvIEXLx8amDrzYFf5y6L+jdLOH2dyt9osyka8y+LGuRJedkcIbIkuBwMyVOU5dwJDTBG9BbKbWxA9dxXqoWRESOP0ddrt8G2OXitkyB/GK2/D6FHnVxizVuE53uiMaQq1pjygjTYSBWzrPi2U6YtOHmUL6LYZHDkgpMx/JYuAUlcS3i6sXNNJzjPkSMTQ+Bh4t6+/L3fHIaMJZYWFQpp2iW1VRKbXhegb1WGBv9d2Zx//T0rlF4/UKZZMnMG5R5L2tqFOU87KQ5M2SVoCS7aWuHXiwomKYYMPe430R4AkPjsWd8U0OeL+xkx41fbckrh5AxbRBYCMIjbGXMH6oEigVBscikjpYH5YutqMO/SPL6JFOZqDD15BK6LTpeE6n7mL5XI62VcWXH6JorvZ0Jxt6Yfz0tQHA37CWjWtRLBDSOsewjZezovpbRD3mMnl5UXARYzMBDKyRa1Gu/9QaVtI5CmY9V5i29SToMdq04Kz/zR2J/RD9pIsGMF/8D0AFsByZAw+/sOUANMpiyGxFuGxebr+WN3uoMq7s0LhExUkUAa8STT1UuXx+tzIQIluQKOzRKBP5CUsUa7pAqaP+NuIEFSzS9/MIcTrZolEZbWdv2349/kjeLsxjKsx0xsQC2oEgxOroP8PStaNYGaUYipJjaFvLbbwsUAWO3HQCfqx8W8GBZWMKSXRlGB54pZsinERb80mDO99grQFw=--ZL4Jvz7h44UsWX7p--BxNJGa7h1luAjw4WXQkzTA=='cookie_list = temp.split('; ')# 拆分成键值对cookies = &#123;&#125; # dictfor cookie in cookie_list: cookies[cookie.split('=')[0]] = cookie.split('=')[-1]print(cookies)# 获取键值对# split拆分0赋给key cookies[key] = split-1# 可以优化为# cookies = &#123;cookies[cookie.split('=')[0]]: cookie.split('=')[-1]# for cookie in cookie_list&#125;response = requests.get(url, headers=headers, cookies=cookies)with open(r'D:\\Backup\\桌面\\github_with.html', 'wb') as f: f.write(response.content) 12345678910111213141516''' cookiejar对象转换 requests.utils.dict_from_cookiejar()'''import requestsurl = 'http://www.baidu.com'response = requests.get(url)# print(response.cookies) # cookiejar对象dict_cookies = requests.utils.dict_from_cookiejar(response.cookies)print(dict_cookies)jar_cookies = requests.utils.cookiejar_from_dict(dict_cookies)print(jar_cookies)# 平时一般用不上。 123456import requests# timeout参数url = 'https://twitter.com'response = requests.get(url, timeout=10)print(response.text)# 超时会报错 代理 12345678910111213141516171819202122232425262728293031323334353637# 代理服务器会帮助我们转发请求# 知道转发的地址为正向代理# 根据匿名度（对于目标服务器# 1透明代理 2匿名代理 3高匿代理# remote_addr = proxy ip# http_via = proxy ip# http_x_forwarded_for = your ip# 2# remote_addr = proxy ip# http_via = proxy ip# http_x_forwarded_for = proxy ip# 3# remote_addr = proxy ip# http_via = not determined# http_x_forwarded_f or = not determined# 三者在服务器收到的请求头如此# 一般使用高匿代理# 根据协议# http https socks(只是对包进行转发# 一般只用前两种# 使用代理proxies = proxies(字典# 格式: 'http': 'http://xxxx'import requestsurl = 'http://www.baidu.com'proxies = &#123; 'http': 'http://112.13.183.101:9091'&#125;response = requests.get(url, proxies=proxies)print(response.text)# 代理使用成功不会报错，能成功获取响应# 如果失败，1卡住2报错 moji词典post 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# verify参数忽略CA证书# verify = false# post请求 传入dataimport requestsimport jsonclass King(object): def __init__(self, word): self.url = 'https://api.mojidict.com/parse/functions/search_v3' self.headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; self.data = &#123; \"langEnv\": \"zh-CN_ja\", \"searchText\": word, \"_ApplicationId\": \"E62VyFVLMiW7kvbtVq3p\", \"_ClientVersion\": \"js2.12.0\", \"_InstallationId\": \"7d959a18-48c4-243c-7486-632147466544\" &#125; def get_data(self): response = requests.post(self.url, data=self.data, headers=self.headers) return response.content def run(self): # 编写爬虫逻辑 # url headers # data字典 # 发送请求 获取响应 数据解析 response = self.get_data() self.parse_data(response) @staticmethod def parse_data(data): dict_data = json.loads(data) print(dict_data['result']['searchResults'][0]['excerpt'])if __name__ == '__main__': word = input('请输入单词:') king = King(word) king.run() # with open(r'D:\\Backup\\桌面\\baidu1.html', 'wb') as stream: # stream.write(king.get_data()) 数据来源 固定值 抓包比较不变值 输入值 抓包比较根据自身变化值 预设值1 静态值，需要提前从静态html中获取（正则）。例如:token值，可能会被存储在页面html代码内部，可以通过正则表达式获取。 预设值2 提前发请求，需要对指定地址单独发送请求获取数据 客户端中生成的 分析js等，模拟生成数据。时间戳等 session 状态保持，能够自动处理发送请求中获取响应中产生的cookie，作用:自动保持cookie。连续请求中，下一次请求会带上前一次的cookie。使用方式: 1234session = requests.session()response = session.get().../post...# 与requests. 基本一致，但是能保持cookie 使用session进行状态保持 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import requestsimport re# 正则def login(): # session session = requests.session() # headers session.headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' &#125; # url1获取token url1 = 'https://github.com/session' # 发送请求获取响应 res_1 = session.get(url1).content.decode() # 正则提取 token = re.findall('name=\"authenticity_token\" value=\"(.*?)\"', res_1) # ['gWvx84OLuWvboCCvBUKlZj3vCflbuOdeqKxAqMe4uxubulvNCkkMhVoRIRL1aRzrgD3TAxanL3I79ldEzaTL/g=='] # .任何 *所有 ？非贪婪 # url2-登录 url2 = 'https://github.com/session' # 构建表单数据 data = &#123; \"commit\": \"Sign in\", \"authenticity_token\": token, \"login\": \"yuhongf@126.com\", \"password\": \"yuhongf990319?\", \"webauthn - support\": \"supported\" &#125; print(data) # 发送请求登录 session.post(url2, data=data) # url3 验证 url3 = 'https://github.com/nari2021' response = session.get(url3) with open(r'D:\\Backup\\桌面\\test1.html', 'wb') as stream: stream.write(response.content)if __name__ == '__main__': login() 数据提取 123456789101112131415161718192021222324252627282930313233343536373839404142''' 数据提取 响应分类 结构化 json数据 json模块 re模块 jsonpath模块 xml数据（少数 re模块 lxml模块 非结构化 html re正则 lxml模块 xpath语法 beautiful soup pyquery（css选择器'''# jsonpath 多层嵌套的复杂字符直接提取from jsonpath import jsonpath# 语法# ret = jsonpath(a,'jsonpath语法字符串')# 常用 三个# $ 根节点 最外层大括号# . 直接子节点# ..内部任意位置，子孙节点data = &#123;'key1': &#123;'key2': &#123;'key3': &#123;'key4': &#123;'ket5': &#123;'key6': 'python'&#125;&#125;&#125;&#125;&#125;&#125;print(data)# jsonpath返回结果为列表 需要使用索引print(jsonpath(data, '$..key6')[0])# w3school xpath语法 xml html区别# 谷歌浏览器xpath helper插件安装和使用# //相对路径 html/head/title //title# .当前 ..上一层# //tittle/text()# //link/@href 选取属性 用于数据提取，永远放在最后","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://nari2021.github.io/my-blog/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"JS学习笔记-4","date":"2021-10-20T07:04:27.000Z","path":"posts/1efe1965.html","text":"JavaScript学习笔记-4 jsonp jQuery jQuery-遍历-ajax jQuery-event-animate jQuery插件 jQuery插件实现放大镜 设计模式 jsonp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;AJax同源策略&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" name=\"\" id=\"\" value=\"\" /&gt; &lt;script type=\"text/javascript\"&gt; /* function getData(data)&#123; console.log(data); &#125; var script = document.createElement('script'); script.id = 'jsonp'; script.src = 'jsonp.js'; document.body.appendChild(script); */ /* 相当于往页面插入了一个script 设置id 和 标签内部内容 由于src引用的是js文件中 getData(&#123; name: 'xiaomao', age: 20 &#125;) getData在上面function已经声明过了 相当于在一个script标签里面写了一个函数的调用 传入了一个对象参数 */ /* https://www.baidu.com/s?wd=q&amp;rsv_spt=1&amp;rsv_iqid=0xcaca0e0a0002e7bb&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=baiduhome_pg&amp;rsv_enter=0&amp;rsv_dl=tb&amp;oq=q&amp;rsv_btype=t&amp;rsv_t=9c1f8saDOrNSdA8YPKsiO1sWq7cMLGmnJ18KITbzappRLWlE69Vv2%2FiuZPDIo2CLf0q2&amp;rsv_pq=e2606b9900023be9 https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=baiduhome_pg&amp;wd=qianfeng&amp;rsv_spt=1&amp;oq=q&amp;rsv_pq=b12890cb00003653&amp;rsv_t=31bc0Vg2aU%2B0EZehqxq8KTUhEgfq4or0ZLYmQD9Ya3s39DLr%2Bzq9gF0zAg57PB%2BmOJPY&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=8&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=t&amp;inputT=1694&amp;rsv_sug4=2488 */ function getData(data)&#123; var script =document.querySelector('jsonp'); script.parentNode.removeChild(script); $('ul').html(''); for(var i = 0;i&lt;data.s.length;i++)&#123; $('&lt;li&gt;' + data.s[i] + '&lt;/li&gt;').appendTo('ul'); &#125; &#125; function getlist(wd)&#123; var script =document.createElement('script'); script.id='jsonp'; script.src = 'https://www.baidu.com/s?cb=getData&amp;wd=' + wd; document.body.appendChild(script); &#125; $('input').keyup(function()&#123; var wd =$(this).val(); getlist(wd); &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- 在请求的时候浏览器会检查是否是同一个源 script不会检查。 --&gt; JQuery 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;jquery&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; div&#123; height: 100px; width: 100px; cursor: pointer; &#125; .play&#123; background: #00FF00; &#125; .pause&#123; background: gray; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" name=\"\" id=\"\" value=\"\" /&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;/ul&gt; &lt;label&gt; 选中&lt;input type=\"checkbox\" checked=\"true\" id=\"\" value=\"\" /&gt; &lt;/label&gt; &lt;span&gt; &lt;input type=\"checkbox\" checked=\"true\" id=\"\" value=\"\" /&gt; &lt;input type=\"checkbox\" checked=\"true\" id=\"\" value=\"\" /&gt; &lt;input type=\"checkbox\" checked=\"true\" id=\"\" value=\"\" /&gt; &lt;/span&gt; &lt;div class=\"pause\"&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; // 作为选择器 选取元素后操作。 /* $('li').html('li'); */ /* alert($('li').html()); */ // val属性 $('input').keyup(function()&#123; var v = $(this).val(); if(v.slice(-2) !== 'px')&#123; $(this).val(v + 'px'); &#125; &#125;) $('input[type=checkbox]').change(function()&#123; // attr 属性是读取代码中默认的 想修改check属性使用prop属性 console.log($(this).prop('checked')); &#125;) // toggle $('div').click(function()&#123; $(this).toggleClass('pause'); // toggle作用是如果已经存在则删除 如果没有则添加 $(this).toggleClass('play'); &#125;) // 全选框 $('label input').change(function()&#123; var isChecked = $(this).prop('checked'); $('span input').prop('checked', isChecked); &#125;) $('span input').change(function()&#123; // 全选的数量等于全部框的数量 var allCount = $('span input').length; var checkCount = $('span input:checked').length; var isAllChecked = allCount === checkCount; $('label input').prop('checked',isAllChecked) &#125;) /* $ 就是 JQuery */ &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- 解决跨域问题，cors请求。 在头信息会增加一个字段 // origin字段 --&gt; JQuery-遍历-ajax 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div#container&gt;ul.list&gt;(li.item&gt;p&#123;$&#125;)*5 --&gt; &lt;div id=\"container\"&gt; &lt;ul class=\"list\"&gt; &lt;li class=\"item\"&gt; &lt;p&gt;1&lt;/p&gt; &lt;/li&gt; &lt;li class=\"item\"&gt; &lt;p&gt;2&lt;/p&gt; &lt;/li&gt; &lt;li class=\"item\"&gt; &lt;p class=\"vip\"&gt;3&lt;/p&gt; &lt;/li&gt; &lt;li class=\"item\"&gt; &lt;p&gt;4&lt;/p&gt; &lt;/li&gt; &lt;li class=\"item\"&gt; &lt;p&gt;5&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; /* eq选择第几个 children为孩子 parent parents 选取所有父元素 find 选取后代所有元素 next prev */ $('li:eq(1)').children().css('background','red'); $('li:eq(1)').parent().css('color','yellow'); $('li:eq(1)').parents('div#container').append('&lt;h2&gt;新元素&lt;/h2&gt;'); $('#container').find('p.vip').css(&#123; background:'black', color:'white' // 要加引号 &#125;) /* jquery ajax 源生ajax open创建新对象 配置 监听等 请求json文件 &#123; \"name\" : \"黄棕\", \"age\": 65, hobby: \"拆迁\" &#125; */ $.ajax(&#123; type: 'get', url: 'person.json', //如果想传参 data:&#123; name: '黄忠' &#125;, /* 此处传入的参数例如name 黄忠按下F12后浏览器内 有个get命令 http://127.0.0.1:8848/HTMLCSS/js%E5%AE%9E%E4%BE%8B/person.json?name=%E9%BB%84%E5%BF%A0 将后面部分复制 控制台使用 decodeURIComponet('') 就可以解码 */ // 请求成功的时候返回的数据 success:function(resp)&#123; alert(resp.hobby); &#125;, error:function()&#123; alert(\"失败\"); &#125; &#125;) // 解决回调方法 /* 当调用成功返回done的回调 done后面链接fail的回调 这样延时能解决无线回调 $.ajax(&#123; type: 'get', url: 'person.json' &#125;).done(function()&#123; &#125;).fail(function()&#123; &#125;) */ // type get可以省略 $.ajax(&#123; type: 'get', url: '#1' &#125;).done(function()&#123; return $.ajax(&#123; url: '#2' &#125;).done(function()&#123; $.ajax(&#123; /// ..... &#125;) &#125;) &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JQuery-event-animate 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;/ul&gt; &lt;script type=\"text/javascript\"&gt; // on方法传入绑定event名，和function // 同时支持连续传入on方法 /* $('li').on('mouseover',function()&#123; $(this).css('background','red'); &#125;).on('mouseout',function()&#123; $(this).css('background','green') &#125;) */ // off方法 移除事件绑定 1 传入事件类型 2 传入事件回调名 // 由于一般使用的都是匿名函数 直接移除名称 //$('li:eq(3)').off('mouseover'); // 如果后续使用了appendto添加了新的元素想加入新方法↓ 使用代理 $('ul').on('mouseover','li:even',function()&#123; $(this).css('background','red'); &#125;).on('mouseout',function()&#123; $(this).css('background','green') &#125;) $('&lt;li&gt;new li&lt;/li&gt;').appendTo('ul'); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; div&#123; width: 200px; height: 200px; background: cornflowerblue; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"&gt; &lt;/div&gt; &lt;button type=\"button\"&gt;显示&lt;/button&gt; &lt;button type=\"button\"&gt;隐藏&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; // show hide方法 传入时间 /* $('button:first').click(function()&#123; $('div').show(3000); &#125;) $('button:last').click(function()&#123; $('div').hide(2000); &#125;) */ // fadein out /* $('button:first').click(function()&#123; $('div').fadeIn(3000); &#125;) $('button:last').click(function()&#123; $('div').fadeOut(2000); &#125;) */ // slideDown slideUp 上下收出现 // animate 不用加px animate(&#123;&#125;) 小括号内中括号传入参数 $('button:first').click(function()&#123; $('div').animate(&#123; width:500, height:600 &#125;,5000); &#125;) $('button:last').click(function()&#123; $('div').animate(&#123; width:200 &#125;,5000).animate(&#123; height:200 &#125;,5000); &#125;) // stop方法可以停止当前队列动画 停止当前并继续下一个动画 // 如果往stop内传入参数true 则停止所有队列动画 /* 此处在animate后面再连接一个animate可以实现先后变化效果 相当于一个队列 */ &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JQuery插件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; div&#123; width: 200px; height: 200px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"&gt; &lt;/div&gt; &lt;div id=\"\"&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; /* plugin 定义一个新的jquery插件 1 jquery插件，定义在jquery.fn基础上的 2 命名冲突$的解决 3 循环jquery中某个元素 4 在函数中，将jquery返回(this) */ // 使用一个立即执行函数解决命名冲突 (function($)&#123; //形参用$接收实参 // 此时就算$被占用，但依旧指向jquery 从而避免命名冲突 $.fn.extend(&#123; // fn组件下的 定义一个新的插件ramdoncolor ramdonColor:function()&#123; function random()&#123; var r = Math.floor(Math.random()*256); var g = Math.floor(Math.random()*256); var b = Math.floor(Math.random()*256); return 'rgb(' + r + ','+g+','+b+')' ; &#125; // each遍历方法接受一个回调函数 //function第一个参数index 第二个el元素本身 //相当于each中的this 此处this为遍历中的元素 this.each(function(index,el)&#123; $(this).css(&#123; background:random() &#125;) &#125;) return this; // plugin第四步返回this // 返回$选择器所有元素组成的伪数组 &#125; &#125;) &#125;)(jQuery) // 传递实参jquery /* 上面定义完之后可以用$直接调用 */ $('div').ramdonColor(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JQuery插件实现放大镜 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"../jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; *&#123; margin: 0; padding: 0; &#125; .magnifier .left&#123; width: 240px; height: 150px; float: left; position: relative; &#125; .magnifier .left img&#123; width: 240px; height: 150px; &#125; .magnifier .left.mask&#123; width: 100%; height: 100%; position: absolute; left: 0; top: 0; background-color: black; opacity: 0; &#125; .magnifier .float&#123; width: 50px; height: 50px; opacity: 0.5; position: absolute; left: 0; top: 0; display: none; &#125; .magnifier .right&#123; height: 200px; width: 200px; background-image: url(../img/QQ图片20210922204422.png); float: left; margin-left: 50px; display: none; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"magnifier\"&gt; &lt;div class=\"left\"&gt; &lt;img src=\"../img/QQ图片20210922204422.png\" &gt; &lt;div class=\"float\"&gt;&lt;/div&gt; &lt;div class=\"mask\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"right\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script src=\"magnifier.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; (function($)&#123; $.fn.extend(&#123; magnifier:function()&#123; this.each(function()&#123; var that = this; $('.left',this).mousemove(function(evt)&#123; var x = evt.offsetX; var y = evt.offsetY; x = x - $('.float').width()/2; y = y - $('.float').height()/2; if(x&lt;0)&#123; x=0; &#125; if(y&lt;0)&#123; y=0; &#125; // 防止移除 还需要加其他判断条件 $('.float').css(&#123; left: x, top:y &#125;); $('.right',that).css(&#123; backgroundPosition: x *-4+'px '+y*-4+'px' &#125;) &#125;).mouseover(function()&#123; $('.left .float, .right',that).show(); &#125;).mouseout(function()&#123; $('.left .float, .right',that).hide(); &#125;); &#125;) &#125; &#125;) &#125;)(jQuery) $('.magnifier').magnifier(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 设计模式 由于以前修过java的设计模式课程，所以此处笔记会相应减少并整合一起。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://nari2021.github.io/my-blog/tags/JavaScript/"}]},{"title":"JS学习笔记-3","date":"2021-10-18T10:06:16.000Z","path":"posts/809a8cc6.html","text":"JavaScript学习笔记-3 es6 animation 类的构造 继承 ajax-get ajax-post promise chain-promise es6 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; /* let 相当于 var 不允许重复定义，不允许声明提升等 const */ /* let a=10; console.log(a); */ /* 解构赋值 let不能重复声明但是可以赋值 */ /* let [a,b,c] = [1,2,3]; */ /* let [a=3,b] = [2]; let [a,b] = &#123;a:\"aaa\",b:\"bbb\"&#125;; */ /* let (a:b) =(a:111); */ /* 模板字符串 */ /* let obj = &#123;\"name\":\"john\",\"age\":20&#125;; // 中括号 let &#123;name,age&#125; = obj; // 反引号 console.log(`$&#123;name&#125;的年龄是$&#123;age&#125;`); // 中括号 var fun = function()&#123; return 1; &#125; // 用下面代替 let foo1 = () =&gt; 1; let foo2 =(a,b) =&gt; a+b; */ // =&gt;要区分 var obj = &#123; \"name\":\"john\", \"sayhello\":()=&gt;&#123; //console.log(this); setTimeout(()=&gt;(console.log(this.name)),1000); &#125; &#125; obj.sayhello(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; animation 123456789101112131415161718192021222324252627282930function getstyle(el, property) &#123; if (getComputedStyle) &#123; return getComputedStyle(el)[property]; &#125; else &#123; return el.currentStyle[property]; &#125;&#125;//ie浏览器兼容function animate(el, properties) &#123; clearInterval(el.timerId); el.timerId = setInterval(function() &#123; for (var property in properties) &#123; var current; var target = properties[property]; if (property === 'opacity') &#123; current = Math.round(parseFloat(getstyle(el, property)) * 100); var speed = (target - current) / 30; speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); el.style[property] = (current + speed) / 100; &#125; else &#123; current = parseInt(getstyle(el, property)); var speed = (target - current) / 30; speed = speed &gt; 0 ? Math.ceil(speed) : Math.floor(speed); el.style[property] = current + speed + 'px'; &#125; &#125; &#125;, 20)&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"animation.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; *&#123; margin: 0; padding: 0; &#125; ul&#123; list-style: none; &#125; .slider&#123; width: 700px; height: 400px; border: 5px solid crimson; position: relative; &#125; .slider .list .item&#123; position: absolute; left: 0; top: 0; opacity: 0; &#125; .slider .list .item:first-of-type&#123; opacity: 1; &#125; .slider .list .item img&#123; width: 700px; height: 400px; display: block; &#125; .slider .prev&#123; position: absolute; top: 300px; left: 0; &#125; .slider .next&#123; position: absolute; top: 300px; right: 0; &#125; .slider .pagination .bullet&#123; width: 20px; height: 20px; background-color: black; margin-left: 5px; float: left; border: 2px solid yellow; cursor: pointer; z-index: 100; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"slider\"&gt; &lt;ul class=\"list\"&gt; &lt;li class=\"item\"&gt;&lt;img src=\"../新网课/img/0.png\" alt=\"\"&gt;&lt;/li&gt; &lt;li class=\"item\"&gt;&lt;img src=\"../新网课/img/1.png\" alt=\"\"&gt;&lt;/li&gt; &lt;li class=\"item\"&gt;&lt;img src=\"../新网课/img/2.png\" alt=\"\"&gt;&lt;/li&gt; &lt;li class=\"item\"&gt;&lt;img src=\"../新网课/img/3.png\" alt=\"\"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;button class=\"prev\"&gt;prev&lt;/button&gt; &lt;button class=\"next\"&gt;next&lt;/button&gt; &lt;ul class=\"pagination\"&gt; &lt;li class=\"bullet\"&gt;1&lt;/li&gt; &lt;li class=\"bullet\"&gt;2&lt;/li&gt; &lt;li class=\"bullet\"&gt;3&lt;/li&gt; &lt;li class=\"bullet\"&gt;4&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; //立即执行函数 (function()&#123; var prevIndex, nextIndex; var len; init(); function init()&#123; prevIndex = 0; nextIndex = 0; len = document.querySelectorAll('.list .item').length; document.querySelector('.prev').onclick = function()&#123; slidePrev(); &#125; document.querySelector('.next').onclick = function()&#123; slideNext(); &#125; &#125; function slidePrev()&#123; prevIndex = nextIndex; nextIndex--; if(nextIndex === len -1)&#123; nextIndex = len - 1; &#125; slideTo(prevIndex,nextIndex); &#125; function slideNext()&#123; prevIndex = nextIndex; nextIndex++; if(nextIndex === len)&#123; nextIndex =0; &#125; slideTo(prevIndex,nextIndex); &#125; function slideTo(prev,next)&#123; var lis = document.querySelectorAll('.list .item'); animate(lis[prev],&#123;opacity:0&#125;); animate(lis[next],&#123;opacity:100&#125;); &#125; var bullets = document.querySelectorAll('.slider .pagination .bullet'); for(var i = 0;i&lt;bullets.length;i++)&#123; bullets[i].index=i; bullets[i].onclick = function()&#123; prevIndex =nextIndex; nextIndex =this.index; slideTo(prevIndex,nextIndex) &#125; &#125; &#125;)() &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; animation 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; // 构造函数 function Person(name,age)&#123; this.name = name; this.age = age; this.sayHello = function()&#123; alert(this.name); &#125; &#125; var p = new Person(\"张三\",15); p.sayHello(); function Student(name,age,id)&#123; Person.apply(this,[name,age]); // Person.call(this,name,age); this.id = id; this.study()&#123; alert(this.id + 'is learning!'); &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 继承 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; function Person() &#123; &#125; Person.prototype.name = \"zhangsan\"; Person.prototype.age = 18; Person.prototype.sayHello = function() &#123; alert(this.name); &#125; var p = new Person(); p.sayHello(); // __proto__ 指向构造函数的原形 function Student() &#123; &#125; Student.prototype = Object.create(Person.prototype); /////////////////////////////////////////////// function Person() &#123; this.name = name; this.age = age; &#125; Person.prototype.sayHello = function() &#123; alert(this.name); &#125; function Student(name, age, id) &#123; Person.apply(this, [name, age]); this.id = id; &#125; Student.prototype = Object.create(Person.prototype); student.prototype.study = function() &#123; &#125; // 将属性写在构造函数，将方法写在原形中 // 实现组合继承 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; ajax-get 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;/h1&gt; &lt;script type=\"text/javascript\"&gt; // 1创建ajax对象 // 4监听对象 ←必须先监听 // 2打开对象 // 3发送请求 var xhr = new XMLHttpRequest(); // 4 xhr.onreadystatechange = function()&#123; // 当xhr内readystate属性发生变化 // readystate: // 0 ==&gt; xhr 对象已经创建，但是还未被初始化 // 1 ==&gt; xhr 对象调用了open // 2 ==&gt; xhr 已经发送了ajax请求 // 3 ==&gt; 已经返回了部分数据 // 4 ==&gt; 数据全部返回 if(xhr.readyState !== 4)&#123; return; &#125; if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;=300)&#123; // 数据放在了xhr.responseText的string属性中 // innerHTML Text(能够显示换行) document.querySelector('h1').innerText =xhr.responseText; &#125;else&#123; console.log(\"请求失败\"); &#125; //正常情况下 status值在200-300说明请求是成功的 &#125; xhr.open('get','ajax.txt',true); // 第一个参数get/post // 第二个参数请求的对象 // 第三个参数是异步或是同步 true 异步 // 3发送请求 xhr.send(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- ajax Asynchronous JavaScript And XML 通过异步加载数据实现页面局部刷新的技术 核心对象 XMLHttpRequest get post方式 --&gt; ajax-post 需要配置服务器，编写一个简单的php 123456789&lt;?php $user = $_POST['user']; $password = $_POST['password']; if ($user == 'gap' &amp;&amp; $password == '123456')&#123; echo '&#123;\"result\":true&#125;'; &#125;else&#123; echo '&#123;\"result\":false&#125;'; &#125; 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; // 1 创建xhr对象 var xhr = new XMLHttpRequest(); // 4 监听数据返回 xhr.onreadystatechange = function()&#123; if(xhr.readyState !==4)&#123; return; &#125; if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt;= 300)&#123; var resp = JSON.parse(xhr.responseText); if(resp.result)&#123; alert(\"登陆成功\"); &#125;else&#123; alert(\"登录失败\"); &#125; &#125;else&#123; console.log(\"请求失败\"); &#125; &#125; // 2 配置对象 xhr.open('POST',\"login.php\",true); // 3 send xhr.setRequestHeader('Content-Type','application/x-www-form-urlcoded'); // url表单格式解析 指明body中数据格式 也可改为json格式 xhr.send('user=gap&amp;&amp;password=123456'); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; promise 123456789101112131415161718192021222324252627&lt;script type=\"text/javascript\"&gt; /* json -&gt; js JSON.parse(data) js -&gt; json JSON.stringify() */ // 回调地狱 x = getData(); y = getMoreData(x); z = getMoreData(y); // 此处函数由于是同步的，如果x没哟值会导致后面两个函数出问题 /* 为此引出下面的解决方法 */ getData(function(x)&#123; getMoreData(x,function(y)&#123; getMoreData(y,function(z)&#123; // process z // 回调过多 &#125;) &#125;) &#125;) /* 但由于以上方法会导致维护困难 引出了promise对象。 */ &lt;/script&gt; chain-promise 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"jQuery.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;&lt;/p&gt; &lt;script type=\"text/javascript\"&gt; /* var article = ''; $.get('test/test1.txt',function(p1)&#123; article += p1 + '&lt;br /&gt;'; $.get('test/test1.txt',function(p2)&#123; article += p2 + '&lt;br /&gt;'; $.get('test/test3.txt',function(p3)&#123; article += p3 + '&lt;br /&gt;'; $.get('test/test4.txt',function(p4)&#123; article += p4 + '&lt;br /&gt;'; $('p').html(article); &#125;) &#125;) &#125;) &#125;) */ function getPara1()&#123; return new Promise(function(resolve,reject)&#123; $.get(\"test/test1.txt\",function(p1)&#123; resolve(p1); &#125;) &#125;) &#125; function getPara2()&#123; return new Promise(function(resolve,reject)&#123; $.get(\"test/test2.txt\",function(p2)&#123; resolve(p2); &#125;) &#125;) &#125; function getPara3()&#123; return new Promise(function(resolve,reject)&#123; $.get(\"test/test3.txt\",function(p3)&#123; resolve(p3); &#125;) &#125;) &#125; function getPara4()&#123; return new Promise(function(resolve,reject)&#123; $.get(\"test/test4.txt\",function(p4)&#123; resolve(p4); &#125;) &#125;) &#125; var article = \"\"; getPara1().then(function(p1)&#123; article += p1 +'&lt;br /&gt;'; return getPara2(); &#125;).then(function(p2)&#123; article += p2 +'&lt;br /&gt;'; return getPara3(); &#125;).then(function(p3)&#123; article += p3 +'&lt;br /&gt;'; return getPara4(); &#125;).then(function(p4)&#123; article += p4 +'&lt;br /&gt;'; $('p').html(article); &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;效果paragraph1paragragh2paragraph3paragraph4","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://nari2021.github.io/my-blog/tags/JavaScript/"}]},{"title":"JS学习笔记-2","date":"2021-10-16T05:25:11.000Z","path":"posts/f79dbc50.html","text":"JavaScript学习笔记-2 事件event 默认事件阻止 事件监听器 cookie cookie实现七天免登陆 正则表达式 事件event：包含一个鼠标移动显示坐标 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; div&#123; position: relative; width: 500px; height: 500px; border: 1px solid red; &#125; span&#123; position: absolute; bottom: 0; &#125; &lt;/style&gt; &lt;/head&gt; &lt;div&gt; &lt;body&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var oDiv = document.getElementsByTagName(\"div\")[0]; var oSpan = oDiv.children[0]; oDiv.onmousemove = function(e)&#123; var evt = e || event; var x = evt.clientX; var y = evt.clientY; oSpan.innerHTML = x + \",\" + y +\"px\"; &#125; oDiv.onmouseout = function()&#123; oSpan.innerHTML = \"\"; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- 事件 on + event onmouseover 鼠标移入 onmousedown onclick 同时包含了onmouseup 鼠标松开 鼠标点击 console.log(); oForm.onsubmit = function()&#123; console.log(\"submit\"); return false; //把默认行为去除 &#125; onfocus onblur onchange oninput var evt = e||event; console.log(evt); 事件对象event e.clientX,e.clintY e.pageX Y e.offsetX Y--&gt;&lt;!-- onkeypress 按下字符键时触发 onkeydown 按下任意键 事件 不活，目标，冒泡 evt.cancelBubble = true 取消冒泡 evt.stopPropagation(); onclick = function(e)&#123; var evt = e||event; var _target = evt.target || evt.srcElement; // 兼容性 if(_target.nodeName.toUpperCase == \"Li\")&#123; console.log(_target.innnerHTML); &#125; &#125; --&gt; &lt;!-- 事件默认行为的阻止 event.preventDefault event.returnValue = false; return false; --&gt; 效果如图: 默认事件阻止 12345678910111213141516&lt;script type=\"text/javascript\"&gt; var oLink = document.getElementsByTagName(\"a\")[0]; oLink.onclick = function(e)&#123; var evt = e || event; console.log(\"aaa\"); // 因为页面刷新后就接收不到 为了能接收到上面的信息 evt.preventDefault(); evt.returnValue = false; return false; //阻止刷新 &#125; document.oncontextmenu = function()&#123; return false; //阻止默认的右键菜单 &#125; &lt;/script&gt; 事件监听器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; #outer&#123; width: 200px; height: 200px; background: red; &#125; #inner&#123; width: 100px; height: 100px; background: blue; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"outer\"&gt; &lt;div id=\"inner\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var outer = document.getElementById(\"outer\"); var inner = document.getElementById(\"inner\"); outer.addEventListener(\"click\",foo,false); outer.addEventListener(\"click\",bar,false); outer.removeEventListener(\"click\",foo); function foo()&#123; console.log(\"outer1\"); &#125; function bar()&#123; console.log(\"outer2\"); &#125; // 为保证兼容性 function addEvent(obj,type,fun)&#123; if(obj.addEventListener)&#123; obj.addEventListener(type,fun,false); &#125;else&#123; obj.attachEvent(\"on\" + type,fun); &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- DOM2级事件 添加事件监听器 addEventListener(事件名，处理函数，布尔值); false 冒泡 true捕获 事件名不需要on 移除 removeEventListener(事件名，处理函数) IE下: attachEvent(事件名，处理函数) detachEvent(事件名，处理函数) 这里的事件要加on --&gt; cookie 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; var oDate = new Date(); oDate.setDate(oDate.getDate()+3); // 设置cookie 3天后过期 document.cookie = \"username=honny；expires=\" + oDate; // 查询cookie console.log(document.cookie); /* 不设置有效期关闭浏览器后会消失 */ //删除cookie /* 可以将oDate的值减去一个数，就默认过期可以删除 */ // 封装cookie操作 function setCookie(name,value,day)&#123; var oDate = new Date(); oDate.setDate(oDate.getDate() + day); document.cookie = name + \"=\" + value + \";expires=\" + oDate; &#125; setCookie(\"name1\",\"honny\",1); setCookie(\"name2\",\"honny2\",1); function getCookie(name)&#123; var str = document.cookie; var arr = str.split(\"; \"); for(var i = 0;i = arr.length;i++)&#123; var arr1 = arr[i].split(\"=\"); if(arr1[0] == name)&#123; return arr1[1]; &#125; &#125; &#125; function removeCookie(name)&#123; setCookie(name,1,-1); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- 缓存在本地客户端的数据 --&gt; cookie实现7天免登陆 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"tool.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; 用户名:&lt;input type=\"text\" /&gt; 密码:&lt;input type=\"password\" /&gt; &lt;label&gt;&lt;input type=\"checkbox\"&gt;七天免登陆&lt;/label&gt; &lt;input type=\"button\" value=\"登录\" /&gt; &lt;script type=\"text/javascript\"&gt; var ainput = document.getElementsByTagName(\"input\"); if(getCookie(\"username\"))&#123; ainput[0].value = getCookie(\"username\"); ainput[1].value = getCookie(\"password\"); &#125; ainput[3].onclick = function()&#123; var username = ainput[0].value; var password = ainput[1].value; if(ainput[2].checked)&#123; setCookie(\"username\",username,7); setCookie(\"password\",password,7); &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 正则表达式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 正则表达式在js中写法 --&gt; &lt;script type=\"text/javascript\"&gt; // 1 var reg = /abc/; // 2构造函数 var reg = new RegExp(\"abc\"); var str = \"abc\"; var flag = reg.test(str); console.log(flag); //test方法用于检测正则字符串中是否含有符合规则的子串 /* 修饰符 g全局匹配 i忽略大小写 */ var reg = /abc/g; //全局匹配 var str = \"abcabc\"; console.log(str.match(reg)); /* 全局匹配的结果 (2) ['abc', 'abc'] 不加全局匹配返回值中会带有下标 */ var reg = /abc/i; //忽略大小写 var str = \"abcABC\"; console.log(str.match(reg)); /* search 查找符合的子串位置，返回第一个 split replace等都可以传入正则表达式 reg.exec() 匹配第一个出现的 */ /* . 匹配除了换行符之外的所有字符（一个字符 * 匹配重复多次 + 至少一次匹配 ？ 0-1次匹配 【】匹配内容范围 \\w 数字字母下划线 \\d 表示数字 \\D 非数字 \\s 空格 (m,n) 匹配次数 （）单独指定也可以 ^ 以xx开头 [^] 表示非 ￥ 以xx结尾 | 或 () 分组作为一个整体匹配 $1 $2 用于分组后的内容提取 即多少个分组就用这个来标号 */ &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://nari2021.github.io/my-blog/tags/JavaScript/"}]},{"title":"JS学习笔记-1","date":"2021-10-14T10:07:01.000Z","path":"posts/6e94edea.html","text":"JavaScript学习笔记-1 点击事件 杂项 计时器 BOM DOM 基础语法部分不再赘述。 点击事件 12345678910111213&lt;script type=\"text/javascript\"&gt; /* alert(1); */ window.onload=function()&#123; var Obtn=document.getElementById(\"btn1\"); alert(Obtn); Obtn.onclick=function()&#123; alert(\"单击\"); &#125; &#125; /* 在Windows.onload内部写代码会在窗口完全加载完之后 再执行。 */ &lt;/script&gt; 杂项 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; //定义数组 var arr = new Array(10); var ar= Array(1,2,3); var a = [1,2,3]; // .length属性不是只读的 // 数组.shift() 从数组头部取出一个元素 // 数组.unshift() 从数组头部插入任意元素 // 数组 slice 切片 // splice 下标 长度 插入内容 为空则相当于删除 //字符串 substring 提取字符串 start end 不包括结束 // split分割。 var str= \"hello\"; alert(str[0]); // str.charAt() window.onload = function()&#123; var oBtn = document.getElementById(\"btn\"); var oTxt = document.getElementById(\"txt\"); //增加事件驱动函数 oBtn.onclick = function()&#123; alert(oTxt.value); oTxt.value = \"\"; &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" value=\"默认的文本\" id=\"txt\"/&gt; &lt;input type=\"button\" value=\"清空\" id=\"btn\"/&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- ECMA5严格模式 \"use strict\"; 使用该语句可以变为严格模式 ECMA5新增方法 indexOf(查找的元素,查找开始的位置) 返回第一个匹配到的位置 forEach遍历方法 arr.forEach(function(item, index ,array))&#123; item遍历出元素，index遍历下标 array就是数组本身 &#125; reduce归并 .reduce(function(pre,next,index,array))&#123; next:当前遍历到的元素 &#125; filter过滤 some 如果匹配成功就立即返回 every 要求每一项都符合 有一项不符合就返回false --&gt; &lt;!-- math对象常用 round()四舍五入 random()随机 max，min ceil floor向上 下取整 --&gt; &lt;!-- 时间对象 var d = new Date(\"/ - , 格式都可以 或者传入ms，从1970年开始计算\"); .set/.get() setUTCtime()/... 带UTC返回的是格林威治时间。 --&gt;&lt;!-- 定时器 setInterval(函数名，毫秒数) 每隔多少秒 执行一次该函数 更常用的是写入匿名函数 setInterval(function()&#123; //写入内容 &#125;,毫秒数) clearInterval(定时器ID) 清除定时器 --&gt; &lt;!-- innerHtml 标签间的所有内容 window.onload = function()&#123; var oBtn = document.getElementId() oBtn.onclick = function()&#123; alert(oBtn.innerHtml); &#125; &#125; 如果innerHTML内包含标签，则输出后会被识别 --&gt; 计时器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; //将查找标签节点的操作 function $(id)&#123; return document.getElementById(id); &#125; window.onload = function()&#123; var count = 0; var timer = null; $(\"start\").onclick = function()&#123; timer = setInterval(function()&#123; count++; $(\"id_S\").innerHTML = shownumber(count % 60); $(\"id_M\").innerHTML = shownumber(parseInt(count / 60) % 60); $(\"id_H\").innerHTML = shownumber(parseInt(count / 3600) % 60); &#125;,1000); &#125; //暂停 $(\"pause\").onclick = function()&#123; clearInterval(timer); &#125; //停止 $(\"stop\").onclick = function()&#123; clearInterval(timer); //清数据 count = 0; //清页面 $(\"id_S\").innerHTML = \"00\"; $(\"id_H\").innerHTML = \"00\"; $(\"id_M\").innerHTML = \"00\"; &#125; &#125; // 处理单个数字 function shownumber(num)&#123; if(num&lt;10)&#123; return \"0\" + num; &#125; else &#123; return num; &#125; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"div1\"&gt; &lt;div id=\"count\"&gt; &lt;span id=\"id_H\"&gt; 00 &lt;/span&gt; &lt;span id=\"id_M\"&gt; 00 &lt;/span&gt; &lt;span id=\"id_S\"&gt; 00 &lt;/span&gt; &lt;/div&gt; &lt;input type=\"button\" name=\"\" id=\"start\" value=\"开始\" /&gt; &lt;input type=\"button\" name=\"\" id=\"pause\" value=\"暂停\" /&gt; &lt;input type=\"button\" name=\"\" id=\"stop\" value=\"结束\" /&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果: BOM 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; //confirm(\"选择确定or取消\"); /* var res = prompt(\"输入一个数\",9); alert(res); */ /* //open方法 window.onload = function()&#123; var oBtn = document.getElementById(\"btn\"); oBtn.onclick = function()&#123; open(\"http://www.baidu.com\",\"百度\"); //单参数 // 第二个参数 是给打开的新窗口命名， // 再去加载的时候会在目标窗口加载 // 第三个参数字符串用于写css指定窗口宽高xy坐标 // width height left top location.search = \"?xxx=yyy&amp;age=18\"; &#125; &#125; */ /* 获取url中的search 通过传入key返回key对应值 ?key=5&amp;search=ok 输入key返回5 */ function getValue(search,key)&#123; // 找出第一次出现的位置 var start = search.indexOf(key); if(start == -1)&#123; return; &#125;else&#123; var end = search.indexOf(\"&amp;\",start); if(end == -1)&#123; //当前为最后一个键值对 end = search.length; &#125; &#125; var str = search.substring(start,end); var arr = str.split(\"=\"); return arr[1]; //返回值 &#125; var search = \"?id=5&amp;&amp;search=ok\"; alert(getValue(search,\"id\")); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"button\" name=\"\" id=\"btn\" value=\"打开\" /&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- BOM Browser Object Model 浏览器对象模型 alert(window) 弹出一个window window是全局对象 属性: document frames history location navigater screen ↓↓↓ anchors forms images links location --&gt; &lt;!-- 系统对话框 ① alert 直接弹出对话框 ② confirm 弹出一个带有确定和取消的警告框 可以用参数去接收返回值，true false ③ prompt 弹出一个带输入的提示框 参数1 显示的内容 参数2 输入框内默认的值 返回数/null --&gt; &lt;!-- open 方法 1 要加载的url 2 串口名称/目标 3 具有特殊意义字符串 location 相当于浏览器地址栏输入框内的东西 location window.location window.document.location 都可以获取 包含的属性 hash 获取锚点 即获取最后的 #后面的内容 #2 #3.....页内跳转 可以直接赋值实现页内跳转 location.hash = \"#3\"; host hostname 端口号默认值8080 IP 找到ip地址 端口号 当前电脑内使用网络软件的唯一标识 protocol 协议 http 网络协议 file 本地文件协议 search 查找字符串 即跟在问号?后的字符。 alert(location.search) 也可以直接赋值 location.search = \"?xxx=yyy&amp;age=18\" url 统一资源定位符 protocol(协议):host(主机名):port(端口号)/pathname(路径名) ?查询字符串(search)#锚点(hash) --&gt; &lt;!-- assign() 当前页面跳转到指定url location.assign() reload() 重载当前url 传参 true 则为强制加载，即从服务器上重新加载。 没有true的情况下，不会清缓存。 replace() //避免产生跳转前的历史记录 替换 --&gt; &lt;!-- history history.length 返回历史记录的条数， history.back()返回上一条历史记录 history.forward() 前进到下一条历史记录 history.go() 0 重载当前页面 正数 前进相应数量 负数 后退 --&gt; DOM 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; /* DOM document object model document html从开始到结束 打通html css ja的工具 三种类型 元素节点 &lt;div&gt;&lt;/div&gt; 属性节点 title = “属性节点” 文本节点 测试div */ /* window.onload = function()&#123; /* var oBtn = document.getElementById(\"div1\"); alert(div); */ alert($(\".box\")[0].innerHTML); alert($(\"name=hello\")[0].innerHTML); &#125; */ //封装函数 function $(vArg)&#123; switch(vArg[0])&#123; case \"#\": //id return document.getElementById(vArg.substring(1)); break; case \".\"://class return elementByClassName(document,vArg.substring(1)); break; //↑自己封装好的兼容函数 default: //对参数前五个字符判断 name后有= var str = vArg.substring(0,5); if(str == \"name=\")&#123; return document.getElementsByName(vArg.substring(5)); &#125;else&#123; return document.getElementsByTagName(vArg); &#125; break; &#125; &#125; function elementByClassName(parent,classStr)&#123; var nodes = parent.getElementsByTagName('*'); var result = []; for(var i = 0;i &lt; nodes.length;i++)&#123; if(nodes[i].className == classStr)&#123; result.push(nodes[i]); &#125; &#125; return result; &#125; /* 访问元素节点属性 tagName 获取标签名 innerHTML 元素节点标签间内容 id title style classname style 是一个样式对象 使用.style.属性获取/修改 注 样式中有使用——连接的样式 background-color 改为 backgroundColor 将后面字母大写 只能获取到行间的样式 获取当前样式: getComputedStyle(元素节点)[样式类型]。 alert(getComputedStyle(oDiv)[width]); 解决此问题的兼容函数: function getStyle(elem,attr)&#123; return elem.currentStyle ? elem.currentStyle[attr]: getComputedStyle(elem)[attr]; &#125; document.getElementsByTagName() 参数 标签名 功能 获取符合标签名的元素节点 获取后是一个数组 获取子节点的。 var oUl = document.getElementById(\"ul1\"); var aLis = oUl.getElementsByTagName(\"li\"); 就能获取到ul节点下的。 获取到之后，可以使用for循环之类读取 aLis[i].innerHTML 读取内容 byname / id / class 等查找 */ /*************dom attribute*****************/ /* get/setAtrribute() removeAtrribute() 方法 原本的获取以及修改方法 window.onload() = function()&#123; 获取到属性后 oBtn.getAttribute(\"tittle\"); oBtn.setAttribute(\"tittle\",\"xxx\") // 比起.读取 obtn.classname = \"xxx\" 比起这种方式，setget可以访问用户自定义属性， setAttribute(\"xxx\",\"yyy\") &#125; */ /* childNodes 获取当前元素节点的所有子节点 返回的是节点列表 childNodes[1].nodeName &#123; nodeName nodeType( 元素1 属性2 文本3) nodeValue(文本内容不包含html) 元素节点的value为null firstChild lastChild &#125; ownerDocument 属性 == document parentNode 返回父节点 previousSubling 返回前一个同极节点 next.... 属性节点attributes oDiv.attributes 返回的是一个集合(无序的) oDiv.attributes.getNamedIten(\"id\")；获取 oDiv.attributes[\"id\"]；获取 */ /* write method document.write(\"xxx\") 添加内容的时候 会将原有页面内容覆盖掉 创建新节点 document.creatElement(标签名); 插入节点 appendChild(newNode); document.createTextNode(文本) 创建文本节点 var node = document.createElement(\"span\"); var oText = document.createTextNode(\"文本节点\"); node.appendChild(oText); oDiv.appendChild(node); */ // 封装一个代文本的元素节点 function createElementWidthText(tagName,txt)&#123; var node = document.createElement(tagName); var oText = document.createTextNode(txt); node.appendChild(oText); return node; &#125; // 将node插入到span之前 var node = createElementWidthText(\"strong\",\"strong文本\"); var oSpan = document.getElementsByTagName(\"span\")[0]; oSpan.parentNode.insertBefore(node,oSpan); // 没有现成的insertAfter function insertAfter(newNode,oldNode)&#123; var parent = oldNode.parentNode; if(oldNode == parent.lastChild)&#123; parent.appendChild(newNode); &#125;else&#123; parent.insertBefore(newNode,oldNode.nextSibling); &#125; &#125; /* replaceChild 替换节点 parent.replaceChild(newNode,oldNode); node.cloneNode(True) 返回值为克隆节点(true 复制文本) 删除节点 removeChild() */ &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"div1\"&gt; &lt;p&gt;p&lt;/p&gt; &lt;span&gt;span&lt;/span&gt; &lt;em&gt;em&lt;/em&gt; &lt;/div&gt; &lt;div name=\"hello\"&gt; 测试div &lt;/div&gt; &lt;div class=\"box\"&gt; 22222222 &lt;/div&gt; &lt;div class=\"box\"&gt; 333333333 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- --&gt;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://nari2021.github.io/my-blog/tags/JavaScript/"}]},{"title":"开发日志1-3","date":"2021-10-07T12:20:40.000Z","path":"posts/67b180d9.html","text":"关于文章格式的设置说明 设置博客目录文档 受技术限制，且博客原本为按时间顺序排列。为此设置一个时间为大于目前时间的博客，例如2030年将其置于博客最前方用作于导航作用。内容按分类写入当前各个系列文章的超链接方便快速查询。 关联文章 开发日志1-2","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]},{"title":"HTMLCSS网页设计实例(2)","date":"2021-10-06T16:54:24.000Z","path":"posts/6e7fa591.html","text":"网页设计实例学习笔记(2) 旋转缩放动画一 旋转缩放动画二 旋转缩放动画三 旋转缩放动画四 二级导航效果 卡片式导航效果 骰子制作 鼠标悬停动画 3D图片效果 CSS样式表清除样式 旋转缩放动画一 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;width: 200px;height: 200px;border-radius: 50%; margin: 0 auto;position: relative;&#125; p&#123;width: 160px;height: 160px;background:url(../新网课/img/1.png); border-radius: 50%;border: 20px solid rgba(255,255,255,.5); background-origin: border-box;position: absolute;z-index: 1; transition: 1s;&#125; h1&#123;width: 200px;height: 200px;background: #333;color: #fff; text-align: center;line-height: 200px;border-radius: 50%; position: absolute;transform: scale(0,0);transition: 1s;&#125; div:hover p&#123;transform: scale(0,0) rotate(360deg);&#125; div:hover h1&#123;transform: scale(1,1) rotate(360deg);&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;h1&gt;文字&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果如图: 旋转缩放动画二 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;width: 300px;height: 300px;border-radius: 50%; margin: 0 auto;position: relative;&#125; p&#123;width: 260px;height: 260px;background:url(../新网课/img/1.png); border-radius: 50%;border: 20px solid rgba(255,255,255,.5); background-origin: border-box;position: absolute; transition: 1s;transform-origin: right center;z-index: 1;&#125; h1&#123;width: 300px;height: 300px;background: #333;color: #fff; text-align: center;line-height: 300px;border-radius: 50%; position: absolute;&#125; span&#123;width: 20px;height: 20px;display: block;position: absolute; border-radius: 50%;background-color: #f00;top: 140px;right: 0;z-index: 2;&#125; div:hover p&#123;transform: rotate(-90deg);&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;span&gt; &lt;/span&gt; &lt;h1&gt;文字&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果如图: 旋转缩放动画三 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;width: 200px;height: 200px; margin: 0 auto;position: absolute;margin: 100px 18.75rem;&#125; p&#123;width: 160px;height: 160px;background:url(../新网课/img/1.png); border: 20px solid rgba(255,255,255,.5); background-origin: border-box;transition: 1s; transform-origin: top;&#125; h1&#123;width: 200px;height: 200px;background: #333;color: #fff; text-align: center;line-height: 200px; opacity: 0;transition: 1s; transform: rotateX(180deg);transform-origin: center bottom; position: absolute;top: 0;&#125; div:hover p &#123;transform: rotateX(180deg);opacity: 0;&#125; div:hover h1&#123;opacity: 1;transform: rotateX(0deg);&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;h1&gt;文字&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果如图: 旋转缩放动画四 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;width: 300px;height: 300px;border-radius: 50%; margin: 100px auto;position: relative;&#125; p&#123;width: 260px;height: 260px;background:url(../新网课/img/1.png); border-radius: 50%;border: 20px solid rgba(255,255,255,.5); background-origin: border-box;position: absolute; transition: 1s;z-index: 1;left: 0;&#125; h1&#123;width: 300px;height: 300px;background: #333;color: #fff; text-align: center;line-height: 300px;border-radius: 50%; position: absolute;left: -300px;transition: 1s;opacity: 0;&#125; div:hover p&#123;transform: scale(0.5,0.5);left: 130px;&#125; div:hover h1&#123;left: 0;opacity: 1;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;h1&gt;文字&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果如图: 剩余部分类似效果不放上来了。 二级导航实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; padding: 0; &#125; div &#123; height: 30ox; width: 800px; background: #f00; margin: 50px auto; &#125; div ul li &#123; float: left; list-style: none; &#125; div ul li a &#123; color: #000; text-decoration: none; background: #eeeeee; display: block; height: 30px; line-height: 30px; width: 100px; margin-right: 1px; text-align: center; &#125; div ul li a:hover &#123; background: #333333; color: #FFFFFF; text-decoration: underline; &#125; div ul li ol &#123; position: absolute; display: none;/* width: 101px; 将宽度去了的话，就会变成横向显示。 */ &#125; div ul li:hover ol &#123; display: block; left: 0; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;产品中心&lt;/a&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品4&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;产品6&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;客户服务&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果图: 卡片式导航效果一 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;height: 40px;border-bottom: 1px solid #000;margin: 50px auto;&#125; div ul li&#123;float: left;list-style: none;&#125; div ul li a&#123;color: #96999c;text-decoration: none; padding: 0 14px;background: #f7f7f7;display: block; height: 35px;line-height: 35px;margin-right: 9px; border: 1px solid gray; border-bottom: none; margin-top: 4px;&#125; div ul li a:hover&#123;border-color: #000;background: #fff; color: #000;height: 40px;margin-top: 0px;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 骰子制作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; padding: 0; &#125; div &#123; width: 200px; height: 200px; border: 1px solid #000; background: #ff0; float: left; display: flex; justify-content: center; align-items: center; box-sizing: border-box; /* 因为点数三的span里加了padding10px 弹性盒会自动撑大，加入box-sizing:border-box 使其保持大小不变*/ &#125; /* 一点 */ span &#123; display: block; width: 50px; height: 50px; background: #f00; border-radius: 50%; &#125; /* 二点 */ div:nth-child(2) &#123; justify-content: space-around; &#125; /* 三点 */ div:nth-child(3) &#123; justify-content: space-between; padding: 10px; &#125; div:nth-child(3) span:nth-child(1) &#123; align-self: flex-start; &#125; div:nth-child(3) span:nth-child(3) &#123; align-self: flex-end; &#125; /* 四点 */ nav &#123; width: 100%; height: 50px; display: flex; justify-content: space-around; align-items: center; &#125; div:nth-child(4) &#123; flex-wrap: wrap; &#125; /* wrap 允许两个nav换行显示*/ /* 五点 */ div:nth-child(5) &#123; flex-wrap: wrap; padding: 10px; &#125; /* wrap 允许两个nav换行显示*/ /* 六点 */ div:nth-child(6) &#123; flex-wrap: wrap; padding: 10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;/div&gt; &lt;div&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;span&gt;&lt;/span&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;/div&gt; &lt;div&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;nav&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/nav&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 鼠标悬停动画 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; div&#123;width: 300px;height: 300px;background:url(../新网课/img/1.png) center; border-radius: 50%;margin: 50px;position: relative; &#125; p&#123;width: 280px;height: 280px;border-radius: 50%;border: 10px solid #f00; border-top-color: #ff0;border-left-color: #ff0;transition: 1s; background: rgba(0,0,0,0);&#125; div:hover p&#123;transform: rotate(180deg);background: rgba(0,0,0,.5);&#125; h1&#123;color: #fff;font-size: 50px;position: absolute;width: 300px; height: 300px;text-align: center;line-height: 300px;opacity: 0; z-index: 1;transition: 1s;top: 0;left: 0;&#125; div:hover h1&#123;opacity: 1;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;h1&gt;文字&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果如图 3D图片效果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; padding: 0; &#125; body &#123; background: #ffbfcd; &#125; p &#123; width: 300px; height: 300px; border: 10px solid #fff; position: relative; &#125; img &#123; width: 100%; height: 100%; &#125; p:after &#123; content: \"\"; display: block; width: 200px; height: 200px; background: #000; box-shadow: 0px 10px 20px rgba(0, 0, 0, .7); /* 第三个参数是偏移距离 如果效果不好的话可以增大该数值 */ transform: skewY(10deg); position: absolute; bottom: 10px; right: 15px; z-index: -1; &#125; p:before &#123; content: \"\"; display: block; width: 200px; height: 200px; background: #000; box-shadow: 0px 15px 20px rgba(0, 0, 0, .7); transform: skewY(-10deg); position: absolute; bottom: 10px; left: 15px; z-index: -1; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; &lt;img src=\"../新网课/img/1.png\"&gt; &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 效果如图: CSS样式表清除样式 1234567891011121314151617181920212223242526@charset \"utf-8\";/* CSS Document *//* ==============reset============== */body,h1,h2,h3,h4,h5,h6,p,a,img,input,ul,li,ol,dl,dt,dd,figure,figcaption&#123; margin: 0; padding: 0;&#125;ul,li&#123; list-style: none;&#125;img&#123; display: block; border: 0;&#125;input&#123; outline: none;&#125;body&#123; font-size: 12px; font-family: \"微软雅黑\"; color: #3e3e3e;&#125;a&#123; text-decoration: none; color: #909090;&#125;header,nav,section,footer,aside,article,main,figure,figcaption&#123; display: block;&#125;*&#123; box-sizing: border-box;&#125;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"开发日志1-2","date":"2021-10-06T16:20:38.000Z","path":"posts/10b6b04f.html","text":"有关于博客说明 1 时间戳 ​ 由于先前写文的时候markdown的题头都是复制黏贴修改的，造成了一些文章丢失了date属性，尽管在实际生成的时候会在文末自动识别，但是目前在写这篇文时，已经将html和css学到可以灵活运用于网页的基础开发上面了，是不希望该属性丢失的，所以以后会多加注意。 2 文章内容格式 ​ 在写此文时，基础的html属性已经掌握的差不多了，所以在使用markdown继续做学习笔记时，不会再像以往的文章一样毫无顺序，字体大小一致，图片大小撑满了整个文档内容等一系列的不美观的地方，都会加以改进。 具体改进方案:​ 1 对文章标题进行区分，方便阅读和导航。具体使用h1-h6标签，文字属性标签，排版标签等进行划分。 ​ 2 图片进行大小控制，维持在一个合适的大小，不至于撑满整个屏幕。 ​ 3 文内标记锚点，标记链接方便快速导航。 ​ 4 每个相关联的内容笔记在文末进行归类设置超链接进行导航，方便查阅和快速导航。 ​ 5 文章长度可能长短不一但会做到尽量控制。 3 有关学习进度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基本都是根据网课进度进行学习，可能有时候时间不充裕会导致几个月不更新博客。也可能会在几天内连续更新，只是作为一个记录，记录自己的成长。学习的内容可能很多很杂，也可能忘记，写下的每一篇笔记也好，文章也好，碎碎念也好，相信未来某一天会感谢自己这样的记录。 4 有关于其他bug说明&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如首行空格，由于markdown不能识别多个空格，导致只能使用&amp;nbsp来书写空格，并且需要8个。各个行之间的行高，字体字号大小的统一也会继续改进。关于主业的摘要会将很多无关紧要的内容摘录进来这个会在后续学习中进行解决。以及其他一些细节的东西的改正会在后续日志中更新。","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]},{"title":"HTMLCSS网页设计实例(1)","date":"2021-10-04T10:58:29.000Z","path":"posts/4552f652.html","text":"css3实现loading效果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;c3实现loading效果&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .circlebox&#123;width: 40px;height: 40px; margin: 100px;position: absolute;&#125; .circlebox p &#123;width: 12px;height: 12px;background: red;border-radius: 50%; position: absolute;animation: move 1.5s infinite linear;&#125; .circlebox p:nth-of-type(1)&#123;left: 0;top: 0;&#125; .circlebox p:nth-of-type(2)&#123;right: 0;top: 0;&#125; .circlebox p:nth-of-type(3)&#123;right: 0;bottom: 0;&#125; .circlebox p:nth-of-type(4)&#123;left: 0;bottom: 0;&#125; .circlebox:nth-of-type(2)&#123;transform: rotate(45deg);&#125; @keyframes move&#123; 0%&#123;transform: scale(0);&#125; 50%&#123;transform: scale(1);&#125; 100%&#123;transform: scale(0);&#125; &#125; .circlebox:nth-of-type(1) p:nth-of-type(1)&#123;animation-delay: -0.1s ;&#125; .circlebox:nth-of-type(2) p:nth-of-type(1)&#123;animation-delay: -0.3s ;&#125; .circlebox:nth-of-type(1) p:nth-of-type(2)&#123;animation-delay: -0.5s ;&#125; .circlebox:nth-of-type(2) p:nth-of-type(2)&#123;animation-delay: -0.7s ;&#125; .circlebox:nth-of-type(1) p:nth-of-type(3)&#123;animation-delay: -0.9s ;&#125; .circlebox:nth-of-type(2) p:nth-of-type(3)&#123;animation-delay: -1.1s ;&#125; .circlebox:nth-of-type(1) p:nth-of-type(4)&#123;animation-delay: -1.3s ;&#125; .circlebox:nth-of-type(2) p:nth-of-type(4)&#123;animation-delay: -1.5s ;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"circlebox\"&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=\"circlebox\"&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; animation-delay中的负号为的是在第一圈的时候正常显示，因为动画效果提前了。 立方体旋转 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;立方体旋转&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .box&#123;width: 400px;height: 400px;border: 4px solid red;margin: 30px auto; perspective: 600px;&#125; .box ul&#123;position:relative width:300px;height: 300px;border: 1px solid blue;margin: 50px; transform-style: preserve-3d;animation: move 2s infinite linear;transform-origin: center center 150px;&#125; .box ul li&#123;width: 300px;height: 300px;list-style: none;font-size: 30px;color: #fff; text-align: center;line-height: 300px;position: absolute;&#125; .box ul li:nth-of-type(1)&#123;background: red;opacity: 0.4;&#125; .box ul li:nth-of-type(2)&#123;background: blue;opacity: 0.4; transform: translateX(300px) rotateY(-90deg);transform-origin: left;&#125; .box ul li:nth-of-type(3)&#123;background: yellow;opacity: 0.4; transform: translateX(-300px) rotateY(90deg);transform-origin: right;&#125; .box ul li:nth-of-type(4)&#123;background: green;opacity: 0.4; transform: translateY(-300px) rotateX(-90deg);transform-origin: bottom;&#125; .box ul li:nth-of-type(5)&#123;background: yellowgreen;opacity: 0.4; transform: translateY(300px)rotateX(90deg);transform-origin: top;&#125; .box ul li:nth-of-type(6)&#123;background: peru;opacity: 0.4; transform: translateZ(300px);&#125; @keyframes move&#123; from&#123;transform: rotateY(0deg);&#125; to&#123;transform:rotateY(360deg);&#125; &#125; /* 1定位 2移动物体位置 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 八卦圈旋转 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .circlebox&#123;width: 300px;height: 300px;;margin: 100px;position: relative; animation: move 0.001s infinite linear;transform-origin: center;&#125; .circleblack&#123;width: 300px;height: 300px;border-radius: 50%;background-color: black;&#125; .circlewhite&#123;width: 150px;height: 300px;background-color: white;border-top-right-radius: 150px; border-bottom-right-radius: 150px;position: absolute;top: 0;right: 0;&#125; .circlebb&#123;width: 150px;height: 150px;border-radius: 50%; background-color: black;position: absolute;top: 0;left: 75px;&#125; .circleww&#123;width: 150px;height: 150px;border-radius: 50%; background-color: white;position: absolute;bottom: 0;left: 75px;&#125; .circlebbl&#123;width: 20px;height: 20px;background-color: black; position: absolute;border-radius: 50%;left:140px;bottom: 65px;&#125; .circlewwl&#123;width: 20px;height: 20px;background-color: white; position: absolute;border-radius: 50%;left:140px;top: 65px;&#125; @keyframes move&#123; from&#123;transform: rotate(0deg);&#125; to&#123;transform: rotate(360deg);&#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"circlebox\"&gt; &lt;div class=\"circleblack\"&gt;&lt;/div&gt; &lt;div class=\"circlewhite\"&gt;&lt;/div&gt; &lt;div class=\"circlebb\"&gt;&lt;/div&gt; &lt;div class=\"circleww\"&gt;&lt;/div&gt; &lt;div class=\"circlebbl\"&gt;&lt;/div&gt; &lt;div class=\"circlewwl\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 图片手动切换(之前就有写过) 主要用到锚点，使用a标签去除样式，改变背景透明度实现。 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; img&#123;display: block;&#125; .box&#123;position: relative; width: 500px;height: 375px;border: 1px #000 solid;&#125; .btn a&#123;float: left; width:30px;height: 30px;background: rgba(0,0,0,.5); text-align: center;line-height:30px;color: #fff;text-decoration: none; margin-right:5px; &#125; .btn a:hover&#123;background: rgba(0,0,0,1);&#125; .btn&#123;position: absolute;right: 5px;bottom: 10px;&#125; .list&#123;width: 500px;height: 375px;overflow:hidden;&#125; /* 此处overflow auto可以看到图片容器变成滚动条，当点击 锚点的时候自动跳转，使用hidden把滚动条去掉就可以实现效果*/ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"class=\"box\"&gt; &lt;div id=\"\" class=\"btn\"&gt; &lt;a href=\"#img1\"&gt;1&lt;/a&gt; &lt;a href=\"#img2\"&gt;2&lt;/a&gt; &lt;a href=\"#img3\"&gt;3&lt;/a&gt; &lt;a href=\"#img4\"&gt;4&lt;/a&gt; &lt;/div&gt; &lt;div id=\"\"class=\"list\"&gt; &lt;img src=\"img/0.png\" id=\"img1\"&gt; &lt;img src=\"img/1.png\" id=\"img2\"&gt; &lt;img src=\"img/2.png\" id=\"img3\"&gt; &lt;img src=\"img/3.png\" id=\"img4\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 扇形展开效果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;css折叠&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .box&#123;width: 600px;height: 230px;border-bottom: 2px solid #000; margin: 50px auto;position: relative;&#125; .box div&#123;width: 60px;height: 200px;position: absolute; left: 240px;box-shadow: 3px 3px 5px #333;transform-origin: center bottom; transition: all 1s linear;&#125; .box div:nth-of-type(1)&#123;background: red;&#125; .box div:nth-of-type(2)&#123;background: yellow&#125; .box div:nth-of-type(3)&#123;background: green;&#125; .box div:nth-of-type(4)&#123;background: blue;&#125; .box div:nth-of-type(5)&#123;background: pink&#125; .box div:nth-of-type(6)&#123;background: gray;&#125; .box div:nth-of-type(7)&#123;background: yellowgreen;&#125; .box div:nth-of-type(8)&#123;background: yellowgreen;&#125; .box div:nth-of-type(9)&#123;background: gray;&#125; .box div:nth-of-type(10)&#123;background: pink;&#125; .box div:nth-of-type(11)&#123;background: blue;&#125; .box div:nth-of-type(12)&#123;background: green;&#125; .box div:nth-of-type(13)&#123;background: yellow;&#125; .box:hover div:nth-of-type(2)&#123;transform: rotate(15deg);&#125; .box:hover div:nth-of-type(3)&#123;transform: rotate(30deg);&#125; .box:hover div:nth-of-type(4)&#123;transform: rotate(45deg);&#125; .box:hover div:nth-of-type(5)&#123;transform: rotate(60deg);&#125; .box:hover div:nth-of-type(6)&#123;transform: rotate(75deg);&#125; .box:hover div:nth-of-type(7)&#123;transform: rotate(90deg);&#125; .box:hover div:nth-of-type(8)&#123;transform: rotate(-90deg);&#125; .box:hover div:nth-of-type(9)&#123;transform: rotate(-75deg);&#125; .box:hover div:nth-of-type(10)&#123;transform: rotate(-60deg);&#125; .box:hover div:nth-of-type(11)&#123;transform: rotate(-45deg);&#125; .box:hover div:nth-of-type(12)&#123;transform: rotate(-30deg);&#125; .box:hover div:nth-of-type(13)&#123;transform: rotate(-15deg);&#125; .box div+div&#123;opacity: 0;&#125; .box:hover div+div&#123;opacity: 1;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;6&lt;/div&gt; &lt;div&gt;7&lt;/div&gt; &lt;div&gt;7&lt;/div&gt; &lt;div&gt;6&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 网页常见动画效果 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .box&#123;width: 329px;height: 293px;border: 1px solid red;margin:50px auto; position: relative;overflow: hidden;&#125; .box .bg&#123;width: 329px;height: 293px;background: black;opacity: 0; position: absolute;top: 0;transition: 0.5s linear;&#125; .box:hover .bg&#123;opacity: 0.7;&#125; .box h3&#123;position: absolute;width: 100%;text-align: center;top:-40px; font-size: 28px;color: #2ebcff;transition: all 0.5s linear;&#125; .box:hover h3&#123;top:35px&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;img src=\"../新网课/img/3.png\"&gt; &lt;p class=\"bg\"&gt;&lt;/p&gt; &lt;h3&gt;学习笔记&lt;/h3&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 其余同理，可以加入scale加入放大效果。 垂直手风琴 1 锚点的使用，target伪类选择器、hover 2 定位 3 span边框写三角形 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;垂直手风琴&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .listbox&#123;width: 500px; margin: 50px auto;&#125; .listbox .list a&#123;display: block;height: 35px; background: linear-gradient(#cecece,#8f8f8f);border-radius: 5px; padding-left: 12px;text-decoration: none;color: #424242; line-height: 35px; &#125; .listbox .list&#123;position: relative;&#125; .listbox .list p&#123;height: 0px;overflow: auto;padding-left: 10px; margin: 5px 0px;transition: 0.5s; &#125; .listbox .list span&#123;width: 0;height: 0;border-left: 5px solid transparent; border-right: 5px solid transparent;border-top: 5px solid white; border-bottom: 5px solid transparent;position: absolute;top: 15px; right: 15px; &#125; .listbox .list:target p&#123;height: 100px;&#125; .listbox .list a:hover,.listbox .list:target a&#123;background: linear-gradient(#6bb2ff,#2288dd); color: white;&#125; .listbox .list:target span&#123;border-top: transparent; border-left: 5px white solid;right: 10px;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"listbox\"&gt; &lt;div class=\"list\" id=\"first\"&gt; &lt;a href=\"#first\"&gt;First&lt;/a&gt; &lt;span&gt;&lt;/span&gt; &lt;p&gt;文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容&lt;/p&gt; &lt;/div&gt; &lt;div class=\"list\" id=\"second\"&gt; &lt;a href=\"#second\"&gt;Second&lt;/a&gt; &lt;span&gt;&lt;/span&gt; &lt;p&gt;文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容&lt;/p&gt; &lt;/div&gt; &lt;div class=\"list\" id=\"third\"&gt; &lt;a href=\"#third\"&gt;Third&lt;/a&gt; &lt;span&gt;&lt;/span&gt; &lt;p&gt;文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容 文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容文字内容&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 弹窗实现 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;弹窗&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .box &#123;width: 300px;height: 300px;border: 1px red solid; margin: 100px auto;&#125; /* 第一种方法 定位+margin-0.5*width/height */ /* p&#123;width: 200px;height: 200px;color: green;position: fixed; top: 50%;left: 50%;margin-top: -100px;margin-left: -100px;&#125; */ /* 第二种方法 将margin 改为transform 缺点是低版本不兼容*/ /* 第三种方法 技巧方法*/ /* p&#123;width: 200px;height: 200px;color: green;position: fixed; top: 0;left: 0;right: 0;bottom: 0;margin: auto;&#125; */ /* 第四种 弹性盒 */ html,body&#123;width: 100%;height: 100%;&#125; body&#123;display: flex;justify-content: center;align-items: center; height: 100%;&#125; p&#123;width: 200px;width: 200px;background: green;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; hover后图片放大效果 1 图片3像素bug 2 div内存两张图片用定位解决。 3 解决高度塌陷 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; .listbox&#123;width: 620px;margin: 50px auto;&#125; .listbox h3 &#123;font-size: 19px;color: #a53333;text-align: center; border-bottom:1px dashed #cccccc;font-weight: 300;padding-bottom: 5px;&#125; .pic img&#123;width: 100px;height: 75px;border: 1px solid #cccccc; padding: 2px;background: #fff;display: block;&#125; .pic&#123;border: 1px solid #bbbbbb;padding: 5px;width: 106px; background: #eeeeee;float: left;margin: 3px;position: relative; &#125; .listbox &#123;margin-top: 10px;&#125; /* 在此处用overflow:hidden / clear:both 会造成hover之后溢出元素看不见，不适合与 定位一起使用 解决方法 1 overflow 2 给所有浮动元素后面添加一个空的元素（div等 并声明clear:both */ .pic img:nth-of-type(2)&#123;display: none;width: 200px;height: 150px; position: absolute;top: -15px;left: -40px;z-index: 88;&#125; .pic:hover img:nth-of-type(2)&#123;display: block;border-color: #000;&#125; /* 图片会默认向下撑大三像素，3像素bug 解决方法img&#123;display：block&#125; */ /* 为了实现放大效果，一个div里面要存放两张图 并且一开始被隐藏掉 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"listbox\"&gt; &lt;h3&gt;Hoverbox Image Gallery&lt;/h3&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"list\"&gt; &lt;div class=\"pic\"&gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;img src=\"../新网课/img/1.png\" &gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"HTMLCSS网页设计学习笔记(5)","date":"2021-10-03T10:59:10.000Z","path":"posts/f3ce2b44.html","text":"@keyframes 定义帧动画， 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .box&#123;width: 100px;height: 100px;background:#f00;position: relative; animation: goto 5s linear infinite alternate;&#125; @keyframes goto&#123; 0% &#123;left: 0;top:0&#125; 10%&#123;left: 100px;top: 0;transform: scale(2);&#125; 40%&#123;left: 200px;top: 200px;transform: scale(3);&#125; 100%&#123;left: 0;top: 0;&#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 弹性盒 主轴/侧轴 12345678910111213141516171819202122232425262728293031323334353637display:flex/inline-flex 设置成弹性容器inline:设置为内联块级弹性伸缩盒flex-direction:row/row-reverse/column/column-reverse 改变主轴的方向位置row:默认主轴横向，起点在左侧终点在右侧flex-wrap:nowrap/wrap/wrap-reverse当子元素溢出父容器时不换行/换行/反转wrap排列当页面放不下弹性盒会自动换行/将子元素进行压缩。justify-content:flex-start/flex-end/center/space-between/space-around弹性盒内元素从..位置对齐。space-between:元素撑满弹性盒，中间自动隔开。space-around:元素左右被margin撑满。注意区分轴方向和对齐方向的区别轴方向改变 1234会变成4321，对齐方向改变1234顺序不变，会贴着边进行对齐。align-items:flex-start/flex-end/center/baseline/stretch设置或者检索盒子侧轴方向上的对齐方式.stretch:元素伸展填充整个盒子flex-grow:&lt;number&gt;(default:0)设置弹性盒的扩展比率，number不能为负值。默认为0，为比值空白空间会被元素按比例填满。flex-shrink:用于吸收超出的空间flex-basis:用于设置子项占用的空间。按照比例。order&lt;integer&gt; 用于设置元素的排列顺序。默认值为0，越大越靠后排列例如 li:12345li:nth-chilid(3),li:nth-child(5) &#123;order:1&#125;li:nth-child(1)&#123;order:2&#125;会产生排列顺序为24351.因为2,4的rder默认为0。align-self：自身对齐方式。 媒体查询 可以根据当前媒体，窗口宽度信息，设备信息，而匹配不同的css样式，以使页面内容排版布局改变。 123456789101112131415161718192021222324252627282930313233语法:@media mediatype and/noly/not(media feature)&#123; css-code&#125;语法二:针对不同的媒体使用stylesheets&lt;link rel=\"stylesheel\" media=\"mediatype and/not/only (meida feature)\"href=\"mystylesheet.css\"&gt;例如&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; @media screen and (min-width:1200px)&#123; body &#123;background: #f00;&#125; &#125; @media screen and (min-width:800px) and (max-width:1200px)&#123; body &#123;background: #0f0;&#125; &#125; @media screen and (max-width:800px) &#123; body &#123;background: #00f;&#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 移动端布局（rem等比缩放布局。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"HTMLCSS网页设计学习笔记(4)","date":"2021-09-29T15:12:04.325Z","path":"posts/ead51a05.html","text":"表单属性高级 123456789&lt;fieldset&gt; &lt;legend&gt; 分块的表头 &lt;/legend&gt; 表单中分块，相当于一个div&lt;/fieldset&gt;提示信息标签，&lt;label for=\"绑定控件id名\"&gt;&lt;/label&gt; 将提示信息和控件绑定。常用于radio。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;表单填写&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; &#125; form &#123; width: 600px; border: 1px #000 solid; margin: 0 auto; padding: 10px; &#125; p &#123; margin-bottom: 10px; &#125; fieldset &#123; margin-bottom: 10px; padding: 10px; &#125; .fd1 &#123; border: 1px #f00 dashed; &#125; .ld1&#123;border: 1px #f00 dashed; padding: 5px 10px;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;form name=\"f1\" action=\"\" method=\"post\"&gt; &lt;fieldset class=\"fd1\"&gt; &lt;legend class=\"ld1\"&gt;用户登录&lt;/legend&gt; &lt;p&gt;姓名:&lt;input type=\"text\" name=\"\" id=\"\" value=\"\" /&gt;&lt;/p&gt; &lt;p&gt;密码:&lt;input type=\"password\" name=\"\" id=\"\" value=\"\" /&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=\"submit\" name=\"\" id=\"\" value=\"提交\" /&gt;&lt;input type=\"reset\" name=\"\" id=\"\" value=\"重置\" /&gt;&lt;/p&gt; &lt;/fieldset&gt; &lt;fieldset class=\"fd2\"&gt; &lt;legend&gt;用户注册&lt;/legend&gt; &lt;p&gt;性别:&lt;label for=\"male\"&gt;男&lt;/label&gt;&lt;input type=\"radio\" name=\"sex\" id=\"male\" value=\"\" /&gt; 性别:&lt;label for=\"female\"&gt;女&lt;/label&gt;&lt;input type=\"radio\" name=\"sex\" id=\"female\" value=\"\" /&gt; &lt;/p&gt; &lt;p&gt;爱好:聊天&lt;input type=\"checkbox\" name=\"like\" /&gt; 睡觉&lt;input type=\"checkbox\" name=\"like\" /&gt; 打游戏&lt;input type=\"checkbox\" name=\"like\" /&gt;&lt;/p&gt; &lt;p&gt;出生年月: &lt;select name=\"birthyear\"&gt; &lt;option value=\"\"&gt;1991&lt;/option&gt; &lt;option value=\"\"&gt;1992&lt;/option&gt; &lt;option value=\"\"&gt;1993&lt;/option&gt; &lt;option value=\"\"&gt;1994&lt;/option&gt; &lt;/select&gt;年 &lt;select name=\"birthmonth\"&gt; &lt;option value=\"\"&gt;1&lt;/option&gt; &lt;option value=\"\"&gt;2&lt;/option&gt; &lt;option value=\"\"&gt;3&lt;/option&gt; &lt;option value=\"\"&gt;4&lt;/option&gt; &lt;/select&gt;月 &lt;/p&gt; &lt;p&gt;个人简介:&lt;textarea rows=\"5\" cols=\"50\"&gt;&lt;/textarea&gt;&lt;/p&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; html5新增标签。 1234567891011&lt;header&gt;&lt;/header&gt;&lt;article&gt;&lt;/article&gt;&lt;footer&gt;&lt;/footer&gt;&lt;aside&gt;与article相关的辅助信息&lt;/aside&gt;&lt;section&gt;文中分块&lt;/section&gt;&lt;nav&gt;导航条&lt;/nav&gt;&lt;figure&gt;&lt;figcation&gt;&lt;/figcation&gt;&lt;/figure&gt;&lt;mark&gt;高亮&lt;/mark&gt;便于优化页面结构。 css3选择器。 12345678910111213141516171819202122232425262728293031323334属性选择器:语法:1E[att]&#123;&#125;例如 一张图片内有个属性为title=\"金毛\" 可以直接写img[title] &#123;border:.....&#125; 即选取了这张图片，简化了写class id等操作2input[type=\"text\"] &#123;.....&#125;&lt;input type=\"text\" /&gt;&lt;input type=\"submit\" /&gt;3&lt;div class=\"box1 layout\"&gt;&lt;/div&gt;由于以下两种都对该div生效所以使用次数较少div[class~=\"layout\"] &#123;...&#125;.layout &#123;....&#125;4&lt;div class=\"a-img\"&gt; &lt;/div&gt;&lt;div class=\"b-img\"&gt;&lt;/div&gt;div[class|=\"b\"] 必须要有-分割开单词css3div[class^=\"b\"] 满足前缀有该字母即可div[class&amp;=\"b\"] 以指定值为结尾div[class*=\"b\"] 包含指定值 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960伪类选择器结构性伪类选择器first-child/last-childnth-child()/nth-last-child()&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .nav1 li:first-child&#123;color: red;&#125; .nav1 li:last-child&#123;color: green;&#125; .nav1 li:nth-child(2)&#123;color: gray;&#125; .nav1 li:nth-child(even)&#123;color: #FF0000;&#125; .nav1 li:nth-child(odd)&#123;color: yellow;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;列表&lt;/h1&gt; &lt;ul class=\"nav1\"&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt;nth-of-type(odd/even..) 用于子元素不一样，根据类型取nth-child(αn+β)目标伪类选择器:target突出显示活动的html锚 突出显示当前被选中的html锚:target &#123;....&#125;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; :target &#123;background-color: #FFA500;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"#text1\"&gt;示例文字1&lt;/a&gt;|&lt;a href=\"#text2\"&gt;示例文字2&lt;/a&gt; &lt;div id=\"text1\"&gt; &lt;h1&gt;示例文字&lt;/h1&gt; &lt;p&gt;内容....&lt;/p&gt; &lt;/div&gt; &lt;div id=\"text2\"&gt; &lt;h1&gt;示例文字&lt;/h1&gt; &lt;p&gt;内容...&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 层级选择器 1234567E&gt;F&#123;...子元素选择器&#125;相邻兄弟选择器.nav1 li+li&#123;表示li后面的li被选中&#125;.nav1 .01+li&#123;表示类o1后面的li被选中&#125;E~F&#123;通用兄弟选择器&#125; 服务器端字体 即字体从服务器中加载下来 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; @font-face &#123; font-family:WebFont;/* 随便取的名字 */ src: url(\"引入字体文件的路径\")format(\"opentype/truetype\"); /* opentype扩展名为otf，后者拓展名为ttf*/ &#125; body&#123;font-family: \"微软雅黑\";&#125; body&#123;font-family: \"此处即可填入@font-face中定义的文字字体\";&#125; :target &#123;background-color: #FFA500;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"#text1\"&gt;示例文字1&lt;/a&gt;|&lt;a href=\"#text2\"&gt;示例文字2&lt;/a&gt; &lt;div id=\"text1\"&gt; &lt;h1&gt;示例文字&lt;/h1&gt; &lt;p&gt;内容....&lt;/p&gt; &lt;/div&gt; &lt;div id=\"text2\"&gt; &lt;h1&gt;示例文字&lt;/h1&gt; &lt;p&gt;内容...&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; iconfont字体 是以字体形式替代图片，代替图片整合 12345678在head内部写&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"iconfont.css\"&gt;在需要导入的地方写&lt;i class=\"iconfont\"&gt;&amp;#xe644;&lt;/i&gt; &amp;#xxx为图标的unicon码如果需要更改大小，style要放在link后，后声明的优先生效。因为iconfont为字体，可以实现iconfont:hover &#123;font-size:36px&#125; 鼠标放上去图标变大在demounicon内看对应的代码。 css3新增属性 12345678910111213141516171819background-clip:border-box/padding-box/content-box背景被裁减到边框盒/内边距框/内容框background-origin:border-box/padding-box/content-box改变平铺repeat图片的起始位置background-size:length/percentage/cover/contentcover:按照最长边的长度对背景图片进行拉伸。content:按照最短边拉伸在一个元素中添加多张背景图，第一张定义背景图在最上面，最后定义的在最下面。border-radius:用于将直角变成圆角border-image:将图片作为边框repeat平铺/round铺满/stretch拉伸(默认)盒阴影box-shadow:blur(模糊距离)/inset/ouset(内外部阴影)/spread(阴影尺寸) 2D效果 css3过渡，可以在不使用flash和JavaScript的情况下添加效果。 1234567891011121314151617181920212223高版本支持transition属性，低版本需要加前缀-webkit-transition-property:作用的属性transition-duration:持续时间transition-timing-function:时间曲线，默认为easelinear:匀速变化，ease先慢速后变快，ease-in慢速开始，ease-out慢速结束ease-in-out慢速开始和结束cube-bezier(n,n,n,n)n取值0到1移动transform，直接写在css内即可.boxk&#123;.....&#125;transform:rotate(30deg) 旋转30度 度用deg表示transform:translate(100px,20px) 水平移动transform:translateX()transform:translateY()缩放，填入倍数。scaletransform:scale() X/Yskew扭曲（拉扯 填入角度transform-origin:设置变化的起始点综合在一起，transform:用空格隔开。 3d效果 123456789101112131415161718192021transform 元素应用2d或者3d转换transform-origin 改变被转换元素位置transform-style 规定显示效果规定如何在3d空间中呈现被嵌套的元素flat: 不保留3d位置 preserve-3d保留3d位置perspective 规定3d元素透视效果 一般写入数值例如800px，定义透视点，一般写在父容器从而展现3d效果数值越小离得越近,如果写在元素内，每个元素效果是一样的如果写在父容器内，边侧的元素会因为透视点在另一侧而导致效果有点不同perspective-origin 规定视点位置backface-visibility 定义元素在不面对屏幕的时候是否可见背面可见/隐藏 visibility hidden3d效果实现transform-style:preserve-3dtransition:all 2stransform:rotateperspective:xxpx. 实现效果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; padding: 0; &#125; .box1 &#123; width: 1000px; height: 300px; background-color: #eee; margin: 100px auto; &#125; p &#123; width: 200px; height: 200px; border: 1px #000 solid; float: left; margin: 50px; transform-style: preserve-3d; perspective: 800px; &#125; span &#123; display: block; width: 200px; height: 200px; background: rgba(255, 0, 0, .5); &#125; span:nth-child(1):hover &#123; transform: rotateX(45deg); transition: all 2s; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box1\"&gt; &lt;p&gt;&lt;span&gt;x旋转&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;y旋转&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;z旋转&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 六面体旋转透视 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;无标题文档&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0; padding: 0; &#125; ul li &#123; list-style: none; &#125; .box &#123; width: 600px; height: 600px; background: #eee; margin: 0 auto; position: relative; perspective: 1200px; perspective-origin: left top; &#125; .box ul &#123; width: 300px; height: 300px; border: 1px #000 solid; position: absolute; left: 0; right: 0; bottom: 0; top: 0; margin: auto; transform-style: preserve-3d; transition: all 5s; &#125; .box ul:hover &#123; transform: rotateX(360deg) rotateY(360deg); &#125; .box ul li &#123; width: 300px; height: 300px; text-align: center; line-height: 300px; font-size: 48px; position: absolute; backface-visibility: visible; &#125; .box ul li:nth-child(1) &#123; background: rgba(255, 0, 0, .5); transform: translateY(-150px) rotateX(90deg); &#125; .box ul li:nth-child(2) &#123; background: rgba(0, 255, 0, .5); transform: translateY(150px) rotateX(-90deg); &#125; .box ul li:nth-child(3) &#123; background: rgba(0, 0, 255, .5); transform: translateX(-150px) rotateY(-90deg); &#125; .box ul li:nth-child(4) &#123; background: rgba(255, 0, 255, .5); transform: translateX(150px) rotateY(90deg); &#125; .box ul li:nth-child(5) &#123; background: rgba(255, 255, 0, .5); transform: translateZ(150px); &#125; .box ul li:nth-child(6) &#123; background: rgba(0, 255, 255, .5); transform: translateZ(-150px) rotateY(180deg); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"box\"&gt; &lt;ul&gt; &lt;li&gt;上&lt;/li&gt; &lt;li&gt;下&lt;/li&gt; &lt;li&gt;左&lt;/li&gt; &lt;li&gt;右&lt;/li&gt; &lt;li&gt;前&lt;/li&gt; &lt;li&gt;后&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617第二种，style内部定义一个动画@keyframes animationname(自己起动画名) &#123; from&#123;left:0;top:0;&#125; 起始位置 to&#123;&#125; 结束位置&#125;属性 animation 所有动画属性的简写animation-nameanimation-durationanimation-timing-function 规定速度曲线animation-delay 规定动画何时开始animation-iteration-count 规定动画的播放次数infiniteanimation-direction:normal 设置方向，可以设置来回alternate循环。animation-play-state:paused在元素中的style中使用 animation:animationname; 进行绑定","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"HTMLCSS网页设计学习笔记(3)","date":"2021-09-26T12:19:47.283Z","path":"posts/a5948cc2.html","text":"CSS常用选择器补充 群组选择器：用逗号隔开 包含选择器：用空格隔开 伪类选择器，一般与超链接使用。 12345678a:link&#123;属性:属性值;&#125;:超链接的初始状态a:visited: 超链接被访问后状态a:hover:鼠标滑过超链接的状态a:active:鼠标按下超链接的状态（不松手一般只写a&#123;color:red;&#125;a:hover&#123;color:..&#125;两个就够了 浏览器默认字体宋体16px。 文本类属性 1234567891011121314151617181920&#123;font-family:字体1，字体2...&#125; 中文字体以及含空格英文字体要加引号。优先将英文字体写前面，因为中文字体会影响英文字体font-size默认情况下1em=16px，0.75em=12px。em会根据父容器设置的影响，若父容器有设置font-size为其他值，则1em会默认为该值。color：rgb()/rgba(0,255,255,a) a为透明度0-1,0为全透明 颜色font-weight:bold/bolder/normal/100-900bold和bolder效果差距不大，100-500为普通，600--900为加粗。font-style: italic倾斜 oblique倾斜 normal &lt;i&gt;字体倾斜&lt;/i&gt;text-align:center justify left righttext-height 行高text-decoration:underline ...text-indent:行首缩进。取负值的时候会隐藏掉文本。 ul li列表属性 12345678910ul li&#123;&#125;list-style-加以下的属性type:disc实心圆 circle squareimage:url 使用图片作为列表符号position: outside inside 列表符号的位置style: none 去掉样式 背景属性 1234567background-colorbackground-image 背景图片background-repeat 重复 repeat-x/y nobackground-position 水平方向 垂直方向 解决浮动高度塌陷的方法： 1 父元素声明overflow：hidden 2 浮动元素下方添加空div，并给元素添加声明，clear：both height：0 overflow：hidden 盒模型：content内容，填充padding，border边框，margin边界 1234567891011121314文本溢出overflow: visible/hidden/scroll(内容会被裁切 浏览器会显示滚动条)/auto(自动出现滚动条)inherit 继承父元素。white-space：处理元素内的空白(代码中的空格和回车)normal/pre(空白会被浏览器保留)/nowrap(不会换行直到遇到br标签)/pre-wrap(保留空白，正常换行)pre-line(合并空白，保留换行)/inherittext-overflow:clip(裁切)/ellipsis(显示省略号)ulli列表为例CSS样式width:300px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;background:url(xxx) no-repeat left 50%(将图片位置固定在居中位置);padding-left:20px; 可变元素 applet、button，del，iframe，ins，map，object… display属性，可以改变元素的类型。 元素定位设置 1234position:static/absolute/relative/fixed默认。left/top/right/bottom，可以为正负fixed:右边有滚动条也会固定在画面中 z-index:auto/number 设置元素z轴数值，改变层叠关系 背景图要写positon：relative，其余覆盖的元素写绝对。用截图工具可以测量px值 锚点链接，用于页面内的跳转。比如回到顶部。 1234定义锚点名&lt;标记 id=\"\"&gt; &lt;/标记&gt;命名锚点连接&lt;a href=\"#标记\"&gt;&lt;/a&gt; 利用锚点实现轮播 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin: 0;padding: 0;&#125; img&#123;display: block;&#125; .box&#123;position: relative; width: 500px;height: 375px;border: 1px #000 solid;&#125; .btn a&#123;float: left; width:30px;height: 30px;background: rgba(0,0,0,.5); text-align: center;line-height:30px;color: #fff;text-decoration: none; margin-right:5px; &#125; .btn a:hover&#123;background: rgba(0,0,0,1);&#125; .btn&#123;position: absolute;right: 5px;bottom: 10px;&#125; .list&#123;width: 500px;height: 375px;overflow:hidden;&#125; /* 此处overflow auto可以看到图片容器变成滚动条，当点击 锚点的时候自动跳转，使用hidden把滚动条去掉就可以实现效果*/ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"\"class=\"box\"&gt; &lt;div id=\"\" class=\"btn\"&gt; &lt;a href=\"#img1\"&gt;1&lt;/a&gt; &lt;a href=\"#img2\"&gt;2&lt;/a&gt; &lt;a href=\"#img3\"&gt;3&lt;/a&gt; &lt;a href=\"#img4\"&gt;4&lt;/a&gt; &lt;/div&gt; &lt;div id=\"\"class=\"list\"&gt; &lt;img src=\"img/0.png\" id=\"img1\"&gt; &lt;img src=\"img/1.png\" id=\"img2\"&gt; &lt;img src=\"img/2.png\" id=\"img3\"&gt; &lt;img src=\"img/3.png\" id=\"img4\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 宽高自适应：min-height指定最小高度。 12341 min-height:600px;_height:600px两句作用一样，但是不同浏览器不一定能识别，保证兼容性2 height:auto!important;height:600px 保证兼容 低版本浏览器的bug 12345678910div中图片间隙会将下方撑大三像素。hack1: div和img写在同一行hack2: img转为块元素低版本下50%+50%&gt;100% 解决方法 clear:right鼠标指针bugstyle:hand /pointer使用!important将前置的属性级别提到最高，默认情况下是后声明的生效。使用_xxx,比如_style是针对ie6以下的声明。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"HTMLCSS网页设计学习笔记(2)","date":"2021-09-22T12:14:57.420Z","path":"posts/bc8fbd83.html","text":"第二部分的小节CSS篇。 span标签表示将文字包裹起来的一个容器。div，通用容器。 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"color: #555;margin: auto;width: 100px;\"&gt; &lt;p style=\"text-align: center;\"&gt; &lt;span style=\"background-color: gray;color: white;font-size: 24px;\"&gt;边城&lt;/span&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;在川湘交界的茶峒附近&lt;/b&gt; &lt;!-- b标签加粗 --&gt; &lt;span style=\"color: #41A863;\"&gt; 小溪白塔旁边，住着主人公翠翠和她爷爷老船夫。 茶峒城里有个船总叫顺顺，他有两个儿子， &lt;/span&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;老大叫天保，老二叫傩送。&lt;/b&gt; 端午节翠翠去看龙舟赛，偶然相遇相貌英俊的青年水手傩（nuó）送， 傩送在翠翠的心里留下了深刻的印象。 &lt;/p&gt; &lt;p&gt; 同时，傩送的兄长天保也喜欢上了翠翠，并提前托媒人提了亲。 天保告诉傩送一年前他就爱上了翠翠， 而傩送告诉天保他两年前就爱上了翠翠，天保听了后也吃了一惊。 &lt;/p&gt; &lt;p&gt; 然而此时，当地的团总以新磨坊为陪嫁，想把女儿许配给傩送。 而傩送宁肯继承一条破船也要与翠翠成婚。 &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; div容器特点，默认宽度100%，高度0。 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html style=\"background-color: #ddd;\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; &lt;/style&gt; &lt;/head&gt; &lt;body style=\"margin: 0;\"&gt; &lt;!-- 让边框去除 --&gt; &lt;div id=\"banner\"&gt; &lt;img src=\"img/QQ图片20210922204422.png\" style=\"width: 100%;\"&gt; &lt;/div&gt; &lt;div id=\"navigation\" style=\"height: 80px;line-height: 80px;text-align: center;background-color: white;\"&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;首页&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;关于王力&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;产品世界&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;新闻中心&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;网络事件&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;联系我们&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;关于我们&lt;/a&gt; &lt;a href=\"0\" style=\"text-decoration: none;color: black;margin: 0 15;\"&gt;网络新闻&lt;/a&gt; &lt;/div&gt; &lt;div id=\" bottom\" style=\"height: 40x;line-height: 40px;text-align: center;font-size: 14px;color: gray;\"&gt; 版权所有:浙江王力门业有限公司 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 内部样式，样式选择器 ID选择器，使用#号。标签选择器div。类别选择器.nav。*通用选择器。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; html&#123; background-color: #ddd; &#125; body&#123; margin: 0; &#125; #navigation&#123; height: 80px;line-height: 80px;text-align: center;background-color: white; &#125; #bottom&#123; height: 40px;line-height: 40px;text-align: center;font-size: 14px;color: gray; &#125; .nav&#123; text-decoration: none;color: black;margin: 0 15; &#125; #banner img&#123; style=\"width: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 让边框去除 --&gt; &lt;div id=\"banner\"&gt; &lt;img src=\"img/QQ图片20210922204422.png\"&gt; &lt;/div&gt; &lt;div id=\"navigation\"&gt; &lt;a href=\"0\" class=\"nav\"&gt;首页&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;关于王力&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;产品世界&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;新闻中心&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;网络事件&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;联系我们&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;关于我们&lt;/a&gt; &lt;a href=\"0\" class=\"nav\"&gt;网络新闻&lt;/a&gt; &lt;/div&gt; &lt;div id=\"bottom\"&gt; 版权所有:浙江王力门业有限公司 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 样式表层叠 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; #navigation&#123; text-align: center; &#125; #navigation .last&#123; border: none; &#125; .item&#123; text-decoration: none; color: black; border-right: solid 1px #808080; padding: 0 15px;/* 内边距填充 */ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"navigation\"&gt; &lt;a href=\"0\" class=\"item\"&gt;首页&lt;/a&gt; &lt;a href=\"0\" class=\"item\"&gt;办公家居&lt;/a&gt; &lt;a href=\"0\" class=\"item\"&gt;数码科技&lt;/a&gt; &lt;a href=\"0\" class=\"item\"&gt;母婴&lt;/a&gt; &lt;a href=\"0\" class=\"item\"&gt;团购&lt;/a&gt; &lt;a href=\"0\" class=\"item last\" style=\"border: none;\"&gt;秒杀活动&lt;/a&gt; &lt;!-- 行内样式表优先级高 --&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css优先级 行内样式》id选择器》类选择器》标签选择器》通用选择器 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; #p1&#123; color: blue; &#125; *&#123; color: orange; &#125; .pp&#123; color: green; &#125; p&#123; color: red; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p class=\"pp\" id=\"p1\" style=\"color: slateblue;\"&gt; 猜猜我是什么颜色 &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 字体样式 1234567891011colorfont-family 字体样式font-sizefont-weight:bold 加粗font-style:italic 倾斜text-indent 首行缩进text-align: centerline-height 行高height:100px;background-color:gray;line-height:100px 垂直居中行高与高度一致使文字垂直方向居中text-decoration:underline 下划线 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; html,body&#123; margin: 0; height: 100%; &#125; body&#123; background-image: url(../002新闻/img/1.png); background-repeat: no-repeat; background-position: center center; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 元素浮动 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .green &#123; width: 100px; height: 100px; background-color: green; float: left; &#125; .red &#123; width: 200px; height: 150px; background-color: red; &#125; .a &#123; width: 20%; height: 200px; background-color: green; &#125; .b &#123; width: 60%; height: 200px; background-color: red; &#125; .c &#123; width: 20%; height: 200px; background-color: blue; &#125; .a, .b, .c &#123; float: left; &#125; .hh &#123; width: 100%; height: 360px; background-color: black; &#125; .outer &#123; height: 200px; /* 若不设置该属性 */ overflow: auto; clear: left;/* 当前元素不会受到left right both元素的影响 */ &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;文字环绕效果&lt;/p&gt; &lt;div class=\"green\"&gt;&lt;/div&gt; &lt;div class=\"red\"&gt;&lt;/div&gt; &lt;p&gt;横向排版&lt;/p&gt; &lt;div class=\"outer\"&gt; &lt;div class=\"a\"&gt;&lt;/div&gt; &lt;div class=\"b\"&gt;&lt;/div&gt; &lt;div class=\"c\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 为了不影响后续元素的排列，浮动要包含于父容器内 --&gt; &lt;div class=\"hh\"&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 元素边距margin 1234*&#123; margin: 0;&#125;填充padding（内边距）随着填充增加，元素会被撑大。 表单补充 1234567891011121314&lt;input type=\"text\" value=\"默认值,此处文本框内输入内容并不会消失\" placeholder=\"请输入您的姓名\"&gt;用placehodler实现输入内容后提示内容消失下拉菜单&lt;select&gt; &lt;option&gt;&lt;/option&gt; &lt;option&gt;&lt;/option&gt; &lt;option&gt;&lt;/option&gt;&lt;/select&gt;多行文本框&lt;textarea cols=“50”代表一行能放50个字符 rows=\"5\"&gt; 内部可以被填入内容&lt;/textarea&gt; css文件的引用 12&lt;link rel&#x3D;&quot;stylesheet&quot; typye&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;填写路径&quot;&gt;rel定义关联","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"HTMLCSS网页设计学习笔记(1)","date":"2021-09-19T11:39:03.000Z","path":"posts/97a2ee40.html","text":"web前端的第一部分：HTML+CSS 编程软件Hbuilderx 第一个helloworld，使用的内置浏览器运行 12345678910&lt;!DOCTYPE html&gt; # 告诉编译器这个是用html5（必须）&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;你好 helloworld&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617 &lt;body&gt; &lt;h1&gt;你好 helloworld&lt;/h1&gt; &lt;h3&gt;你好 helloworld&lt;/h3&gt; &lt;h6&gt;你好 helloworld&lt;/h6&gt; &lt;h4&gt;你好 helloworld&lt;/h4&gt; 标题等级h1-h6 &lt;i&gt;2021.9.19&lt;/i&gt; &lt;hr /&gt; // i表示斜体 // &lt;hr&gt; 横的分割线 &lt;p&gt;aaaaa&lt;/p&gt; &lt;br&gt;bbbbb // p 新段落 br换行都是单独标签 b加粗 // 源代码中的空格用&amp;nbsp;表示 &lt;/body&gt;&lt;/html&gt; 插入图片 1&lt;img src &#x3D; &quot;&quot;&gt; 无序列表 1&lt;ul&gt;（unordered list）&lt;&#x2F;ul&gt; 有序列表 1&lt;ol&gt; &lt;&#x2F;ol&gt; ，列表内项目用记述。 超链接语法 1&lt;a href &#x3D; &quot;跳转地址&quot;&gt; 标题 &lt;&#x2F;a&gt; 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;百度新闻列表&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;科技&lt;img src=\"img/1.png\"&gt;&lt;/h1&gt; &lt;hr /&gt; &lt;ul&gt; &lt;li&gt; &lt;a href=\"http://www.baidu.com\"&gt;中子星内比例&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"http://www.sohu.com\"&gt;库克分享inphone xs&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ol&gt; &lt;li&gt; &lt;a href=\"http://www.baidu.com\"&gt;中子星内比例&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"http://www.sohu.com\"&gt;库克分享inphone xs&lt;/a&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/body&gt;&lt;/html&gt; 下载页面上无法保存的图片，浏览器按F12进入控制面板查看源代码，右边部分有图片下载地址。 超链接补充 1&lt;a herf = \"http://www.baidu.com\" target=\"_blank\"题目&lt;/a&gt; 使用target指定在新窗口中打开超链接 列表补充，样式有三种实心圆，空心圆，实心方块 123&lt;ul type=\"disc\"&gt; &lt;/ul&gt; 实心圆空心圆: circle方块: square 有序列表补充，样式：数字，字母，罗马字母 12345&lt;ol type=\"1\"&gt; &lt;/ol&gt; 数字&lt;ol type=\"a\"&gt; &lt;/ol&gt; 小写字母&lt;ol type=\"A\"&gt; &lt;/ol&gt; 大写字母&lt;ol type=\"i\"&gt; &lt;/ol&gt; 小写罗马&lt;ol type=\"I\"&gt; &lt;/ol&gt; 大写罗马 图片补充 1&lt;img src=\"\" title=\"鼠标划上去显示的文字\" alt=\"图片加载失败的时候显示的文字\" 文字格式补充 1234&lt;del&gt;给文字增加删除线&lt;/del&gt; &lt;sup&gt;把文字变成上标比如10的平方&lt;/sup&gt;&lt;u&gt;给文字增加下划线&lt;/u&gt;&lt;center&gt;文字居中&lt;/center&gt; 百度网盘页面设计 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=\"../img/1.png\" width=\"100%\"/&gt; &lt;p&gt; &lt;a href=\"../index.html\"&gt; &lt;img src=\"../img/3.png\" width=\"100px\"&gt; &lt;/a&gt; &lt;/p&gt; &lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=\"img/1.png\" width=\"100%\"/&gt; &lt;p&gt; &lt;a href=\"one/index.html\"&gt; &lt;img src=\"img/2.png\" width=\"100px\"/&gt;one &lt;/a&gt; &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 表格制作 12345678910&lt;table&gt; 表示表格 &lt;tr&gt; 表示每一行 &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 表示一个单元格 &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;表格&lt;/h3&gt; &lt;table border=\"1px\" cellspacing=\"0\"&gt; &lt;col width=\"100px\"&gt; &lt;col width=\"100px\"&gt; &lt;col width=\"100px\"&gt; &lt;tr align=\"center\"&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=\"100px\" align=\"center\"&gt;mingzi&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;44&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;33&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;55&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;66&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=\"100px\" align=\"center\"&gt;fenshu&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt; &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 快速建表 6行7列 1tr*6&gt;td*7 按tab补全 td内用row/col span合并单元格。制作表格 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=\"1px\" cellspacing=\"0\"&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"100px\"/&gt; &lt;col width=\"200px\"/&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td colspan=\"7\"&gt;个人简历&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;性别&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td rowspan=\"4\"&gt;照片&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td&gt;学历&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;籍贯&lt;/td&gt; &lt;td colspan=\"3\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td&gt;电话&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;政治面貌&lt;/td&gt; &lt;td colspan=\"3\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td&gt;毕业院校&lt;/td&gt; &lt;td colspan=\"5\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\" align=\"center\"&gt; &lt;td&gt;求职意向&lt;/td&gt; &lt;td colspan=\"6\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 表格补充 1234567891011121314151617&lt;td&gt; &lt;/td&gt; 表示单元格&lt;th&gt; &lt;/th&gt; 将文字加粗居中（标题）&lt;col width=\"\"&gt; 标签可以简化为 &lt;colgroup span=\"5\" width=\"\"&gt; 将一整组的标签进行设置 表格的标准&lt;table&gt; &lt;thead&gt; 表格的页眉 &lt;/thead&gt; &lt;tbody&gt; 表格主体 &lt;/tbody&gt; &lt;tfooter&gt; 表格页脚 &lt;/tfooter&gt;&lt;/table&gt; 注释 ：ctrl shift / 1&lt;!-- --&gt; 表单 1234&lt;form&gt; &lt;input type=\"text / password.....\"&gt; input必须放在form标签内才能生效&lt;/form&gt; 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"http://www.baidu.com\" method=\"\"&gt; &lt;table width=\"600px\" border=\"1px\" cellspacing=\"0\"&gt; &lt;tr height=\"40px\"&gt; &lt;td rowspan=\"4\"&gt;信息&lt;/td&gt; &lt;td colspan=\"2\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\"&gt; &lt;td&gt;用户名:&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"loginname\" id=\"\" value=\"\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\"&gt; &lt;td&gt;密码:&lt;/td&gt; &lt;td&gt;&lt;input type=\"password\" name=\"pwd\" id=\"\" value=\"\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr height=\"40px\"&gt; &lt;td colspan=\"2\"&gt; &lt;input type=\"submit\" value=\"提交\" /&gt; &lt;input type=\"reset\" value=\"重置\" /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;type指定类型，name赋值才能上传数据，action属性表示提交表单数据的名字，value是容器显示名字。 点击提交之后，会将数据上传到指定网站。 method属性设置数据的读取方式，get表示发送一个请求接收数据，填写的内容会出现上网址后面。不可以用于提交大量数据。 post用于发送一个请求，通常为提交数据，较为隐蔽的方式。用户不可见","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"HTML","slug":"HTML","permalink":"https://nari2021.github.io/my-blog/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://nari2021.github.io/my-blog/tags/CSS/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Python学习笔记(13)","date":"2021-05-29T02:28:33.000Z","path":"posts/f568f53a.html","text":"12345678910111213141516q = Queue(5) # 最大数5q.put('A')q.put('B')q.put('C')q.put('D')q.put('E')print(q.qsize())# q.put('F',timeout=3) # 3s 超时后会报错queue.full# q.put('F') # 如果队列满了只能等待# put有三个参数,obj,block=,timeout=# q.empty()if not q.full(): q.put('F', timeout=3)else: print('队列已满') 12345678910111213141516171819202122232425262728293031def download(q): images = ['girl.jpg', 'boy.jpg', 'man.jpg'] for image in images: print('正在下载:', image) time.sleep(0.5) q.put(image)def getfile(q): while True: try: file = q.get(timeout=5) print('&#123;&#125;保存成功!'.format(file)) except: print('完毕') breakif __name__ == '__main__': q = Queue(5) p1 = Process(target=download, args=(q,)) # 加括号传的是调用结果 p2 = Process(target=getfile, args=(q,)) p1.start() p1.join() p2.start() p2.join() print('over')","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(12)","date":"2021-05-27T02:12:51.000Z","path":"posts/ec73c47b.html","text":"time模块 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# time模块import timet = time.time()print(t) # 1622084492.9106774# time.sleep(3) # 传入的是秒t1 = time.time()print(t1 - t)s = time.ctime(t)# 把time.time方法的绝对时间（以秒为单位# 转化为字符串# Thu May 27 11:05:57 2021print(s)t = time.localtime(t)print(t) # 以元组形式存储# time.struct_time(tm_year=2021, tm_mon=5, tm_mday=27, tm_hour=11, tm_min=8,# tm_sec=23, tm_wday=3, tm_yday=147, tm_isdst=0)# 将元组换回时间戳tt = time.mktime(t)print(tt) # 1622085023.0 没有精度值# 元组转为字符串s = time.strftime('%Y-%m-%d %H:%M:%S')# 函数内有格式说明print(s) # 2021-05-27 11:16:11''' %Y Year with century as a decimal number. %m Month as a decimal number [01,12]. %d Day of the month as a decimal number [01,31]. %H Hour (24-hour clock) as a decimal number [00,23]. %M Minute as a decimal number [00,59]. %S Second as a decimal number [00,61]. %z Time zone offset from UTC. %a Locale's abbreviated weekday name. %A Locale's full weekday name. %b Locale's abbreviated month name. %B Locale's full month name. %c Locale's appropriate date and time representation. %I Hour (12-hour clock) as a decimal number [01,12]. %p Locale's equivalent of either AM or PM. '''s = time.strptime('2021/5/27', '%Y/%m/%d')print(s) # ptime 转为元组import datetimeprint(datetime.time.hour)# &lt;attribute 'hour' of 'datetime.time' objects&gt;print(time.localtime().tm_hour) # 11print(datetime.date.today()) # 2021-05-27timedel = datetime.timedelta(hours=2,weeks=3)# 时间差print(timedel)now = datetime.datetime.now()result = now + timedelprint(result) # 2021-05-27 13:43:37.647334 12345678910111213141516171819202122232425262728293031323334# random模块import randomran = random.random() # 0~1之间的随机小数print(ran)ran = random.randrange(1, 10, 2) # 步长2print(ran)ran = random.randint(1, 20)list1 = ['club 2 ', 'club 5', 'space 4', 'heart13']ran = random.choice(list1)# 随机选print(ran)ran = random.shuffle(list1) # 无返回值print(list1) # 随机打乱# 验证码def func(): code = '' for i in range(4): ran1 = chr(random.randint(0, 9)) ran2 = chr(random.randint(65, 90)) ran3 = chr(random.randint(97, 122)) r = random.choice([ran1, ran2, ran3]) code += r return code# chr ord ascii互转 1234567import hashlib # 加密算法模块msg = '于鹏中午一起吃饭去'md5 = hashlib.md5(msg.encode('utf-8'))# 不支持中文print(md5.hexdigest())# hexdigest取16进制表示，没有自动联想 12345qq = input('输入qq号码')if len(qq)&gt;=5 and qq[0]!='0': print('合法')else: print('不合法') 正则表达式 123456789101112131415s = '娜扎佟丽娅热巴'result = re.match('佟丽娅', s)# 默认从头匹配，如果匹配不成功返回noneprint(result)# 正则表达式,匹配字符串result = re.search('佟丽娅', s)# span为查找到的范围print(result.span()) # (2, 5)# result=s.find('佟丽娅')# print(result)print(result.group())# 提取到匹配的内容部分 groupprint(result.groups()) []表示指定范围的一个字符 1234s = '哈哈23f55216'result = re.search('[0-9][a-z]',s)print(result) # &lt;re.Match object; span=(3, 5), match='3f'&gt;# [] 表示一个范围，范围内为需要匹配的指定范围 12345678910111213s = 'ab56cd7vg42dfa8saf4a00'result = re.findall('[a-z][0-9][a-z]', s)# search只会匹配第一个# findall匹配所有print(result) # ['d7v', 'a8s']result = re.findall('[a-z][0-9]+[a-z]')# 正则验证次数# * :&gt;=0次# + :&gt;=1次# ? :0/1次# *? +? ?? : 前面三种字符的非贪婪模式，尽可能少的匹配# &#123;m,n&#125; : 规定次数# &#123;m,n&#125;？ : 非贪婪 1234567891011121314151617181920import re# qq号验证 5-11位qq = '456894562'# 开头不能为0 1-9result = re.match('^[1-9][0-9]&#123;4,10&#125;$', qq)print(result)# '.' 用于匹配除换行符之外的所有字符# '^' 用于匹配行首# '$' 用于匹配除换行符之外的行尾# 表示字母或者数字开头# [0-9a-zA-Z]username = 'admin001'result = re.match('[a-zA-Z][0-9a-zA-Z]&#123;5,&#125;', username)print(result)result = re.search('^[a-zA-Z][0-9a-zA-Z]&#123;5,&#125;$', username)print(result) 123456msg = 'aa*py ab.txt bb.py kk.png uu.py apyb.txt'# result = re.findall(r'\\w+.py\\b', msg)# ['aa*py', 'bb.py', 'uu.py'] '.'表示任意字符result = re.findall(r'\\w+\\.py\\b', msg)# 不是正则的\\b要双\\ 或者+r 不转译print(result) 123456789101112n = '1000'# 匹配数字result = re.match(r'[1-9]?\\d?$|100$', n)# 第一位1-9 ？表示非贪婪。\\d 任意数字非贪婪匹配两位￥做结尾# |100$ 表示或者100print(result)# (word|word|word) 表示或者 [word] 表示的是一个字母或者数字email = '12345649@qq.com'result = re.match(r'\\w&#123;5,20&#125;@(163|126|qq)\\.(com|cn)$', email)print(result) 123456789101112131415161718192021msg = '&lt;html&gt;&lt;h1&gt;abc&lt;/h1&gt;&lt;/html&gt;'result = re.match(r'&lt;(?P&lt;name1&gt;\\w+)&gt;&lt;(?P&lt;name2&gt;\\w+)&gt;(.+)&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;', msg)print(result)print(result.group(1))print(result.group(2))print(result.group(3))# 引用分组匹配内容# 1.number## 2. (?P&lt;name&gt;正则)# re:# match# search# findall# sub : 将匹配到的内容进行替换# re.sub('正则表达式', '想替换的内容', '替换（搜索）的字符串', count)# split 匹配到表达式的内容后切片 123456789101112131415161718192021222324phone = '15901018868'result = re.match(r'1\\d&#123;9&#125;[0-35689]$', phone)print(result)# 爬虫phone = '010-12345678'result = re.match(r'(\\d&#123;3&#125;|\\d&#123;4&#125;)-(\\d&#123;8&#125;)$', phone)# 小括号表示分组 方便group提取print(result)print(result.group(1))print(result.group(2))msg = '&lt;html&gt;abc&lt;/html&gt;'msg1 = '&lt;h1&gt;hello&lt;/h1&gt;'result = re.match(r'&lt;([\\w]+)&gt;(.+)&lt;/\\1&gt;$', msg)# \\1 代表第几个括号的引用print(result.group(1))print(result)# msg = '&lt;html&gt;&lt;h1&gt;abc&lt;/html&gt;&lt;/h1&gt;' # Nonemsg = '&lt;html&gt;&lt;h1&gt;abc&lt;/h1&gt;&lt;/html&gt;'result = re.match(r'&lt;([\\w]+)&gt;&lt;([\\w]+)&gt;(.+)&lt;/\\2&gt;&lt;/\\1&gt;$',msg)print(result) 线程进程 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from multiprocessing import Processfrom time import sleepimport osdef task1(): while True: sleep(1) print('任务1', os.getpid(), '---', os.getppid()) # 当前进程id # getppid 为父进程def task2(): while True: sleep(1) print('任务2', os.getpid(), '---', os.getppid())'''进程初始化class Process(): name: str daemon: bool pid: Optional[int] exitcode: Optional[int] authkey: bytes sentinel: int # TODO: set type of group to None def __init__(self, group: Any = ..., target: Optional[Callable] = ..., name: Optional[str] = ..., args: Iterable[Any] = ..., kwargs: Mapping[Any, Any] = ..., *, daemon: Optional[bool] = ...) -&gt; None: ...'''if __name__ == '__main__': # 创建进程 os.getpid() p = Process(target=task1, name='任务1') # p.run() # 不会启动进程 p1 = Process(target=task2, name='任务2') p.start() p1.start() # task1() # task2() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from multiprocessing import Processfrom time import sleepimport osdef task1(s, name): while True: sleep(s) print('任务1', os.getpid(), '---', os.getppid(), name) # 当前进程id # getppid 为父进程def task2(s, name): while True: sleep(s) print('任务2', os.getpid(), '---', os.getppid(), name)'''进程初始化class Process(): name: str daemon: bool pid: Optional[int] exitcode: Optional[int] authkey: bytes sentinel: int # TODO: set type of group to None def __init__(self, group: Any = ..., target: Optional[Callable] = ..., name: Optional[str] = ..., args: Iterable[Any] = ..., kwargs: Mapping[Any, Any] = ..., *, daemon: Optional[bool] = ...) -&gt; None: ...'''m = 1list1 = []if __name__ == '__main__': p = Process(target=task1, name='任务1', args=(1, 'aa')) p1 = Process(target=task2, name='任务2', args=(2, 'bb')) # args参数为可迭代的，传入一个元组(1,) # task中就能接到这个参数赋给sleep p.start() p1.start() number = 1 while True: global m # 由于进程独立处理的，所以不能共享变量 # 即不可变类型 number+=1 sleep(0.2) if number == 100: p.terminate() p1.terminate() break else: print('---',number)'''process = Process(target=函数名,name=进程名,args=传参）process对象methodp.start 启动进程p.run 执行任务没有启动进程terminate 终止''' 自定义 1234567891011121314151617181920class MyProcess(Process): def __init__(self, name): super(MyProcess, self).__init__() self.name = name # 重写run方法 def run(self): n = 1 while True: print('进程名字:' + self.name) print('&#123;&#125;----&gt;自定义进程,n:&#123;&#125;'.format(self.name, n)) n += 1if __name__ == '__main__': p = MyProcess('小明') p.start() p1 = MyProcess('小红') p1.start()","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(11)","date":"2021-05-25T01:43:25.000Z","path":"posts/c75e97b8.html","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 常用魔术方法# 魔术方法是在特定时刻自动触发，不需要调用# __init__ 参数至少接收一个self对象# 触发时机：初始化对象时触发# __new__# 触发时机：在实例化时触发class Person: def __init__(self): # self.name = name print('-----&gt;init') def __new__(cls, *args, **kwargs): print('------&gt;new') # new开辟一个新空间内存地址 # 实际上把系统底层的new魔术方法覆盖了 # 把系统底层的也恢复 return super().__new__(cls, *args, **kwargs) # 返回的是地址 传给init的self def __call__(self, name): print('---------&gt;call') print('执行对象得到的参数是,', name) # call魔术方法 # 触发时机，将对象当作函数调用时触发。 # 对象() 至少一个self接收对象 def __del__(self): # 析构函数 print('-----&gt;del')p = Person()p('hello') # __call__ 如果不声明会报错typeerrorprint(p) # p = Nonep1 = p # 指向同一个地址# 删除地址的引用del p1 # 删除p1对改地址的引用# import sys# sys.getrefcount() 获取调用次数# 当一块空间没有了任何引用，次数为0 12345678910111213# __str__class Person: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return '姓名是' + self.name + '年龄' + str(self.age) # 触发时机。打印对象名的时候触发 p = Person('tom', 20)print(p) # 打印的不是地址，而是str魔术方法内的返回值 1234567891011121314151617181920212223242526272829303132333435363738class Student: # __age = 18 def __init__(self, name, age): self.__name = name self.__age = age self.__score = 59 def __str__(self): return '姓名:&#123;&#125;,年龄&#123;&#125;,分数&#123;&#125;.'.format(self.__name, self.__age, self.__score) # def getAge(self): # return self.__age # 一定要先有 getxxx @property def age(self): return self.__age # 再有set，依赖于get。函数名.setter修饰器 @age.setter def age(self, age): if 0 &lt; age &lt; 100: self.__age = age else: print('不在规定范围内')n = Student('韩梅梅', 15)n.__score = 60 # 赋值不成功n.age = 10print(n.age)print(n)# property装饰器是用于优化set方法的使用，将方法变成属性方便操作 继承 123456789101112131415161718192021class Person: def __init__(self, name): self.name = name self.age = 18 def eat(self): print(self.name + '正在吃饭') def run(self): print(self.name + '正在跑步')class Student(Person): def __init__(self, name): print('-----student init') super().__init__(name) # 调用父类init # super()表示父类class Employee(Person): pass 多继承 123456789101112131415161718192021222324# 多继承class A: def test(self): print('a')class B: def test1(self): print('B')class C(A, B): def test2(self): print('C')c = C()c.test()c.test2()import inspectprint(inspect.getmro(C)) # 返回一个元组类的继承顺序print(C.__mro__) # 打印继承顺序# python允许多继承，搜索顺序：广度优先 单例模式 singleton 1234567891011121314151617181920class Singleton: # 私有 __instance = None # 重写new def __new__(cls): print('-----&gt;__new__') if cls.__instance is None: cls.__instance = object.__new__(cls) return cls.__instance else: return cls.__instance # 保障单例s = Singleton()s1 = Singleton()print(s)print(s1) 导入模块 1234567891011121314# 导入包名 import+模块名# from 模块名 import+ 某一部分，可以只导入一个函数（*表示导入全部# 模块中需要用__all__=[]引用所有内容# 无论import还是from都会将模块内容进行加载# 如果不希望进行调用，用__name__# if __name__ = '__main__' 模块中执行# 在调用时，__name__ = 当前模块名# __name__在自己的模块内为__main__# 在别的模块通过引入方式__name__为模块名# 文件夹和包有区别# 文件夹存放非py文件，包存放py文件# 添加一个__init__.py文件，文件夹就变为包 12345678910# 包含关系# 项目》包》模块》类》函数》变量# from user import models# # u = models.User('admin', 123456)# u.show()from user.models import User# 可以直接在from后面用.导入相关对象u = User('admin', 123456) User.py模块文件 12345678910111213141516171819class User: def __init__(self, username, password): self.username = username self.password = password def login(self, username, password): if username == self.username and password == self.password: print('登陆成功') else: print('登录失败') def show(self): print(self.username, self.password)if __name__ == '__main__': pass# 只有在运行本模块才会调用以下代码，# 导入的情况不执行 12345678910111213141516171819__init__.py :# 该文件导入包的时候，系统自动调用# 作用# 1 把必须要初始化的信息放在这 因为强制调用# 2 此文件中函数，变量访问只需要通过包名.xxx即可# 3 加__all_对外暴露模块# from 模块 import * 可以使用所有内容，添加了__all__会限制部分# from 包 import * 该包内容不能访问，需要在__init__.py文件中# 定义__all__对外暴露模块，模块。。# 避免循环导入# 1 重新架构 : 工作量大# 2 把需要导入的import 放在需要导入的函数中避免# 在其他地方重复调用#","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(10)","date":"2021-05-24T02:57:26.000Z","path":"posts/de45a6f9.html","text":"123456789class Phone: brand = 'huaiwei'# 创建对象t = Phone()print(t.brand)t.brand = 'iphone'print(t.brand) 1234# 魔术方法：__名字__()def __init__(self): # 创建对象时自动调用 print('innit ----') 12345678910111213141516171819class Person: name = '张三' # def __init__(self): # self.name = '张三' # self.age = 18 # 传参 def __init__(self, name, age): self.name = name self.age = age def eat(self,food): print('今年&#123;&#125;岁，叫做&#123;&#125;,正在吃&#123;&#125;'.format(self.age, self.name,food))p = Person()p.name = '李四'p.eat() 类方法 1234567891011121314151617181920212223242526class Dog: def __init__(self, nickname): self.nickname = nickname # 动态添加的nickname属性 def run(self): # self 对象 需要对象才能调用 print('&#123;&#125;在院子里跑来跑去'.format(self.nickname)) # 类方法 # 声明方式加一个@classmethod的修饰器 @classmethod def test(cls): # cls --&gt; class 有类就能调用 print(cls) # &lt;class '__main__.Dog'&gt; # print(cls.nickname) 报错 cls.run(d)d = Dog('大黄')d.run()# d.test() 报错Dog.test()# 因为类方法只能访问类属性和类方法，基本用于# 在对象创建之前，如果需要完成一些功能的时候使用 12345678910111213141516171819202122# 私有对象 在前面加__class Person: __age = 18 def show(self): print('-------&gt;', self.__age) @classmethod def update_age(cls): cls.__age = 20 print('类方法') @classmethod def show_age(cls): print('修改后的年龄为', cls.__age)Person.update_age()Person.show_age()p = Person()p.show() 静态方法用staticmethod修饰器。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Person: __age = 18 def __init__(self,name): self.name = name def show(self): print('-------&gt;', self.__age) @classmethod def update_age(cls): cls.__age = 20 print('类方法') @classmethod def show_age(cls): print('修改后的年龄为', cls.__age) # 静态方法要加修饰器 @staticmethod def test(): print('------&gt;静态方法') # print(self.name) 语法错误 # print(cls.__age) 没传入cls不能直接用 print(Person.__age)Person.update_age()Person.show_age()# 静态方法调用Person.test()p = Person('张三')p.show()# 静态方法# 1 用修饰器staticmethod# 2 无需传递参数cls,self# 3 只能访问类的属性和方法，对象（实例化）无法访问# 4 加载时机和类方法一致# 类方法和静态方法不同# 1 装饰器# 2 有参数，无参数## 相同# 只能访问类的属性和方法，对象无法访问# 都可通过类名调用# 创建对象之前使用，不依赖于对象# 与普通方法不同# 1 没有装饰器# 2 普通方法要依赖对象，每个普通方法都有self# 3 只有创建对象后才能使用方法 123456789101112131415161718192021222324252627282930class Cat: type = '猫' def __init__(self, nickname, age, color): self.nickname = nickname self.age = age self.color = color def eat(self, food): print('&#123;&#125;喜欢吃&#123;&#125;'.format(self.nickname, food)) def catch_mouse(self, color, weight): print('&#123;&#125;,抓了一只&#123;&#125;kg的&#123;&#125;大老鼠'.format(self.nickname, weight, color)) def sleep(self, hour): if hour &lt; 5: print('继续睡觉') else: print('赶快起床') def show(self): print('猫的详细信息') print(self.nickname, self.age, self.color)cat1 = Cat('花花', 2, '灰色')cat1.catch_mouse('黑色',2)cat1.sleep(8)cat1.eat('小金鱼')cat1.show() 123456789101112131415161718192021222324252627# 常用魔术方法# 魔术方法是在特定时刻自动触发，不需要调用# __init__ 参数至少接收一个self对象# 触发时机：初始化对象时触发# __new__# 触发时机：在实例化时触发class Person: def __init__(self): # self.name = name print('-----&gt;init') def __new__(cls, *args, **kwargs): print('------&gt;new') # new开辟一个新空间内存地址 # 实际上把系统底层的new魔术方法覆盖了 # 把系统底层的也恢复 return super().__new__(cls, *args, **kwargs) # 返回的是地址 传给init的self def __call__(self, *args, **kwargs): print('---------&gt;call')p = Person()print(p) # p = None","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(9)","date":"2021-05-23T02:22:36.000Z","path":"posts/5de06e2a.html","text":"1234567891011121314151617181920212223242526272829303132333435363738394041# def gen():# i = 0# while i &lt; 5:# temp = yield i# print('temp:', temp)# i += 1# # return '没有任何数据'# # # g = gen()# # print(next(g))# # print(next(g))# # print(next(g))# # # g.__next__()# g.send(None)# n1 = g.send('哈哈')# # 传值给yield，yield传给temp同时执行next# # 执行一次next，程序会在yield处 执行return# # 执行下一次next，会从上一次yield处继续执行# print('n1=', n1)# n2 = g.send('呵呵')# print('n2=', n2)# # def task1(n): for i in range(n): print('第&#123;&#125;个'.format(i))def task2(n): for i in range(n): print('di&#123;&#125;ge'.format(i))task1(10)task2(5)# 线性进程 12345678910111213141516171819202122232425# 任务交替：def task1(n): for i in range(n): print('第&#123;&#125;个'.format(i)) yield Nonedef task2(n): for i in range(n): print('di&#123;&#125;ge'.format(i)) yield None# 生成器不生成任何东西# 传入生成器套入循环就可以交替进行g1 = task1(5)g2 = task2(5)while True: try: # 没有跳出条件 用try和except g1.__next__() g2.__next__() except: break 1234567891011121314151617181920212223242526# 迭代器和可迭代对象# 判断是否可迭代from collections.abc import Iterablelist1 = [1, 5, 4, 9, 8]f = isinstance(list1, Iterable)print(f)# 列表字符串等都可迭代# 生成器：g = (x + 1 for x in range(10))f = isinstance(g, Iterable)print(f) # 生成器可迭代# 迭代器是一个可以记住遍历位置的对象，# 迭代器对象从集合的第一个元素开始访问，# 直到所有元素访问完，只能前进# 可以被next不断调用访问下一个值，为迭代器Iterator# 可迭代的不一定就是迭代器比如list（不能用next调用# list----》迭代器# iter() builtinslist1 = iter(list1) # 类型转换成可迭代的迭代器print(next(list1))","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(8)","date":"2021-05-22T01:12:46.000Z","path":"posts/44fb5f6b.html","text":"文件的批量复制 12345678910111213141516171819202122232425import ossrc_path = ''target_path = ''def copy(src, target): if os.path.isdir(src) and os.path.isdir(target): filelist = os.listdir(src) for file in filelist: path = os.path.join(src, file) with open(path, 'rb') as rstream: # 只用r的话有些文件读不出来 container = rstream.read() path1 = os.path.join(target, file) with open(path1, 'wb')as wstream: wstream.write(container) else: print('复制完毕')# 调用函数copy(src_path, target_path) 复制的路径中有文件夹，使用递归。 递归中将目标路径先拼接，用os.mkdir创建子文件夹，再将拼接后的路径传入copy递归。 123456789101112131415161718192021222324252627282930313233# 复制的文件中有文件夹import ossrc_path = r'D:\\Backup\\桌面\\Python'target_path = r'D:\\Backup\\桌面\\P1'def copy(src_path, target_path): filelist = os.listdir(src_path) for file in filelist: path = os.path.join(src_path, file) if os.path.isdir(path): # 如果是文件夹 # os.chdir(path) # 进入/改变工作路径 # 递归 target_path1 = os.path.join(target_path, file) os.mkdir(target_path1) copy(path, target_path1) # 复制路径如果target的话，子文件的所有文件都复制在了target里 else: with open(path, 'rb') as rstream: container = rstream.read() path1 = os.path.join(target_path, file) with open(path1, 'wb') as wstream: wstream.write(container) else: print('复制完成')copy(src_path, target_path) 用户注册 123456789101112131415161718# 用户注册def register(): username = input('输入用户名:') password = input('输入密码:') repassword = input('再次输入密码:') if password == repassword: # 保存信息 with open(r'D:\\Backup\\桌面\\P1\\user.txt', 'a')as wstream: wstream.write('&#123;&#125; &#123;&#125;\\n'.format(username, password)) print('用户注册成功') else: print('密码不一致')# 调用register() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 图书管理系统# 文件保存功能# 用户注册def register(): username = input('输入用户名:') password = input('输入密码:') repassword = input('再次输入密码:') if password == repassword: # 保存信息 with open(r'D:\\Backup\\桌面\\P1\\user.txt', 'a')as wstream: wstream.write('&#123;&#125; &#123;&#125;\\n'.format(username, password)) print('用户注册成功') else: print('密码不一致')# 用户登录def login(): username = input('输入用户名:') password = input('输入密码:') if username and password: # 非空 with open(r'D:\\Backup\\桌面\\P1\\user.txt') as rstream: while True: user = rstream.readline() # admin 123456\\n if not user: # 如果读到空说明读到尾 print('用户名或者密码输入有误!') break input_user = '&#123;&#125; &#123;&#125;\\n'.format(username, password) if user == input_user: print('用户登陆成功') breakdef show_books(): print('-----------图书馆里的书有-----------') with open(r'D:\\Backup\\桌面\\P1\\books.txt', 'r', encoding='UTF-8') as rstream: books = rstream.readlines() for book in books: print(book)# 调用# register()# login()show_books() 123456789101112131415161718192021222324252627282930313233343536373839# 异常处理'''try:except:finally'''def func(): try: n1 = input('请输入第一个数字') n2 = input('请输入第二个数字') result = n1 + n2 print(result) except ZeroDivisionError: pass except Exception as err: print(err) # 打印原因 else: # 没有出现异常则执行 pass finally: passdef fun(): stream = None try: pass except: pass finally: if stream: stream.close()func() 生成器 12345678910111213141516171819202122232425# 生成器# 一边循环一边计算称之为生成器 不会持续占用内存# 1 通过列表推导式得到生成器# newlist = [x * 3 for x in range(10)]# print(newlist)# 只需要将推导式的方括号换成圆括号即可g = (x * 3 for x in range(10))print(type(g)) # &lt;class 'generator'&gt;# 方式1 调用__next__() 每次只能生成一个元素print(g.__next__())print(g.__next__())# 方式2 next()方法 builtins 方法print(next(g))# 此时生成器上限是10 超出返回会报异常 StopIterationwhile True: try: e = next(g) print(e) except StopIteration: print('产生完毕') break 只要函数中出现了yield关键字 就不是函数。 1234567891011121314151617181920212223# 生成器2 函数# 斐波那契数列# 函数中有yield关键字就不算为函数 为生成器def func(): n = 0 while True: n += 1 print(n) # yield n# func() # 会一直打印def fun(): n = 0 while True: n += 1 print(n) yield n # 只要加了该关键字就为生成器g = fun()print(g) # generator object 斐波那契数列 1234567891011121314151617181920def fib(length): a, b = 0, 1 n = 0 while n &lt; length: # print(b) yield b a, b = b, a + b n += 1 return '没有更多元素' # 返回值会以StopIretion的形式报错返回。g = fib(10)print(next(g))print(next(g))print(next(g))print(next(g))print(next(g))print(next(g))print(next(g))print(next(g))","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(7)","date":"2021-05-21T01:39:16.000Z","path":"posts/c36343a4.html","text":"文件操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114# # 写文件# '''# mode为w write，表示写操作# 每次都会将原来的内容清空覆盖# write(内容) 每次都会将内容清空写当前内容# writelines(iterable) 没有换行效果 自己加\\n## ***# 如果mode为‘a’表示追加 不会清空当前文件内容# '''# stream = open(r'D:\\Backup\\桌面\\Python\\test.txt', 'w')# # 打开操作是w write# r = stream.writable()# print(r)## s = '''# 你好!# 欢迎### '''## result = stream.write(s) # 写操作会覆盖掉原来的内容# print(result)# stream.write('你好呀') # 只要不释放资源还可以继续写不覆盖上一个write的内容# stream.writelines('赌神告警')# stream.writelines(['赌神告警', '赌侠刘德华', '赌圣主线程']) # 迭代可以写成列表# # 没有换行操作,但是可迭代# # writelines传入参数为可迭代的iterable# stream.close()# # 要释放资源## stream = open(r'D:\\Backup\\桌面\\Python\\test.txt', 'a')# stream.write('僵尸先生')# # 文件复制# '''# 原文件:D:\\Backup\\桌面\\Python\\test.jpg# 目标文件：D:\\Backup\\桌面\\Python\\test2.jpg## '''# stream = open(r'D:\\Backup\\桌面\\Python\\test.jpg', 'rb')# stream.close()# # 以上内容可以用下面代码代替# # 文件操作常用# with open(r'D:\\Backup\\桌面\\Python\\test.jpg', 'rb') as stream:# pass## # with 结合open使用，可以帮助自动释放资源# with open(r'D:\\Backup\\桌面\\Python\\test.jpg', 'rb') as stream:# container = stream.read() # 读文件内容# # 此处如果不缩进stream资源会给释放# with open(r'D:\\Backup\\桌面\\Python\\test2.jpg', 'wb') as wstream:# wstream.write(container)# open内要具体到文件名 如果想操作整个文件夹用os模块'''模块: xxx.py builtins.py 内置模块 内置模块不需要导入os.py'''import osprint(os.path)print(os.path.dirname(__file__)) # __file__表示当前文件# 获取当前文件路径path = os.path.dirname(__file__)# path.join() # 这里调用的是字符串的join 传入的是可迭代的列表# 要用os里面的joinresult = os.path.join(path, 'test1.jpg') # 传入参数为path,pathsprint(result) # D:/Backup/桌面/Python\\test1.jpg 斜杠方向相反没有关系# with 结合open使用，可以帮助自动释放资源with open(r'D:\\Backup\\桌面\\Python\\test.jpg', 'rb') as stream: container = stream.read() # 读文件内容 print(stream.name) file = stream.name filename = file[file.rfind('\\\\') + 1:] # 从右找 切片 # 此处如果不缩进stream资源会给释放 with open(result, 'wb') as wstream: wstream.write(container)# 判断相对路径 绝对路径r = os.path.isabs(r'D:\\Backup\\桌面\\Python\\test.jpg')print(r)r = os.path.isabs(r'..\\Python\\test.jpg')print(r)# ../表示当前文件的上级path = os.path.dirname(__file__) # 获取路径directoryprint(path)print(os.path.isabs(path))# 相对路径获取绝对路径print(os.path.abspath('test.txt'))path = os.getcwd() # 当前文件的工作目录print(path)# 将文件名和路径拆分存在一个元组里path = r'D:\\Backup\\桌面\\Python\\test.jpg'result = os.path.split(path)print(result)# 拆分拓展名之前的部分# ('D:\\\\Backup\\\\桌面\\\\Python\\\\test', '.jpg')result = os.path.splitext(path)print(result)size = os.path.getsize(path)print(size)result = os.path.join(os.getcwd(), 'file', 'test.jpg') # 可迭代参数# 'file','a' 多几个就多创建几个文件夹。print(result)# isabs isfile isdir 12345678import osdir = os.getcwd()print(dir)all = os.listdir(r'D:\\Backup\\桌面\\Python')# 返回该文件夹下所有文件和文件夹 保存在列表里print(all) 123456# 创建文件夹# 先判断是否存在if not os.path.exists(r'D:\\Backup\\桌面\\P1'): os.mkdir(r'D:\\Backup\\桌面\\P1')# 如果文件已经存在的话，无法创建# 没有返回值 123456789# 删文件os.remove(r'D:\\Backup\\桌面\\P1\\test.txt')# 删除文件夹os.rmdir(r'D:\\Backup\\桌面\\P1')# 没有返回值# 只能删除空的文件夹# 创建出来的文件.P1os.removedirs(r'D:\\Backup\\桌面\\P1') 12345678910111213# 删文件import ospath = r'D:\\Backup\\桌面\\P1'filelist = os.listdir(path)for file in filelist: path1 = os.path.join(path, file) os.remove(path1) # 把文件夹内所有文件删除else: os.rmdir(path) # 只能删除空文件夹print('删除成功') 12# 切换当前工作目录# os.chdir()","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(6)","date":"2021-05-20T02:33:51.000Z","path":"posts/da7872e5.html","text":"123456789101112import syslist1 = [1, 2, 3]list2 = list1list3 = list1print(sys.getrefcount(list1)) # 返回被引用次数del list1print(sys.getrefcount(list2)) # 返回被引用次数del list2print(sys.getrefcount(list3)) # 返回被引用次数 123456789101112131415# 闭包、嵌套def outer(): a = 100 def inner(): b = 200 print('inner') result = locals() print(locals()) # &#123;'a': 100, 'inner': &lt;function outer.&lt;locals&gt;.inner at 0x0000016C49967678&gt;, 'result': &#123;...&#125;&#125;outer() 123456789101112131415def outer(): a = 100 def inner(): # 如果要对外部变量操作 nonlocal a # 将外部变量取消局部变量 b = 200 b += a print('inner', b) # inner 300# 内部函数可以使用外部函数的变量 但是不可以修改 print(a) inner()outer() 闭包 1234567891011121314def outer(n): a = 10 def inner(): b = a + n print('内部函数:', b) return inner # 不是inner()，而是传出该函数r = outer(5)print(r)r() 装饰器 1234567891011121314151617181920212223242526# 定义装饰器,闭包def decorator(func): print('------------&gt; 1') def wrapper(): func() print('刷漆') print('铺地板') print('买家具') print('精装修') print('-------------&gt;2') return wrapper@decorator # 等价于house = decorater(house)def house(): print('毛坯房')@decoratordef xxx(): print('xxx')house() 12345678910'''装饰器的应用场景 遵循开放封闭原则，在不改变原函数的情况下 拓展函数的功能1 引入日志2 函数执行时间统计3 执行函数前预备处理4 执行函数后清理功能5 权限校验6 缓存''' 带参数的装饰器 123456789101112131415# 原函数有参数，装饰器内也要有参数。def decorator(func): def wrapper(*args,**kwargs): # 使用*args和**kwargs保证调用的时候传多少个参数都可以 func(*args,**kwargs) # 此处*为拆包 print('刷漆精修房')# 如果没有**kwargs的话，传入的是默认参数键值对的话，只能接收到键，会报错。 return wrapper@decoratordef house(address, area): print('房子地址是&#123;&#125;,是一个毛坯房...面积&#123;&#125;'.format(address, area))house('北京四合院', 20) 123@デコレータ関数を生成する関数(引数)def デコレート対象の関数(引数): 関数の中身 12345678910111213141516171819202122232425262728def outer_check(time): print('-------&gt;1') def check_time(action): print('--------&gt;3') def do_action(): if time &lt; 23: return action() else: return '对不起，您不具有该权限!' print('-------&gt;4') return do_action print('----------&gt;2') return check_time@outer_check(23)# r = outer_check(23) ----&gt; return r = check_time# check_time(play_game)传入函数# 即此时play_game = do_actiondef play_game(): return '玩游戏'print(play_game()) 递归 12345678910111213141516def test(): print('test') a()def a(): print('a') a() # 超出递归深度会报错a()'''result: [Previous line repeated 993 more times] RecursionError: maximum recursion depth exceeded while calling a Python object''' 12345678910111213141516# 1 递归要有出口# 2 每次向递归出口靠近# 1-10打印def test(i): if i == 10: print('10') # 出口 else: print(i) i += 1 test(i)test(1) 匿名函数 1234567891011121314# 匿名函数 功能十分简单，写def函数缩进等麻烦# 使用lambda只包含一个语句# 语法 lambda 参数列表:返回值表达式def test(a): return a + 1# 简化上面的函数r = lambda a: a + 1 # 要有接收print(r(4))r = lambda x, y: x + yprint(r(5, 6)) 12345678910111213141516171819202122# 使用场合def test(): print('test')def func(a, f): print('-----&gt;', a) f()func(5, test)def func1(a, f): print('-----&gt;', a) r = f(a) print(r)func1(8, lambda x: x ** 2) # 返回结果为平方# 匿名函数给f(a)赋值# 应用场景：表达式放在函数的参数位置 12345list1 = [('tom', 20), ('lily', 19), ('danel', 33)]m = max(list1, key=lambda x: x[1])print(m)# 同理min sorted ↑如果不传key，按照字母排序。 12345678class map(object): \"\"\" map(func, *iterables) --&gt; map object Make an iterator that computes the function using arguments from each of the iterables. Stops when the shortest iterable is exhausted. \"\"\"# 迭代器 1234567891011rrr = filter(lambda x: x[1] &gt; 11, list1)# 返回的是filter的一个object# 输出要转为listprint(list(rrr))ma = map(lambda x: x[0].title(), list1)print(list(ma))# 用于压缩运算r = reduce(lambda x, y: x + y, [1, 2, 3, 4, 5, 6])print(r) 文件操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# 文件操作'''文件上传保存log系统函数 open()'''# def open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True)# mode# r:read# w:write# b:binary# rb,rw read binary/ write binary# rb,rw 包括了所有类型文件 图片，音乐，电影# 'r' open for reading (default)# 'w' open for writing, truncating the file first# 'x' create a new file and open it for writing# 'a' open for writing, appending to the end of the file if it exists# 'b' binary mode# 't' text mode (default)# '+' open a disk file for updating (reading and writing)# 'U' universal newline mode (deprecated)#### 此处添加r为了防止斜杠转译# stream = open(r'D:\\Backup\\桌面\\Python\\test.txt')# stream.read()# print(stream)# 这个read方法是一个抽象装饰器的函数# 读操作# open(path/filename,'rt'(默认,读文本文件))# 返回值是数据管道 stream# stream.read 读取管道中的内容# 如果文件名不对的话会报错 FileNotFoundstream = open(r'D:\\Backup\\桌面\\Python\\test.txt')# r = stream.read()# print(r) # 读出文件内容hello world# 这里会造成文件指向偏移影响后面的内容 每个文件只能读一次 会指到文件最后result = stream.readable() # 判断是否可读print(result)## while True:# line = stream.readline()# print(line, end='') # 默认换一行# if not line:# breaklines = stream.readlines() # 结果保存在列表里print(lines)# ['hello world\\n', 'hi\\n', 'happy']# 取操作for i in lines: print(i, end='') 12345#stream = open(r'D:\\Backup\\桌面\\Python\\test.jpg', 'rb')# 读图片要转为二进制rbcontainer = stream.read()print(container)","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(5)","date":"2021-05-19T01:38:56.000Z","path":"posts/f1552126.html","text":"12345678910111213141516171819202122232425262728293031323334353637# 集合 底层是用字典做的# set# 特点，没有重复，无序# 花括号内的元素不是键值对，就为set# 如果放的键值对，就是字典set1 = &#123;'zhangsan'&#125;print(type(set1))# 列表强转集合list1 = [1, 2, 3, 6, 8, 9, 9, 1, 2, 3, 4, 5]set2 = set(list1)print(set2)set3 = &#123;&#125; # 空字典print(type(set3))set4 = set() # 集合声明方法print(type(set4))# 添加元素 addset4.add('三体')set4.add('盗墓笔记')priprint(result)nt(set4)set4.add('红楼梦')print(set4)# append extend -----&gt;list# update add -----&gt;setset1.update(set4)print(set1) # 将set4 插入到set1 中，无序。print(set4)# 重复添加没有变化result = set4.add('三体') # 没有返回值print(set4) 产生验证码 123456789101112131415161718# 打印五组不重复验证码import randomcode_list = set()s = 'qwertyuiopasdfghjklzxcvbnm0123456789'while True: code = '' for i in range(4): r = random.choice(s) # 随机从某个字符串内选择一个 code += r # index = random.randint(0, len(s)-1) # code += s[index] # 将code添加到set中 code_list.add(code) # 判断长度为5 if len(code_list) == 5: breakprint(code_list) 其余方法 1234567891011121314# 移除元素 remove discard# pop按顺序弹出，但是集合没有顺序 随机删除set1 = &#123;'rbkf', '2f3t', 'kf7g', 't5li', 'k8eb'&#125;set1.remove('rbkf') # 如果不存在会报错print(set1)set1.discard('rbkf') # 如果成员不存在也不会报错# del set1 整个删除set1.clear()set1.difference() # 返回集合的差集set1.intersection() # 返回交集set1.union() # 并集# 可以用符号代替 -差集 &amp;交集 |并集 几个常用结构相互转换 1234567891011'''list ----&gt; tuple,set(长度可能会发生改变)tuple ----&gt;list,set(同上)set ----&gt; list,tupledict ---&gt; list,tuple,set key值保留，value会丢失'''# list转dictlist1 = [('a', 10), ('b', 20)]print(dict(list1)) 1234567891011121314151617# 公共方法(内置方法)'''print() input() type() len() id() delin not in is 进制转换 bin hex oct int最大值，最小值list1 = [1,2,3,4,5,6,7]result = max(list1)min()result = sum(list1) abs()sorted(xx,reverse=True) # list1.sort(self,reverse)result = chr(int) ---&gt; ASCII码转换成字符。ord() ----&gt;字符转ASCII码值。''' 列表推导式 1234567891011121314151617181920212223242526272829# 列表推导式list1 = []for i in range(1, 21): list1.append(i)print(list1)# 格式 [a for i in 可迭代的]# a为赋值变量list1 = [i for i in range(1, 21)]list1 = [i + 2 for i in range(1, 10)]# 1-100之间的偶数list1 = [i * 2 for i in range(0, 51)]list1 = [i for i in range(0, 101, 2)] # 步长为2# if判断格式# [i for i in 可迭代 if 条件]list1 = [i for i in range(0, 101) if i % 2 == 0]list2 = ['62', 'luck', '99']list3 = [word for word in list2 if word.isalpha()]# if else格式list4 = [word.title() if word.startswith('h') else word.upper() for word in list3]print(list4)# 双层for循环list5 = [(i, j) for i in range(1, 5) for j in range(3, 5)] 函数定义 1234567891011121314151617181920212223242526272829303132# 定义函数# 格式# def 函数名()# 代码## 打印五组不重复验证码import randomdef generate_code(n): code_list = set() s = 'qwertyuiopasdfghjklzxcvbnm0123456789' while True: code = '' for i in range(4): r = random.choice(s) # 随机从某个字符串内选择一个 code += r # index = random.randint(0, len(s)-1) # code += s[index] # 将code添加到set中 code_list.add(code) # 判断长度为5 if len(code_list) == n: break print(code_list)print(generate_code) # &lt;function generate_code at 0x0000028863077168&gt;# 调用函数generate_code(2) 传参函数要注意类型判断 12345678910111213# 类型一致def get_sum(a, b): # if type(a) == type(b): # s = a + b # print(s) if isinstance(a, int) and isinstance(b, int): s = a + b print(s) else: print('类型错误!')get_sum(2, 3) 形参，多个参数，可变参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 默认值参数# def 函数名(参数1,参数2=值)# 调用：无默认值必须传值，有默认值可传值可不传值# 参数的数据类型是列表libaray = ['python精通', 'MySQL', '数据分析']# 形参def add_book(bookname): libaray.append(bookname) print('成功')def show_book(books): for book in books: print(book)add_book('新概念英语')show_book(libaray)# 可变参数 *arg **kwarg# def get_sum(a, b):# r = a + b# print(r)# *arg *a都是一样的，*号是必须的def get_sum(*args): s = 0 for i in args: s += i print(s)get_sum(1, 2)get_sum(1, 3, 5, 7)a, *b, c = 1, 2, 3, 4, 5print(a, b, c)# *b [2, 3, 4]ran_list = [1, 3, 5, 4, 7, 8, 9]# get_sum(ran_list)# 传入的是元组 ([1, 3, 5, 4, 7, 8, 9],)get_sum(*ran_list) # 拆包 传参声明的时候，加星号为装包。装为列表 调用的时候，加星号为拆包。将元组拆包。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(4)","date":"2021-05-18T01:39:06.000Z","path":"posts/e84e1067.html","text":"1 列表的添加 append 添加单个元素 +号直接连接 extend拓展。 123456789101112131415161718192021222324252627282930# # 列表的删除# # pop remove clear# list1 = ['火腿肠', '酸奶', '油条', '面包', '辣条']# list1.pop(2) # 填下标# print(list1)# # pop从后往前删减，如果不填下标，从后往前一个一个删## # remove 直接填元素# list1.remove('辣条')# print(list1)# # 删除元素# n = 0# while n &lt; len(list1):# if list1[n] == '酸奶':# list1.remove('酸奶')# else:# n += 1# print(list1)## for i in range(len(list1)):# if list1[i] == '酸奶':# list1.remove('酸奶')# i -= 1 # 重要# print(list1)## list1.clear()## print(id(list1))# list2 = []# print(id(list2)) 12345678list1 = [1, 2]list2 = list1 # 指针指向了同一个位置list2.append(8)print(list1) # list1和list2相同print(list2)list1.clear() # 指针后的所有东西删除del list2 # 删除的指针print(list1) # list1不受影响 sort默认升序。reverse默认为False，通过reverse=True变为降序。 1234567891011# 列表排序sort reverseimport randomnumbers = []for i in range(8): numbers.append(random.randint(1, 20))print(numbers)numbers.reverse() # 返回值是none，不能直接放进print，单纯的反转print(numbers)numbers.sort(reverse=True)print(numbers) 123456789101112# 将随机整数插入已排序好的数列中import randomnumbers = []for i in range(10): numbers.append(random.randint(1, 100))print(numbers)numbers.sort(reverse=True)print(numbers)numbers.append(int(input('输入一个100的整数')))numbers.sort()print(numbers) 1234# 交叉赋值# python中的简便方法a, b = b, aprint(a, b) 123456789# 冒泡排序num = [5, 1, 7, 10, 9, 2, 4, 3]for j in range(0, len(num)-1): for i in range(0, len(num) - 1 - j): if num[i] &gt; num[i + 1]: a = num[i] num[i] = num[i+1] num[i+1] = aprint(num) 1234567891011121314151617181920212223242526272829303132333435# 元组# 元组不能修改元素，只能读，不能修改。# 元组使用小括号，列表使用方括号# list 列表# tuple 元组t1 = ()print(type(t1)) # &lt;class 'tuple'&gt;t2 = ('aa')print(type(t2)) # &lt;class 'str'&gt;t2 = ('aa',)print(type(t2)) # &lt;class 'tuple'&gt;# 注意。元组内仅有一个元素时要加逗号# 下标和切片可以使用t3 = ('aa', 'bb', 4, 'cc')print(t3[2])print(t3[1:])# 逆序print(t3[::-1])# 计数print(t3.count('aa'))# 返回第一个找到的下标位置print(t3.index('aa')) # start end# 类型转换# list(tuple)# tuple(list)t3 = list(t3)print(t3)t3.append('x')t3 = tuple(t3)print(t3) 12345678910111213141516171819202122232425262728293031323334# 字典book = &#123;&#125;book['书名'] = '《三体》'book['价格'] = 20book['价格'] *= 0.8print(book)# book.pop('价格') # 放入key# print(book)# r = book.popitem() # 从后往前删除一个元素 并返回一个元组# # 若为空报错# print(book)# print(r)# 取值print(book.get('书名'))value = book['书名'] # 若空会报错book.get('书名', '默认值') # 如果没有会返回一个默认值可设置# 使用 for in遍历字典，取出的是key值for i in book: print(i) # 取出为key值# 改为# for v in book.keys()# for k in book.values()print(book.items()) # 分对dict_items([('书名', '《三体》'), ('价格', 16.0)])# for k,v in book.items():book.setdefault('出版社', '人民教育出版社')print(book)dict1 = &#123;'a': 10, 'b': 20&#125;book.update(dict1) # 字典的连接print(book)","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"Python学习笔记(3)","date":"2021-05-16T01:07:46.000Z","path":"posts/a70f86a0.html","text":"由于多次保存之后都不知道为什么被清了。所以只剩下截图了。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"吾輩は猫である","date":"2021-05-11T14:29:02.000Z","path":"posts/49c78c96.html","text":"抜粋","tags":[]},{"title":"Python学习笔记(2)","date":"2021-05-11T00:53:43.000Z","path":"posts/7fc5b99e.html","text":"Day2 and Day3 由于Day2的笔记没有保存丢失，只剩下截图了（ Day3 位运算打印结果为int类型 位取反会产生补码 由于去了毕业旅游，day4和day3并在一起。 if 语句不用加括号，要加冒号，用缩进表示包含。 随机数函数需要引入random包。 条件2 用elif。 if else的进阶用法 用pass表示语句，可以暂时不编程。 空字符串表示false，有内容为true while循环。也是用冒号。 for循环 起始，终止，跳。 range范围为[X,Y)。1-50和为 （1,51） for i in range(3) 用于密码错误尝试三次。 for i in range(n): else: while…else同理","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"走れメロス","date":"2021-05-10T13:08:38.000Z","path":"posts/5a1d991.html","text":"新出語彙 妹婿：いもうとむこ 賢臣：けんしん 捕縛：ほばく 威厳：いげん 磔（はりつけ）とは、罪人を板や柱などに縛りつけ、槍などを用いて殺す公開処刑の刑罰のこと。磔刑（たっけい） 嗄れる：しわがれる 声がかれる ほくそ笑（え）む とは、人に隠れて笑う、人に気づかれない程度に少し笑うという意味 縄を打つ：犯人を取り押さえて―・つ 車軸：しゃじく 佳い：よい めでたい という意味をもつ 御免蒙る（ごめんこうむる）：相手の許しを得て退出する。失礼する 南無三：南無三宝の略、また失敗した際に「しまった」といった感動詞として発する。 せせら笑う：ばかにして冷ややかに笑う。あざける 胴震い：どうぶるい 寒けや恐ろしさで全身がふるえること。 おりから：折から、折柄。 ちょうどその時。 巣食うとは。 「棲み着いている」ことを表す言葉です 反社会的組織などの一般的にあまり好まれない人たちに対して使うこともできます。 独りよがり：独り善がり、自分が良いを考えていることを、他人のことをこうりょせずに、押し通そうとすること。 やんぬるかな：已矣哉の訓読み。 今となってはどうしようもない。 擡げる：もたげる 「頭を―」（目立った存在となってくる意にも） 疾風：しっぷう、はやて（疾風 どよめく：音が響き渡る まっぱだ：真っ裸 マント：披风 御復習い 悪びれずに：自分の行いを悪いことだと思うそぶりを見せない様子。 召す：めす 祭壇：さいだん 宥める：なだめる 冷静 堪える：こらえる 鞭打つ：むちうつ 怯む：ひるむ ひるまない まどろむ：微睡む 抜粋","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"日本語","slug":"日本語","permalink":"https://nari2021.github.io/my-blog/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"小説","slug":"小説","permalink":"https://nari2021.github.io/my-blog/tags/%E5%B0%8F%E8%AA%AC/"}]},{"title":"Python学习笔记（1）","date":"2021-05-10T02:18:05.000Z","path":"posts/db9be8e8.html","text":"1 使用单引号，双引号，三引号声明字符串，可以用于区分单双引号。 2 使用三引号输出的字符串可以保留格式输出。 3 Python中的布尔类型需要大写True False 4 重复声明中添加使用就不会警告。 5 输入数据用input（），builtins表示标准库内置函数。 6 input阻塞型函数，括号内输入提示内容。 7 使用变量存放接收到的内容 8 input接收到的数据都是string类型，无论输入的是数字还是文字。 9 不能直接使用接收到的数据进行加减需要进行类型转换。图中的+号被识别为了连接字符的符号。1000不是字符串无法连接。 10 使用和其他语言一样的类型转换int（）等。 11 注意以下区别 12 str转为int类型 前提是输入的数据没有小数。 13 True为1 False为0。 int类型转为bool。只有为0时才为False，负数正数都为True。变量为空字符串也为False。 14 print 逗号表示空格，在定义中，sep参数表示空格字符，可以设置，end属性也可以修改设置。 15 //表示整除，**表示次方。 2021.5.10 Day1","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"}]},{"title":"日本語の勉強——詩（1）","date":"2021-04-05T13:44:39.000Z","path":"posts/5701c8b1.html","text":"初恋..はじめに やさしく白き手をのべて 林檎をわれにあたへしは 薄紅の秋の実に 人こひ初めしはじめなり この一節に初めて触れたのは、国語便覧の近現代名詩選を読んでいる時でした。私は多感な心で時の流れも忘れて藤村さんの素敵な詩にひたっていました。 初恋 初恋 島崎 藤村 まだあげ初めし前髪の 林檎のもとに見えしとき 前にさしたる花櫛の 花ある君と思ひけり やさしく白き手をのべて 林檎をわれにあたへしは 薄紅の秋の実に 人こひ初めしはじめなり わがこゝろなきためいきの その髪の毛にかゝるとき たのしき恋の盃を 君が情けに酌みしかな 林檎畠の樹の下に おのづからなる細道は 誰がふみそめしかたみぞと 問ひたまふこそこひしけれ 人をよわせた五七調のリズムは甘美に響きます。この詩の言葉の意味が正確に理解できませんか。おそらく理解しないまま今まで口ずさんできたでしょうね。さぁ、一行ずつ言葉の意味の解説を試みをしてみましょう。 鑑賞 まだあげ初めし前髪の 訳：まだ結い上げたばかりのあなたの前髪。 「髪を結い上げる」とは、明治時代のころ、少女が12、3歳頃になると、「もう子供でもない、成人の女性になった」という変化を示す印である。 林檎のもとに見えしとき 訳：林檎の木の下に君の姿が見えた。 「見えし」とは、動詞の連用形に過去の助動詞「き」の連体形を接続するものです。「見えし」は「見えた」の意味です。 前にさしたる花櫛の 訳：前髪のさしている花櫛は。 「花櫛」とは、造花で飾った櫛、主に少女用。「さしたる」とは、「さす」の連用形「さし」に完了・存続の意味を持つ「たり」助動詞の連体形を接続するものです。 花ある君と思ひけり 訳：君が花のように美しいと思った。 「思ひけり」とは、「思ふ」の連用形「思ひ」に過去の助動詞「けり」の終止形を接続するものです。「思ひけり」は「思った」の意味です。 やさしく白き手をのべて 訳：あなたは、やさしく白い手をのばして。 「白き」とは、「白し」の連体形です。 林檎をわれにあたへしは 訳：私に林檎をくれました。 「われ」は「我」と書きます。「あたへし」とは、ハ行下二段活用の動詞「与ふ」の連用形「与へ」に「し」を接続するものです。現代語の「与える」とちょっと違いがあります。 薄紅の秋の実に 訳：（もらった林檎は）、薄紅の秋の実です。 人こひ初めしはじめなり 訳：わたしは、初めてあなたとの恋に落ちているですよ。 「こひ」とは、「恋」です。「なり」は古典にて用いられる判断を下す助動詞です。「なり」は「です」の意味です。 わたしたちも思う人から贈り物をもらった時、その贈り物を本人の化身のように思って大切にしているでしょう。少年は、少女をくれた林檎を、少女であるかのように恋心を抱いています。 わがこゝろなきためいきの 訳：わたしがおもわずため息をもらした。 「こころなき」とは、「おもわず」の意味です。無意識に、あるいは知らず知らずのうちに。 その髪の毛にかゝるとき 訳：あなたの髪の毛にかかっている時。 たのしき恋の盃を 訳：楽しい恋の盃を。 「たのしき」とは、「楽し」の連体形です。 君が情けに酌みしかな 訳：わたしは、恋の盃を君と情け深いに酌みかわしているかな。 この句は譬えです。盃から「酌みし」という言葉が導かれています。 林檎畠の樹の下に 訳：林檎畠の樹の下に。 おのづからなる細道は 訳：（わたしたちがここに通って歩き踏み固めた）おのずからなる細道は。 林檎畠に自然にできた細道は、少年と少女は、いつも同じ道を通い、数え切れないほど会っているのでしょう。 誰がふみそめしかたみぞと 訳：「誰がこの道を踏み固めたのでしょう」と。 問ひたまふこそこひしけれ 訳：あなたは（「誰がこの道を踏み固めたのでしょう」と）尋ねる、いと愛おしく思うのです。 「あのね、林檎の中にこの細く続いてる道は、誰が作ったのかな」ーー少女が少年に訪ねます。少年は彼女を愛おしく思うのですよね。 後書き出典・引用・参考文献： [1]若菜集 [2]総合国語便覧 [3]Yahoo！知恵袋 [4]ジャパンウィキペディア","tags":[{"name":"日本語","slug":"日本語","permalink":"https://nari2021.github.io/my-blog/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"詩","slug":"詩","permalink":"https://nari2021.github.io/my-blog/tags/%E8%A9%A9/"},{"name":"鑑賞","slug":"鑑賞","permalink":"https://nari2021.github.io/my-blog/tags/%E9%91%91%E8%B3%9E/"}]},{"title":"开发日志1.1","date":"2021-02-19T08:11:40.000Z","path":"posts/a292b236.html","text":"开发日志1.1修复了如下bug 贴图不正确现在赞赏码可以正确显示了（再也不是别人的了 评论功能取消了原有的disqus，改为使用valine插件。现在评论可以不需要使用小飞机了。 左侧菜单修复了bulletin board不能正确指向url地址。现在可以正确指向categories属性为开发日志的文章了。但是这样会导致两个标签同时被选中，所以我决定暂时移除此功能，会在后续版本中改进。 摘要修复了原本文章摘要会弹出meting等代码的乱码，现在可以正确显示了。 路径改变由原本指向nari2021.github.io，即使用的仓库名是nari2021.github.io改为了my-blog。此操作需要在多处配置文件里面进行修改，是个雷区。 后续改进方向添加音乐功能，友链，图片大小设置，各处文章的超链接进行衔接（后续可能会更新连载系列的文，涉及到目录等功能会考虑使用Python等语言进行一键操作，待学习），使用手机等快速发博客功能，而不是在电脑使用typora编辑markdown文件还要考虑语法，主页的背景设置，转场设置等功能。 因为indigo这个模板主题有很多功能没有包含进来，后续的开发可能会遇到很多问题，敬请期待。 非常感谢你能读到这里！！","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]},{"title":"开发日志1.0","date":"2021-02-18T13:00:13.000Z","path":"posts/d59582a0.html","text":"开发日志1.0历经数小时，经过不断地尝试和实践，终于让这个博客有了自己的雏形，以下记录的是该博客已经实现好的功能和实现过程中的雷区。 博客的搭建主要参考教程是bilibili一个up主的视频(单击此处即可进入)。 博客选择部署在GitHub上面，gitee也可以，而且访问速度会比GitHub快很多，当完成了以上步骤就可以进行主题等操作。 主题的设置本博客采用的主题是indigo主题，在GitHub上可以进行下载。并且按照教程进行安装即可，网上的配置方式很多，可以采用 1npm install hexo-xxx 上面这个命令格式安装自己想要的插件，比如音乐播放，live2d等。具体可以参考这篇文章，里面有一些比较常用的插件。 如果按照上诉步骤弄完，主要是主题的切换，将根目录下的_config.yml 文件中 123 theme: landscapechange to theme: xxxx 然后在根目录下执行启动命令报错的话。 1hexo s 因为我遇到了这样的坑，且indigo主题的作者已经不再维护这个项目了。在GitHub的issue里面可以看到类似的问题出现，根据描述疑似是win10的个例会掉坑。最后我找到的解决方案是，直接把别人的代码拷贝下来修改yml文件的配置即可。（因为咱也不是很懂具体的内部原理 实现的一些功能包含了博客基本的功能。 个人主页 ↑这就是大概实现的一个雏形啦~ 里面的文章是测试用的文章。具体的一些小功能例如页面的自动收缩，就不详细说了，具体参照indigo的yml文件说明文档。 左侧的菜单栏介绍从上往下分别就是 主页这个就不用多说了吧！ Archives这个的功能是按照日期查看我的博客。 Tags这个的功能是按照标签对博客进行筛选。以后我写的文章里面都会认真进行分类的！ Categories这个的功能是按照分类对博客进行筛选。比如学习类，编程类，生活类。 bulletin board这个就是公告栏啦。原计划是定向到 source/categories/..目标文件夹下面的一个分类，这样点击这个菜单选项就可以直接定向到有关于开发日志和公告类的博客了。（但是目前好像出了的差错，计划在后续过程中修复 GitHub点击后会跳转到我部署在GitHub上的代码链接。 Twitter什么？你想点进来？你不对劲。目前不开放此功能！ 一些小功能评论系统使用的是框架自带的disqus。配置很简单只需要将其属性改成true即可。但是缺点也很明显，首先加载速度很慢，可能需要小飞机的支持。 如图所示。在文章最底下，可能需要等待一段时间加载。如果加载不出来，点击Reload稍等即可。 该插件是第三方的应用，所以需要Google/FB/小蓝鸟等账号的登录，需要小飞机。 评论之后的结果就会像下图一样。 打赏功能如果觉得对你有帮助的话！！！！！！！！！看到文末的小圆圈了吗（ 琐碎功能包含了访客数统计(修改配置文件)，目录导航，文章分享，站内搜索，单篇文章访问数量等功能。 我学到了什么引用一句谚语：石の上にも三年。有志者事竟成。 在教程的帮助下，虽然可以很快的以一种很简单的方式，跳过了其原理搭建出一个自己的blog，不过在此期间是有很多不通顺的地方的。正是这些地方能学习到很多东西，比如markdown文件的语法，yml文件的语法，html文件的语法，各项配置，导入，部署。只有真正做过一次才能体会到最后成功的喜悦。 最后这算是我的第一篇文章，可能会有很多没做好的地方。会在未来很长的一段时间内，不断地学习相关知识并优化该网站。 文章的数量应该也会随着时间慢慢堆积。我会在这里存放我的学习、生活、社交、对事物的思考以及一些琐碎的文章，有助于未来的我，在回首今天写下这第一篇文章时，不忘当初的初心。 非常感谢你能够阅读到这里！！！！！","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]}]