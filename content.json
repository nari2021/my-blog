[{"title":"Python学习笔记(6)","date":"2021-05-20T02:33:51.000Z","path":"posts/da7872e5.html","text":"123456789101112import syslist1 = [1, 2, 3]list2 = list1list3 = list1print(sys.getrefcount(list1)) # 返回被引用次数del list1print(sys.getrefcount(list2)) # 返回被引用次数del list2print(sys.getrefcount(list3)) # 返回被引用次数 123456789101112131415# 闭包、嵌套def outer(): a = 100 def inner(): b = 200 print('inner') result = locals() print(locals()) # &#123;'a': 100, 'inner': &lt;function outer.&lt;locals&gt;.inner at 0x0000016C49967678&gt;, 'result': &#123;...&#125;&#125;outer() 123456789101112131415def outer(): a = 100 def inner(): # 如果要对外部变量操作 nonlocal a # 将外部变量取消局部变量 b = 200 b += a print('inner', b) # inner 300# 内部函数可以使用外部函数的变量 但是不可以修改 print(a) inner()outer() 闭包 1234567891011121314def outer(n): a = 10 def inner(): b = a + n print('内部函数:', b) return inner # 不是inner()，而是传出该函数r = outer(5)print(r)r() 装饰器 1234567891011121314151617181920212223242526# 定义装饰器,闭包def decorator(func): print('------------&gt; 1') def wrapper(): func() print('刷漆') print('铺地板') print('买家具') print('精装修') print('-------------&gt;2') return wrapper@decorator # 等价于house = decorater(house)def house(): print('毛坯房')@decoratordef xxx(): print('xxx')house() 12345678910'''装饰器的应用场景 遵循开放封闭原则，在不改变原函数的情况下 拓展函数的功能1 引入日志2 函数执行时间统计3 执行函数前预备处理4 执行函数后清理功能5 权限校验6 缓存''' 带参数的装饰器 123456789101112131415# 原函数有参数，装饰器内也要有参数。def decorator(func): def wrapper(*args,**kwargs): # 使用*args和**kwargs保证调用的时候传多少个参数都可以 func(*args,**kwargs) # 此处*为拆包 print('刷漆精修房')# 如果没有**kwargs的话，传入的是默认参数键值对的话，只能接收到键，会报错。 return wrapper@decoratordef house(address, area): print('房子地址是&#123;&#125;,是一个毛坯房...面积&#123;&#125;'.format(address, area))house('北京四合院', 20) 123@デコレータ関数を生成する関数(引数)def デコレート対象の関数(引数): 関数の中身","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Python学习笔记(5)","date":"2021-05-19T01:38:56.000Z","path":"posts/f1552126.html","text":"12345678910111213141516171819202122232425262728293031323334353637# 集合 底层是用字典做的# set# 特点，没有重复，无序# 花括号内的元素不是键值对，就为set# 如果放的键值对，就是字典set1 = &#123;'zhangsan'&#125;print(type(set1))# 列表强转集合list1 = [1, 2, 3, 6, 8, 9, 9, 1, 2, 3, 4, 5]set2 = set(list1)print(set2)set3 = &#123;&#125; # 空字典print(type(set3))set4 = set() # 集合声明方法print(type(set4))# 添加元素 addset4.add('三体')set4.add('盗墓笔记')priprint(result)nt(set4)set4.add('红楼梦')print(set4)# append extend -----&gt;list# update add -----&gt;setset1.update(set4)print(set1) # 将set4 插入到set1 中，无序。print(set4)# 重复添加没有变化result = set4.add('三体') # 没有返回值print(set4) 产生验证码 123456789101112131415161718# 打印五组不重复验证码import randomcode_list = set()s = 'qwertyuiopasdfghjklzxcvbnm0123456789'while True: code = '' for i in range(4): r = random.choice(s) # 随机从某个字符串内选择一个 code += r # index = random.randint(0, len(s)-1) # code += s[index] # 将code添加到set中 code_list.add(code) # 判断长度为5 if len(code_list) == 5: breakprint(code_list) 其余方法 1234567891011121314# 移除元素 remove discard# pop按顺序弹出，但是集合没有顺序 随机删除set1 = &#123;'rbkf', '2f3t', 'kf7g', 't5li', 'k8eb'&#125;set1.remove('rbkf') # 如果不存在会报错print(set1)set1.discard('rbkf') # 如果成员不存在也不会报错# del set1 整个删除set1.clear()set1.difference() # 返回集合的差集set1.intersection() # 返回交集set1.union() # 并集# 可以用符号代替 -差集 &amp;交集 |并集 几个常用结构相互转换 1234567891011'''list ----&gt; tuple,set(长度可能会发生改变)tuple ----&gt;list,set(同上)set ----&gt; list,tupledict ---&gt; list,tuple,set key值保留，value会丢失'''# list转dictlist1 = [('a', 10), ('b', 20)]print(dict(list1)) 1234567891011121314151617# 公共方法(内置方法)'''print() input() type() len() id() delin not in is 进制转换 bin hex oct int最大值，最小值list1 = [1,2,3,4,5,6,7]result = max(list1)min()result = sum(list1) abs()sorted(xx,reverse=True) # list1.sort(self,reverse)result = chr(int) ---&gt; ASCII码转换成字符。ord() ----&gt;字符转ASCII码值。''' 列表推导式 1234567891011121314151617181920212223242526272829# 列表推导式list1 = []for i in range(1, 21): list1.append(i)print(list1)# 格式 [a for i in 可迭代的]# a为赋值变量list1 = [i for i in range(1, 21)]list1 = [i + 2 for i in range(1, 10)]# 1-100之间的偶数list1 = [i * 2 for i in range(0, 51)]list1 = [i for i in range(0, 101, 2)] # 步长为2# if判断格式# [i for i in 可迭代 if 条件]list1 = [i for i in range(0, 101) if i % 2 == 0]list2 = ['62', 'luck', '99']list3 = [word for word in list2 if word.isalpha()]# if else格式list4 = [word.title() if word.startswith('h') else word.upper() for word in list3]print(list4)# 双层for循环list5 = [(i, j) for i in range(1, 5) for j in range(3, 5)] 函数定义 1234567891011121314151617181920212223242526272829303132# 定义函数# 格式# def 函数名()# 代码## 打印五组不重复验证码import randomdef generate_code(n): code_list = set() s = 'qwertyuiopasdfghjklzxcvbnm0123456789' while True: code = '' for i in range(4): r = random.choice(s) # 随机从某个字符串内选择一个 code += r # index = random.randint(0, len(s)-1) # code += s[index] # 将code添加到set中 code_list.add(code) # 判断长度为5 if len(code_list) == n: break print(code_list)print(generate_code) # &lt;function generate_code at 0x0000028863077168&gt;# 调用函数generate_code(2) 传参函数要注意类型判断 12345678910111213# 类型一致def get_sum(a, b): # if type(a) == type(b): # s = a + b # print(s) if isinstance(a, int) and isinstance(b, int): s = a + b print(s) else: print('类型错误!')get_sum(2, 3) 形参，多个参数，可变参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 默认值参数# def 函数名(参数1,参数2=值)# 调用：无默认值必须传值，有默认值可传值可不传值# 参数的数据类型是列表libaray = ['python精通', 'MySQL', '数据分析']# 形参def add_book(bookname): libaray.append(bookname) print('成功')def show_book(books): for book in books: print(book)add_book('新概念英语')show_book(libaray)# 可变参数 *arg **kwarg# def get_sum(a, b):# r = a + b# print(r)# *arg *a都是一样的，*号是必须的def get_sum(*args): s = 0 for i in args: s += i print(s)get_sum(1, 2)get_sum(1, 3, 5, 7)a, *b, c = 1, 2, 3, 4, 5print(a, b, c)# *b [2, 3, 4]ran_list = [1, 3, 5, 4, 7, 8, 9]# get_sum(ran_list)# 传入的是元组 ([1, 3, 5, 4, 7, 8, 9],)get_sum(*ran_list) # 拆包 传参声明的时候，加星号为装包。装为列表 调用的时候，加星号为拆包。将元组拆包。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Python学习笔记(4)","date":"2021-05-18T01:39:06.000Z","path":"posts/e84e1067.html","text":"1 列表的添加 append 添加单个元素 +号直接连接 extend拓展。 123456789101112131415161718192021222324252627282930# # 列表的删除# # pop remove clear# list1 = ['火腿肠', '酸奶', '油条', '面包', '辣条']# list1.pop(2) # 填下标# print(list1)# # pop从后往前删减，如果不填下标，从后往前一个一个删## # remove 直接填元素# list1.remove('辣条')# print(list1)# # 删除元素# n = 0# while n &lt; len(list1):# if list1[n] == '酸奶':# list1.remove('酸奶')# else:# n += 1# print(list1)## for i in range(len(list1)):# if list1[i] == '酸奶':# list1.remove('酸奶')# i -= 1 # 重要# print(list1)## list1.clear()## print(id(list1))# list2 = []# print(id(list2)) 12345678list1 = [1, 2]list2 = list1 # 指针指向了同一个位置list2.append(8)print(list1) # list1和list2相同print(list2)list1.clear() # 指针后的所有东西删除del list2 # 删除的指针print(list1) # list1不受影响 sort默认升序。reverse默认为False，通过reverse=True变为降序。 1234567891011# 列表排序sort reverseimport randomnumbers = []for i in range(8): numbers.append(random.randint(1, 20))print(numbers)numbers.reverse() # 返回值是none，不能直接放进print，单纯的反转print(numbers)numbers.sort(reverse=True)print(numbers) 123456789101112# 将随机整数插入已排序好的数列中import randomnumbers = []for i in range(10): numbers.append(random.randint(1, 100))print(numbers)numbers.sort(reverse=True)print(numbers)numbers.append(int(input('输入一个100的整数')))numbers.sort()print(numbers) 1234# 交叉赋值# python中的简便方法a, b = b, aprint(a, b) 123456789# 冒泡排序num = [5, 1, 7, 10, 9, 2, 4, 3]for j in range(0, len(num)-1): for i in range(0, len(num) - 1 - j): if num[i] &gt; num[i + 1]: a = num[i] num[i] = num[i+1] num[i+1] = aprint(num) 1234567891011121314151617181920212223242526272829303132333435# 元组# 元组不能修改元素，只能读，不能修改。# 元组使用小括号，列表使用方括号# list 列表# tuple 元组t1 = ()print(type(t1)) # &lt;class 'tuple'&gt;t2 = ('aa')print(type(t2)) # &lt;class 'str'&gt;t2 = ('aa',)print(type(t2)) # &lt;class 'tuple'&gt;# 注意。元组内仅有一个元素时要加逗号# 下标和切片可以使用t3 = ('aa', 'bb', 4, 'cc')print(t3[2])print(t3[1:])# 逆序print(t3[::-1])# 计数print(t3.count('aa'))# 返回第一个找到的下标位置print(t3.index('aa')) # start end# 类型转换# list(tuple)# tuple(list)t3 = list(t3)print(t3)t3.append('x')t3 = tuple(t3)print(t3) 12345678910111213141516171819202122232425262728293031323334# 字典book = &#123;&#125;book['书名'] = '《三体》'book['价格'] = 20book['价格'] *= 0.8print(book)# book.pop('价格') # 放入key# print(book)# r = book.popitem() # 从后往前删除一个元素 并返回一个元组# # 若为空报错# print(book)# print(r)# 取值print(book.get('书名'))value = book['书名'] # 若空会报错book.get('书名', '默认值') # 如果没有会返回一个默认值可设置# 使用 for in遍历字典，取出的是key值for i in book: print(i) # 取出为key值# 改为# for v in book.keys()# for k in book.values()print(book.items()) # 分对dict_items([('书名', '《三体》'), ('价格', 16.0)])# for k,v in book.items():book.setdefault('出版社', '人民教育出版社')print(book)dict1 = &#123;'a': 10, 'b': 20&#125;book.update(dict1) # 字典的连接print(book)","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"Python学习笔记(3)","date":"2021-05-16T01:07:46.000Z","path":"posts/a70f86a0.html","text":"由于多次保存之后都不知道为什么被清了。所以只剩下截图了。","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"吾輩は猫である","date":"2021-05-11T14:29:02.000Z","path":"posts/49c78c96.html","text":"抜粋","tags":[]},{"title":"Python学习笔记(2)","date":"2021-05-11T00:53:43.000Z","path":"posts/7fc5b99e.html","text":"Day2 and Day3 由于Day2的笔记没有保存丢失，只剩下截图了（ Day3 位运算打印结果为int类型 位取反会产生补码 由于去了毕业旅游，day4和day3并在一起。 if 语句不用加括号，要加冒号，用缩进表示包含。 随机数函数需要引入random包。 条件2 用elif。 if else的进阶用法 用pass表示语句，可以暂时不编程。 空字符串表示false，有内容为true while循环。也是用冒号。 for循环 起始，终止，跳。 range范围为[X,Y)。1-50和为 （1,51） for i in range(3) 用于密码错误尝试三次。 for i in range(n): else: while…else同理","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"走れメロス","date":"2021-05-10T13:08:38.000Z","path":"posts/5a1d991.html","text":"新出語彙 妹婿：いもうとむこ 賢臣：けんしん 捕縛：ほばく 威厳：いげん 磔（はりつけ）とは、罪人を板や柱などに縛りつけ、槍などを用いて殺す公開処刑の刑罰のこと。磔刑（たっけい） 嗄れる：しわがれる 声がかれる ほくそ笑（え）む とは、人に隠れて笑う、人に気づかれない程度に少し笑うという意味 縄を打つ：犯人を取り押さえて―・つ 車軸：しゃじく 佳い：よい めでたい という意味をもつ 御免蒙る（ごめんこうむる）：相手の許しを得て退出する。失礼する 南無三：南無三宝の略、また失敗した際に「しまった」といった感動詞として発する。 せせら笑う：ばかにして冷ややかに笑う。あざける 胴震い：どうぶるい 寒けや恐ろしさで全身がふるえること。 おりから：折から、折柄。 ちょうどその時。 巣食うとは。 「棲み着いている」ことを表す言葉です 反社会的組織などの一般的にあまり好まれない人たちに対して使うこともできます。 独りよがり：独り善がり、自分が良いを考えていることを、他人のことをこうりょせずに、押し通そうとすること。 やんぬるかな：已矣哉の訓読み。 今となってはどうしようもない。 擡げる：もたげる 「頭を―」（目立った存在となってくる意にも） 疾風：しっぷう、はやて（疾風 どよめく：音が響き渡る まっぱだ：真っ裸 マント：披风 御復習い 悪びれずに：自分の行いを悪いことだと思うそぶりを見せない様子。 召す：めす 祭壇：さいだん 宥める：なだめる 冷静 堪える：こらえる 鞭打つ：むちうつ 怯む：ひるむ ひるまない まどろむ：微睡む 抜粋","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"日本語","slug":"日本語","permalink":"https://nari2021.github.io/my-blog/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"小説","slug":"小説","permalink":"https://nari2021.github.io/my-blog/tags/%E5%B0%8F%E8%AA%AC/"}]},{"title":"Python学习笔记（1）","date":"2021-05-10T02:18:05.000Z","path":"posts/db9be8e8.html","text":"1 使用单引号，双引号，三引号声明字符串，可以用于区分单双引号。 2 使用三引号输出的字符串可以保留格式输出。 3 Python中的布尔类型需要大写True False 4 重复声明中添加使用就不会警告。 5 输入数据用input（），builtins表示标准库内置函数。 6 input阻塞型函数，括号内输入提示内容。 7 使用变量存放接收到的内容 8 input接收到的数据都是string类型，无论输入的是数字还是文字。 9 不能直接使用接收到的数据进行加减需要进行类型转换。图中的+号被识别为了连接字符的符号。1000不是字符串无法连接。 10 使用和其他语言一样的类型转换int（）等。 11 注意以下区别 12 str转为int类型 前提是输入的数据没有小数。 13 True为1 False为0。 int类型转为bool。只有为0时才为False，负数正数都为True。变量为空字符串也为False。 14 print 逗号表示空格，在定义中，sep参数表示空格字符，可以设置，end属性也可以修改设置。 15 //表示整除，**表示次方。 2021.5.10 Day1","tags":[{"name":"编程","slug":"编程","permalink":"https://nari2021.github.io/my-blog/tags/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"https://nari2021.github.io/my-blog/tags/Python/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://nari2021.github.io/my-blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"日本語の勉強——詩（1）","date":"2021-04-05T13:44:39.000Z","path":"posts/5701c8b1.html","text":"初恋..はじめに やさしく白き手をのべて 林檎をわれにあたへしは 薄紅の秋の実に 人こひ初めしはじめなり この一節に初めて触れたのは、国語便覧の近現代名詩選を読んでいる時でした。私は多感な心で時の流れも忘れて藤村さんの素敵な詩にひたっていました。 初恋 初恋 島崎 藤村 まだあげ初めし前髪の 林檎のもとに見えしとき 前にさしたる花櫛の 花ある君と思ひけり やさしく白き手をのべて 林檎をわれにあたへしは 薄紅の秋の実に 人こひ初めしはじめなり わがこゝろなきためいきの その髪の毛にかゝるとき たのしき恋の盃を 君が情けに酌みしかな 林檎畠の樹の下に おのづからなる細道は 誰がふみそめしかたみぞと 問ひたまふこそこひしけれ 人をよわせた五七調のリズムは甘美に響きます。この詩の言葉の意味が正確に理解できませんか。おそらく理解しないまま今まで口ずさんできたでしょうね。さぁ、一行ずつ言葉の意味の解説を試みをしてみましょう。 鑑賞 まだあげ初めし前髪の 訳：まだ結い上げたばかりのあなたの前髪。 「髪を結い上げる」とは、明治時代のころ、少女が12、3歳頃になると、「もう子供でもない、成人の女性になった」という変化を示す印である。 林檎のもとに見えしとき 訳：林檎の木の下に君の姿が見えた。 「見えし」とは、動詞の連用形に過去の助動詞「き」の連体形を接続するものです。「見えし」は「見えた」の意味です。 前にさしたる花櫛の 訳：前髪のさしている花櫛は。 「花櫛」とは、造花で飾った櫛、主に少女用。「さしたる」とは、「さす」の連用形「さし」に完了・存続の意味を持つ「たり」助動詞の連体形を接続するものです。 花ある君と思ひけり 訳：君が花のように美しいと思った。 「思ひけり」とは、「思ふ」の連用形「思ひ」に過去の助動詞「けり」の終止形を接続するものです。「思ひけり」は「思った」の意味です。 やさしく白き手をのべて 訳：あなたは、やさしく白い手をのばして。 「白き」とは、「白し」の連体形です。 林檎をわれにあたへしは 訳：私に林檎をくれました。 「われ」は「我」と書きます。「あたへし」とは、ハ行下二段活用の動詞「与ふ」の連用形「与へ」に「し」を接続するものです。現代語の「与える」とちょっと違いがあります。 薄紅の秋の実に 訳：（もらった林檎は）、薄紅の秋の実です。 人こひ初めしはじめなり 訳：わたしは、初めてあなたとの恋に落ちているですよ。 「こひ」とは、「恋」です。「なり」は古典にて用いられる判断を下す助動詞です。「なり」は「です」の意味です。 わたしたちも思う人から贈り物をもらった時、その贈り物を本人の化身のように思って大切にしているでしょう。少年は、少女をくれた林檎を、少女であるかのように恋心を抱いています。 わがこゝろなきためいきの 訳：わたしがおもわずため息をもらした。 「こころなき」とは、「おもわず」の意味です。無意識に、あるいは知らず知らずのうちに。 その髪の毛にかゝるとき 訳：あなたの髪の毛にかかっている時。 たのしき恋の盃を 訳：楽しい恋の盃を。 「たのしき」とは、「楽し」の連体形です。 君が情けに酌みしかな 訳：わたしは、恋の盃を君と情け深いに酌みかわしているかな。 この句は譬えです。盃から「酌みし」という言葉が導かれています。 林檎畠の樹の下に 訳：林檎畠の樹の下に。 おのづからなる細道は 訳：（わたしたちがここに通って歩き踏み固めた）おのずからなる細道は。 林檎畠に自然にできた細道は、少年と少女は、いつも同じ道を通い、数え切れないほど会っているのでしょう。 誰がふみそめしかたみぞと 訳：「誰がこの道を踏み固めたのでしょう」と。 問ひたまふこそこひしけれ 訳：あなたは（「誰がこの道を踏み固めたのでしょう」と）尋ねる、いと愛おしく思うのです。 「あのね、林檎の中にこの細く続いてる道は、誰が作ったのかな」ーー少女が少年に訪ねます。少年は彼女を愛おしく思うのですよね。 後書き出典・引用・参考文献： [1]若菜集 [2]総合国語便覧 [3]Yahoo！知恵袋 [4]ジャパンウィキペディア","tags":[{"name":"日本語","slug":"日本語","permalink":"https://nari2021.github.io/my-blog/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"詩","slug":"詩","permalink":"https://nari2021.github.io/my-blog/tags/%E8%A9%A9/"},{"name":"鑑賞","slug":"鑑賞","permalink":"https://nari2021.github.io/my-blog/tags/%E9%91%91%E8%B3%9E/"}]},{"title":"开发日志1.1","date":"2021-02-19T08:11:40.000Z","path":"posts/a292b236.html","text":"开发日志1.1修复了如下bug 贴图不正确现在赞赏码可以正确显示了（再也不是别人的了 评论功能取消了原有的disqus，改为使用valine插件。现在评论可以不需要使用小飞机了。 左侧菜单修复了bulletin board不能正确指向url地址。现在可以正确指向categories属性为开发日志的文章了。但是这样会导致两个标签同时被选中，所以我决定暂时移除此功能，会在后续版本中改进。 摘要修复了原本文章摘要会弹出meting等代码的乱码，现在可以正确显示了。 路径改变由原本指向nari2021.github.io，即使用的仓库名是nari2021.github.io改为了my-blog。此操作需要在多处配置文件里面进行修改，是个雷区。 后续改进方向添加音乐功能，友链，图片大小设置，各处文章的超链接进行衔接（后续可能会更新连载系列的文，涉及到目录等功能会考虑使用Python等语言进行一键操作，待学习），使用手机等快速发博客功能，而不是在电脑使用typora编辑markdown文件还要考虑语法，主页的背景设置，转场设置等功能。 因为indigo这个模板主题有很多功能没有包含进来，后续的开发可能会遇到很多问题，敬请期待。 非常感谢你能读到这里！！","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]},{"title":"开发日志1.0","date":"2021-02-18T13:00:13.000Z","path":"posts/d59582a0.html","text":"开发日志1.0历经数小时，经过不断地尝试和实践，终于让这个博客有了自己的雏形，以下记录的是该博客已经实现好的功能和实现过程中的雷区。 博客的搭建主要参考教程是bilibili一个up主的视频(单击此处即可进入)。 博客选择部署在GitHub上面，gitee也可以，而且访问速度会比GitHub快很多，当完成了以上步骤就可以进行主题等操作。 主题的设置本博客采用的主题是indigo主题，在GitHub上可以进行下载。并且按照教程进行安装即可，网上的配置方式很多，可以采用 1npm install hexo-xxx 上面这个命令格式安装自己想要的插件，比如音乐播放，live2d等。具体可以参考这篇文章，里面有一些比较常用的插件。 如果按照上诉步骤弄完，主要是主题的切换，将根目录下的_config.yml 文件中 123 theme: landscapechange to theme: xxxx 然后在根目录下执行启动命令报错的话。 1hexo s 因为我遇到了这样的坑，且indigo主题的作者已经不再维护这个项目了。在GitHub的issue里面可以看到类似的问题出现，根据描述疑似是win10的个例会掉坑。最后我找到的解决方案是，直接把别人的代码拷贝下来修改yml文件的配置即可。（因为咱也不是很懂具体的内部原理 实现的一些功能包含了博客基本的功能。 个人主页 ↑这就是大概实现的一个雏形啦~ 里面的文章是测试用的文章。具体的一些小功能例如页面的自动收缩，就不详细说了，具体参照indigo的yml文件说明文档。 左侧的菜单栏介绍从上往下分别就是 主页这个就不用多说了吧！ Archives这个的功能是按照日期查看我的博客。 Tags这个的功能是按照标签对博客进行筛选。以后我写的文章里面都会认真进行分类的！ Categories这个的功能是按照分类对博客进行筛选。比如学习类，编程类，生活类。 bulletin board这个就是公告栏啦。原计划是定向到 source/categories/..目标文件夹下面的一个分类，这样点击这个菜单选项就可以直接定向到有关于开发日志和公告类的博客了。（但是目前好像出了的差错，计划在后续过程中修复 GitHub点击后会跳转到我部署在GitHub上的代码链接。 Twitter什么？你想点进来？你不对劲。目前不开放此功能！ 一些小功能评论系统使用的是框架自带的disqus。配置很简单只需要将其属性改成true即可。但是缺点也很明显，首先加载速度很慢，可能需要小飞机的支持。 如图所示。在文章最底下，可能需要等待一段时间加载。如果加载不出来，点击Reload稍等即可。 该插件是第三方的应用，所以需要Google/FB/小蓝鸟等账号的登录，需要小飞机。 评论之后的结果就会像下图一样。 打赏功能如果觉得对你有帮助的话！！！！！！！！！看到文末的小圆圈了吗（ 琐碎功能包含了访客数统计(修改配置文件)，目录导航，文章分享，站内搜索，单篇文章访问数量等功能。 我学到了什么引用一句谚语：石の上にも三年。有志者事竟成。 在教程的帮助下，虽然可以很快的以一种很简单的方式，跳过了其原理搭建出一个自己的blog，不过在此期间是有很多不通顺的地方的。正是这些地方能学习到很多东西，比如markdown文件的语法，yml文件的语法，html文件的语法，各项配置，导入，部署。只有真正做过一次才能体会到最后成功的喜悦。 最后这算是我的第一篇文章，可能会有很多没做好的地方。会在未来很长的一段时间内，不断地学习相关知识并优化该网站。 文章的数量应该也会随着时间慢慢堆积。我会在这里存放我的学习、生活、社交、对事物的思考以及一些琐碎的文章，有助于未来的我，在回首今天写下这第一篇文章时，不忘当初的初心。 非常感谢你能够阅读到这里！！！！！","tags":[{"name":"开发日志","slug":"开发日志","permalink":"https://nari2021.github.io/my-blog/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"}]}]